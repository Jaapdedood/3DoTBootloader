
Lily3D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00007eea  00000f7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eea  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  008001b4  008001b4  00001032  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004e0  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ab4  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001791  00000000  00000000  00006250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003635  00000000  00000000  000079e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003ec  00000000  00000000  0000b018  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002065  00000000  00000000  0000b404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002366  00000000  00000000  0000d469  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000228  00000000  00000000  0000f7cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	ce c4       	rjmp	.+2460   	; 0x79c6 <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	92 c0       	rjmp	.+292    	; 0x716a <__vector_17>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	ea ee       	ldi	r30, 0xEA	; 234
    70c0:	fe e7       	ldi	r31, 0x7E	; 126
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <__do_copy_data+0x10>
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	a4 3b       	cpi	r26, 0xB4	; 180
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__do_copy_data+0xc>

000070ce <__do_clear_bss>:
    70ce:	21 e0       	ldi	r18, 0x01	; 1
    70d0:	a4 eb       	ldi	r26, 0xB4	; 180
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	ad 3c       	cpi	r26, 0xCD	; 205
    70da:	b2 07       	cpc	r27, r18
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	1e d3       	rcall	.+1596   	; 0x771c <main>
    70e0:	02 c7       	rjmp	.+3588   	; 0x7ee6 <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70e4:	84 e0       	ldi	r24, 0x04	; 4
    70e6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    70ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
    /* Select the OUT endpoint so that the next data byte can be read */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* If OUT endpoint empty, clear it and wait for the next packet from the host */
    while (!(Endpoint_IsReadWriteAllowed()))
    70ee:	85 fd       	sbrc	r24, 5
    70f0:	0d c0       	rjmp	.+26     	; 0x710c <FetchNextCommandByte+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    70f6:	8b 77       	andi	r24, 0x7B	; 123
    70f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    70fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    {
        Endpoint_ClearOUT();

        while (!(Endpoint_IsOUTReceived()))
    7100:	82 fd       	sbrc	r24, 2
    7102:	f3 cf       	rjmp	.-26     	; 0x70ea <FetchNextCommandByte+0x6>
        {
            if (USB_DeviceState == DEVICE_STATE_Unattached)
    7104:	8e b3       	in	r24, 0x1e	; 30
    7106:	81 11       	cpse	r24, r1
    7108:	f9 cf       	rjmp	.-14     	; 0x70fc <FetchNextCommandByte+0x18>
    710a:	02 c0       	rjmp	.+4      	; 0x7110 <FetchNextCommandByte+0x2c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    710c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
        }
    }

    /* Fetch the next byte from the OUT endpoint */
    return Endpoint_Read_8();
}
    7110:	08 95       	ret

00007112 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7112:	93 e0       	ldi	r25, 0x03	; 3
    7114:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7118:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
    /* Select the IN endpoint so that the next data byte can be written */
    Endpoint_SelectEndpoint(CDC_TX_EPNUM);

    /* If IN endpoint full, clear it and wait until ready for the next packet to the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    711c:	95 ff       	sbrs	r25, 5
    711e:	0a c0       	rjmp	.+20     	; 0x7134 <WriteNextResponseByte+0x22>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7120:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    }

    /* Write the next byte to the IN endpoint */
    Endpoint_Write_8(Response);

    TX_LED_ON();
    7124:	5d 98       	cbi	0x0b, 5	; 11
    TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7126:	84 e6       	ldi	r24, 0x64	; 100
    7128:	90 e0       	ldi	r25, 0x00	; 0
    712a:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <TxLEDPulse+0x1>
    712e:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <TxLEDPulse>
    7132:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7134:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7138:	9e 77       	andi	r25, 0x7E	; 126
    713a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    713e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    /* If IN endpoint full, clear it and wait until ready for the next packet to the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    {
        Endpoint_ClearIN();

        while (!(Endpoint_IsINReady()))
    7142:	90 fd       	sbrc	r25, 0
    7144:	ed cf       	rjmp	.-38     	; 0x7120 <WriteNextResponseByte+0xe>
        {
            if (USB_DeviceState == DEVICE_STATE_Unattached)
    7146:	9e b3       	in	r25, 0x1e	; 30
    7148:	91 11       	cpse	r25, r1
    714a:	f9 cf       	rjmp	.-14     	; 0x713e <WriteNextResponseByte+0x2c>
    714c:	08 95       	ret

0000714e <StartSketch>:
volatile uint8_t *const bootKeyPtr = (volatile uint8_t *)0x0800;

// StartSketch() is called to clean up our mess before passing execution to the sketch.
void StartSketch(void)
{
    cli();
    714e:	f8 94       	cli

    /* Undo TIMER1 setup and clear the count before running the sketch */
    TIMSK1 = 0;
    7150:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TCCR1B = 0;
    7154:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

    /* Relocate the interrupt vector table to the application section */
    MCUCR = (1 << IVCE);
    7158:	81 e0       	ldi	r24, 0x01	; 1
    715a:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    715c:	15 be       	out	0x35, r1	; 53

    L_LED_OFF();
    715e:	47 98       	cbi	0x08, 7	; 8
    TX_LED_OFF();
    7160:	5d 9a       	sbi	0x0b, 5	; 11
    RX_LED_OFF();
    7162:	28 9a       	sbi	0x05, 0	; 5

    /* jump to beginning of application space */
    __asm__ volatile("jmp 0x0000");
    7164:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    7168:	08 95       	ret

0000716a <__vector_17>:
// Timer1 is set up to provide periodic interrupts. This is used to flicker the LEDs during
//  programming as well as to generate the clock counts which determine how long the board should
//  remain in bootloading mode.

ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    716a:	1f 92       	push	r1
    716c:	0f 92       	push	r0
    716e:	0f b6       	in	r0, 0x3f	; 63
    7170:	0f 92       	push	r0
    7172:	11 24       	eor	r1, r1
    7174:	2f 93       	push	r18
    7176:	8f 93       	push	r24
    7178:	9f 93       	push	r25
    717a:	ef 93       	push	r30
    717c:	ff 93       	push	r31
    /* Reset counter */
    TCNT1H = 0;
    717e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    TCNT1L = 0;
    7182:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    /* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
    if (TxLEDPulse && !(--TxLEDPulse))
    7186:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <TxLEDPulse>
    718a:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <TxLEDPulse+0x1>
    718e:	00 97       	sbiw	r24, 0x00	; 0
    7190:	41 f0       	breq	.+16     	; 0x71a2 <__vector_17+0x38>
    7192:	01 97       	sbiw	r24, 0x01	; 1
    7194:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <TxLEDPulse+0x1>
    7198:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <TxLEDPulse>
    719c:	89 2b       	or	r24, r25
    719e:	09 f4       	brne	.+2      	; 0x71a2 <__vector_17+0x38>
        TX_LED_OFF();
    71a0:	5d 9a       	sbi	0x0b, 5	; 11
    if (RxLEDPulse && !(--RxLEDPulse))
    71a2:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <RxLEDPulse>
    71a6:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <RxLEDPulse+0x1>
    71aa:	00 97       	sbiw	r24, 0x00	; 0
    71ac:	41 f0       	breq	.+16     	; 0x71be <__vector_17+0x54>
    71ae:	01 97       	sbiw	r24, 0x01	; 1
    71b0:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <RxLEDPulse+0x1>
    71b4:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <RxLEDPulse>
    71b8:	89 2b       	or	r24, r25
    71ba:	09 f4       	brne	.+2      	; 0x71be <__vector_17+0x54>
        RX_LED_OFF();
    71bc:	28 9a       	sbi	0x05, 0	; 5
    resetTimeout++;  // Needed for the "short reset delay" mode- governs the time the board waits
    71be:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
    71c2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <__data_end+0x1>
    71c6:	01 96       	adiw	r24, 0x01	; 1
    71c8:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <__data_end+0x1>
    71cc:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
                     //  for a second reset before loading the sketch.
    if (pgm_read_word(0) != 0xFFFF)
    71d0:	e0 e0       	ldi	r30, 0x00	; 0
    71d2:	f0 e0       	ldi	r31, 0x00	; 0
    71d4:	85 91       	lpm	r24, Z+
    71d6:	94 91       	lpm	r25, Z
    71d8:	01 96       	adiw	r24, 0x01	; 1
    71da:	49 f0       	breq	.+18     	; 0x71ee <__vector_17+0x84>
        Timeout++;
    71dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <Timeout>
    71e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <Timeout+0x1>
    71e4:	01 96       	adiw	r24, 0x01	; 1
    71e6:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <Timeout+0x1>
    71ea:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Timeout>
}
    71ee:	ff 91       	pop	r31
    71f0:	ef 91       	pop	r30
    71f2:	9f 91       	pop	r25
    71f4:	8f 91       	pop	r24
    71f6:	2f 91       	pop	r18
    71f8:	0f 90       	pop	r0
    71fa:	0f be       	out	0x3f, r0	; 63
    71fc:	0f 90       	pop	r0
    71fe:	1f 90       	pop	r1
    7200:	18 95       	reti

00007202 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7202:	42 e0       	ldi	r20, 0x02	; 2
    7204:	61 ec       	ldi	r22, 0xC1	; 193
    7206:	82 e0       	ldi	r24, 0x02	; 2
    7208:	54 d3       	rcall	.+1704   	; 0x78b2 <Endpoint_ConfigureEndpoint_Prv>
    720a:	42 e1       	ldi	r20, 0x12	; 18
    720c:	61 e8       	ldi	r22, 0x81	; 129
    720e:	83 e0       	ldi	r24, 0x03	; 3
    7210:	50 d3       	rcall	.+1696   	; 0x78b2 <Endpoint_ConfigureEndpoint_Prv>
    7212:	42 e1       	ldi	r20, 0x12	; 18
    7214:	60 e8       	ldi	r22, 0x80	; 128
    7216:	84 e0       	ldi	r24, 0x04	; 4
    7218:	4c c3       	rjmp	.+1688   	; 0x78b2 <Endpoint_ConfigureEndpoint_Prv>

0000721a <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    /* Ignore any requests that aren't directed to the CDC interface */
    if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    721a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <USB_ControlRequest>
    721e:	98 2f       	mov	r25, r24
    7220:	9f 77       	andi	r25, 0x7F	; 127
    7222:	91 32       	cpi	r25, 0x21	; 33
    7224:	39 f5       	brne	.+78     	; 0x7274 <EVENT_USB_Device_ControlRequest+0x5a>
    {
        return;
    }

    /* Process CDC specific control requests */
    switch (USB_ControlRequest.bRequest)
    7226:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <USB_ControlRequest+0x1>
    722a:	90 32       	cpi	r25, 0x20	; 32
    722c:	91 f0       	breq	.+36     	; 0x7252 <EVENT_USB_Device_ControlRequest+0x38>
    722e:	91 32       	cpi	r25, 0x21	; 33
    7230:	09 f5       	brne	.+66     	; 0x7274 <EVENT_USB_Device_ControlRequest+0x5a>
    {
        case CDC_REQ_GetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    7232:	81 3a       	cpi	r24, 0xA1	; 161
    7234:	f9 f4       	brne	.+62     	; 0x7274 <EVENT_USB_Device_ControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7236:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    723a:	87 7f       	andi	r24, 0xF7	; 247
    723c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();

                /* Write the line coding data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    7240:	67 e0       	ldi	r22, 0x07	; 7
    7242:	70 e0       	ldi	r23, 0x00	; 0
    7244:	82 e0       	ldi	r24, 0x02	; 2
    7246:	91 e0       	ldi	r25, 0x01	; 1
    7248:	6f d4       	rcall	.+2270   	; 0x7b28 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    724a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    724e:	8b 77       	andi	r24, 0x7B	; 123
    7250:	0f c0       	rjmp	.+30     	; 0x7270 <EVENT_USB_Device_ControlRequest+0x56>
                Endpoint_ClearOUT();
            }

            break;
        case CDC_REQ_SetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    7252:	81 32       	cpi	r24, 0x21	; 33
    7254:	79 f4       	brne	.+30     	; 0x7274 <EVENT_USB_Device_ControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7256:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    725a:	87 7f       	andi	r24, 0xF7	; 247
    725c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();

                /* Read the line coding data in from the host into the global struct */
                Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    7260:	67 e0       	ldi	r22, 0x07	; 7
    7262:	70 e0       	ldi	r23, 0x00	; 0
    7264:	82 e0       	ldi	r24, 0x02	; 2
    7266:	91 e0       	ldi	r25, 0x01	; 1
    7268:	c3 d4       	rcall	.+2438   	; 0x7bf0 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    726a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    726e:	8e 77       	andi	r24, 0x7E	; 126
    7270:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7274:	08 95       	ret

00007276 <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    7276:	4f 92       	push	r4
    7278:	5f 92       	push	r5
    727a:	6f 92       	push	r6
    727c:	7f 92       	push	r7
    727e:	8f 92       	push	r8
    7280:	9f 92       	push	r9
    7282:	af 92       	push	r10
    7284:	bf 92       	push	r11
    7286:	cf 92       	push	r12
    7288:	df 92       	push	r13
    728a:	ef 92       	push	r14
    728c:	ff 92       	push	r15
    728e:	0f 93       	push	r16
    7290:	1f 93       	push	r17
    7292:	cf 93       	push	r28
    7294:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7296:	84 e0       	ldi	r24, 0x04	; 4
    7298:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    729c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    /* Select the OUT endpoint */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* Check if endpoint has a command in it sent from the host */
    if (!(Endpoint_IsOUTReceived()))
    72a0:	82 ff       	sbrs	r24, 2
    72a2:	2b c2       	rjmp	.+1110   	; 0x76fa <CDC_Task+0x484>
      return;

    RX_LED_ON();
    72a4:	28 98       	cbi	0x05, 0	; 5
    RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    72a6:	84 e6       	ldi	r24, 0x64	; 100
    72a8:	90 e0       	ldi	r25, 0x00	; 0
    72aa:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <RxLEDPulse+0x1>
    72ae:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <RxLEDPulse>

    /* Read in the bootloader command (first byte sent from host) */
    uint8_t Command = FetchNextCommandByte();
    72b2:	18 df       	rcall	.-464    	; 0x70e4 <FetchNextCommandByte>

    if (Command == 'E')
    72b4:	c8 2f       	mov	r28, r24
    72b6:	85 34       	cpi	r24, 0x45	; 69
    {
        /* We nearly run out the bootloader timeout clock,
        * leaving just a few hundred milliseconds so the
        * bootloder has time to respond and service any
        * subsequent requests */
        Timeout = TIMEOUT_PERIOD - 500;
    72b8:	81 f4       	brne	.+32     	; 0x72da <CDC_Task+0x64>
    72ba:	8c ea       	ldi	r24, 0xAC	; 172
    72bc:	9d e0       	ldi	r25, 0x0D	; 13
    72be:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <Timeout+0x1>
    72c2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Timeout>

        /* Re-enable RWW section - must be done here in case
         * user has disabled verification on upload.  */
        boot_rww_enable_safe();
    72c6:	07 b6       	in	r0, 0x37	; 55
    72c8:	00 fc       	sbrc	r0, 0
    72ca:	fd cf       	rjmp	.-6      	; 0x72c6 <CDC_Task+0x50>
    72cc:	f9 99       	sbic	0x1f, 1	; 31
    72ce:	fe cf       	rjmp	.-4      	; 0x72cc <CDC_Task+0x56>
    72d0:	81 e1       	ldi	r24, 0x11	; 17
    72d2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    72d6:	e8 95       	spm

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    }
    else if (Command == 'T')
    72d8:	03 c0       	rjmp	.+6      	; 0x72e0 <CDC_Task+0x6a>
    {
        FetchNextCommandByte();
    72da:	84 35       	cpi	r24, 0x54	; 84

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    72dc:	21 f4       	brne	.+8      	; 0x72e6 <CDC_Task+0x70>
    72de:	02 df       	rcall	.-508    	; 0x70e4 <FetchNextCommandByte>
    72e0:	8d e0       	ldi	r24, 0x0D	; 13
    72e2:	17 df       	rcall	.-466    	; 0x7112 <WriteNextResponseByte>
    }
    else if ((Command == 'L') || (Command == 'P'))
    72e4:	e1 c1       	rjmp	.+962    	; 0x76a8 <CDC_Task+0x432>
    72e6:	8c 34       	cpi	r24, 0x4C	; 76
    72e8:	d9 f3       	breq	.-10     	; 0x72e0 <CDC_Task+0x6a>
    {
        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    }
    else if (Command == 't')
    72ea:	80 35       	cpi	r24, 0x50	; 80
    {
        // Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader
        WriteNextResponseByte(0x44);
    72ec:	c9 f3       	breq	.-14     	; 0x72e0 <CDC_Task+0x6a>
    72ee:	84 37       	cpi	r24, 0x74	; 116
    72f0:	21 f4       	brne	.+8      	; 0x72fa <CDC_Task+0x84>
        WriteNextResponseByte(0x00);
    72f2:	84 e4       	ldi	r24, 0x44	; 68
    72f4:	0e df       	rcall	.-484    	; 0x7112 <WriteNextResponseByte>
    }
    else if (Command == 'a')
    72f6:	80 e0       	ldi	r24, 0x00	; 0
    {
        // Indicate auto-address increment is supported
        WriteNextResponseByte('Y');
    }
    else if (Command == 'A')
    72f8:	f4 cf       	rjmp	.-24     	; 0x72e2 <CDC_Task+0x6c>
    {
        // Set the current address to that given by the host
        CurrAddress   = (FetchNextCommandByte() << 9);
    72fa:	81 36       	cpi	r24, 0x61	; 97
    72fc:	11 f4       	brne	.+4      	; 0x7302 <CDC_Task+0x8c>
    72fe:	89 e5       	ldi	r24, 0x59	; 89
        CurrAddress  |= (FetchNextCommandByte() << 1);
    7300:	f0 cf       	rjmp	.-32     	; 0x72e2 <CDC_Task+0x6c>
    7302:	81 34       	cpi	r24, 0x41	; 65
    7304:	91 f4       	brne	.+36     	; 0x732a <CDC_Task+0xb4>
    7306:	ee de       	rcall	.-548    	; 0x70e4 <FetchNextCommandByte>
    7308:	c8 2f       	mov	r28, r24
    730a:	ec de       	rcall	.-552    	; 0x70e4 <FetchNextCommandByte>
    730c:	2c 2f       	mov	r18, r28
    730e:	30 e0       	ldi	r19, 0x00	; 0
    7310:	32 2f       	mov	r19, r18
    7312:	22 27       	eor	r18, r18
    7314:	33 0f       	add	r19, r19
    7316:	90 e0       	ldi	r25, 0x00	; 0
    7318:	88 0f       	add	r24, r24
    731a:	99 1f       	adc	r25, r25
    731c:	82 2b       	or	r24, r18
    731e:	93 2b       	or	r25, r19
    7320:	09 2e       	mov	r0, r25

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    }
    else if (Command == 'p')
    7322:	00 0c       	add	r0, r0
    7324:	aa 0b       	sbc	r26, r26
    {
        // Indicate serial programmer back to the host
        WriteNextResponseByte('S');
    7326:	bb 0b       	sbc	r27, r27
    }
    else if (Command == 'S')
    7328:	93 c1       	rjmp	.+806    	; 0x7650 <CDC_Task+0x3da>
    732a:	80 37       	cpi	r24, 0x70	; 112
    732c:	11 f4       	brne	.+4      	; 0x7332 <CDC_Task+0xbc>
    732e:	83 e5       	ldi	r24, 0x53	; 83
    {
        // Write the 7-byte software identifier to the endpoint
        for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
          WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    7330:	d8 cf       	rjmp	.-80     	; 0x72e2 <CDC_Task+0x6c>
    7332:	83 35       	cpi	r24, 0x53	; 83
    7334:	49 f4       	brne	.+18     	; 0x7348 <CDC_Task+0xd2>
        WriteNextResponseByte('S');
    }
    else if (Command == 'S')
    {
        // Write the 7-byte software identifier to the endpoint
        for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    7336:	cd ea       	ldi	r28, 0xAD	; 173
    7338:	d1 e0       	ldi	r29, 0x01	; 1
    733a:	89 91       	ld	r24, Y+
    733c:	ea de       	rcall	.-556    	; 0x7112 <WriteNextResponseByte>
          WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    }
    else if (Command == 'V')
    733e:	21 e0       	ldi	r18, 0x01	; 1
    {
        WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    7340:	c4 3b       	cpi	r28, 0xB4	; 180
        WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    7342:	d2 07       	cpc	r29, r18
    7344:	d1 f7       	brne	.-12     	; 0x733a <CDC_Task+0xc4>
    }
    else if (Command == 's')
    7346:	b0 c1       	rjmp	.+864    	; 0x76a8 <CDC_Task+0x432>
    7348:	86 35       	cpi	r24, 0x56	; 86
    {
        WriteNextResponseByte(AVR_SIGNATURE_3);
    734a:	21 f4       	brne	.+8      	; 0x7354 <CDC_Task+0xde>
    734c:	81 e3       	ldi	r24, 0x31	; 49
    734e:	e1 de       	rcall	.-574    	; 0x7112 <WriteNextResponseByte>
        WriteNextResponseByte(AVR_SIGNATURE_2);
    7350:	80 e3       	ldi	r24, 0x30	; 48
    7352:	c7 cf       	rjmp	.-114    	; 0x72e2 <CDC_Task+0x6c>
    7354:	83 37       	cpi	r24, 0x73	; 115
        WriteNextResponseByte(AVR_SIGNATURE_1);
    7356:	31 f4       	brne	.+12     	; 0x7364 <CDC_Task+0xee>
    7358:	87 e8       	ldi	r24, 0x87	; 135
    }
    else if (Command == 'e')
    735a:	db de       	rcall	.-586    	; 0x7112 <WriteNextResponseByte>
    735c:	85 e9       	ldi	r24, 0x95	; 149
    735e:	d9 de       	rcall	.-590    	; 0x7112 <WriteNextResponseByte>
    7360:	8e e1       	ldi	r24, 0x1E	; 30
    {
        // Clear the application section of flash
        for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
        {
            boot_page_erase(CurrFlashAddress);
    7362:	bf cf       	rjmp	.-130    	; 0x72e2 <CDC_Task+0x6c>
            boot_spm_busy_wait();
            boot_page_write(CurrFlashAddress);
    7364:	85 36       	cpi	r24, 0x65	; 101
    else if (Command == 'e')
    {
        // Clear the application section of flash
        for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
        {
            boot_page_erase(CurrFlashAddress);
    7366:	b9 f4       	brne	.+46     	; 0x7396 <CDC_Task+0x120>
    7368:	e0 e0       	ldi	r30, 0x00	; 0
    736a:	f0 e0       	ldi	r31, 0x00	; 0
            boot_spm_busy_wait();
    736c:	83 e0       	ldi	r24, 0x03	; 3
    736e:	95 e0       	ldi	r25, 0x05	; 5
    7370:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
            boot_page_write(CurrFlashAddress);
    7374:	e8 95       	spm
    7376:	07 b6       	in	r0, 0x37	; 55
            boot_spm_busy_wait();
    7378:	00 fc       	sbrc	r0, 0
    737a:	fd cf       	rjmp	.-6      	; 0x7376 <CDC_Task+0x100>
    737c:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7380:	e8 95       	spm
        WriteNextResponseByte(AVR_SIGNATURE_1);
    }
    else if (Command == 'e')
    {
        // Clear the application section of flash
        for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    7382:	07 b6       	in	r0, 0x37	; 55
    7384:	00 fc       	sbrc	r0, 0
    7386:	fd cf       	rjmp	.-6      	; 0x7382 <CDC_Task+0x10c>
    7388:	e0 58       	subi	r30, 0x80	; 128
    738a:	ff 4f       	sbci	r31, 0xFF	; 255

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    }
    #endif
    else if (Command == 'r')
    738c:	e1 15       	cp	r30, r1
    738e:	40 e7       	ldi	r20, 0x70	; 112
    {
        WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    7390:	f4 07       	cpc	r31, r20
    7392:	71 f7       	brne	.-36     	; 0x7370 <CDC_Task+0xfa>
    7394:	a5 cf       	rjmp	.-182    	; 0x72e0 <CDC_Task+0x6a>
    }
    else if (Command == 'F')
    7396:	82 37       	cpi	r24, 0x72	; 114
    7398:	19 f4       	brne	.+6      	; 0x73a0 <CDC_Task+0x12a>
    {
        WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    739a:	e1 e0       	ldi	r30, 0x01	; 1
    739c:	f0 e0       	ldi	r31, 0x00	; 0
    739e:	0e c0       	rjmp	.+28     	; 0x73bc <CDC_Task+0x146>
    }
    else if (Command == 'N')
    73a0:	86 34       	cpi	r24, 0x46	; 70
    73a2:	19 f4       	brne	.+6      	; 0x73aa <CDC_Task+0x134>
    {
        WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    73a4:	e0 e0       	ldi	r30, 0x00	; 0
    73a6:	f0 e0       	ldi	r31, 0x00	; 0
    73a8:	09 c0       	rjmp	.+18     	; 0x73bc <CDC_Task+0x146>
    }
    else if (Command == 'Q')
    73aa:	8e 34       	cpi	r24, 0x4E	; 78
    {
        WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    73ac:	19 f4       	brne	.+6      	; 0x73b4 <CDC_Task+0x13e>
    73ae:	e3 e0       	ldi	r30, 0x03	; 3
    73b0:	f0 e0       	ldi	r31, 0x00	; 0
    73b2:	04 c0       	rjmp	.+8      	; 0x73bc <CDC_Task+0x146>
    73b4:	81 35       	cpi	r24, 0x51	; 81
    }
    #if !defined(NO_BLOCK_SUPPORT)
    else if (Command == 'b')
    73b6:	39 f4       	brne	.+14     	; 0x73c6 <CDC_Task+0x150>
    73b8:	e2 e0       	ldi	r30, 0x02	; 2
    {
        WriteNextResponseByte('Y');
    73ba:	f0 e0       	ldi	r31, 0x00	; 0
    73bc:	89 e0       	ldi	r24, 0x09	; 9
    73be:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

        // Send block size to the host
        WriteNextResponseByte(SPM_PAGESIZE >> 8);
    73c2:	84 91       	lpm	r24, Z
        WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    73c4:	8e cf       	rjmp	.-228    	; 0x72e2 <CDC_Task+0x6c>
    }
    else if ((Command == 'B') || (Command == 'g'))
    73c6:	82 36       	cpi	r24, 0x62	; 98
    73c8:	31 f4       	brne	.+12     	; 0x73d6 <CDC_Task+0x160>
    73ca:	89 e5       	ldi	r24, 0x59	; 89
    73cc:	a2 de       	rcall	.-700    	; 0x7112 <WriteNextResponseByte>
    {
        // Keep resetting the timeout counter if we're receiving self-programming instructions
        Timeout = 0;
    73ce:	80 e0       	ldi	r24, 0x00	; 0
    73d0:	a0 de       	rcall	.-704    	; 0x7112 <WriteNextResponseByte>
    73d2:	80 e8       	ldi	r24, 0x80	; 128
    73d4:	86 cf       	rjmp	.-244    	; 0x72e2 <CDC_Task+0x6c>
    char     MemoryType;

    bool     HighByte = false;
    uint8_t  LowByte  = 0;

    BlockSize  = (FetchNextCommandByte() << 8);
    73d6:	82 34       	cpi	r24, 0x42	; 66
    73d8:	19 f0       	breq	.+6      	; 0x73e0 <CDC_Task+0x16a>
    73da:	87 36       	cpi	r24, 0x67	; 103
    BlockSize |=  FetchNextCommandByte();
    73dc:	09 f0       	breq	.+2      	; 0x73e0 <CDC_Task+0x16a>
    73de:	d0 c0       	rjmp	.+416    	; 0x7580 <CDC_Task+0x30a>
    73e0:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <Timeout+0x1>

    MemoryType =  FetchNextCommandByte();
    73e4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <Timeout>

    if ((MemoryType != 'E') && (MemoryType != 'F'))
    73e8:	7d de       	rcall	.-774    	; 0x70e4 <FetchNextCommandByte>
    73ea:	08 2f       	mov	r16, r24
    73ec:	7b de       	rcall	.-778    	; 0x70e4 <FetchNextCommandByte>
    73ee:	d8 2f       	mov	r29, r24
    {
        /* Send error byte back to the host */
        WriteNextResponseByte('?');
    73f0:	79 de       	rcall	.-782    	; 0x70e4 <FetchNextCommandByte>
    73f2:	18 2f       	mov	r17, r24
    char     MemoryType;

    bool     HighByte = false;
    uint8_t  LowByte  = 0;

    BlockSize  = (FetchNextCommandByte() << 8);
    73f4:	8b eb       	ldi	r24, 0xBB	; 187
    73f6:	81 0f       	add	r24, r17
    BlockSize |=  FetchNextCommandByte();
    73f8:	82 30       	cpi	r24, 0x02	; 2
        return;
    }

    /* Disable timer 1 interrupt - can't afford to process nonessential interrupts
     * while doing SPM tasks */
    TIMSK1 = 0;
    73fa:	10 f0       	brcs	.+4      	; 0x7400 <CDC_Task+0x18a>
    73fc:	8f e3       	ldi	r24, 0x3F	; 63

    /* Check if command is to read memory */
    if (Command == 'g')
    73fe:	71 cf       	rjmp	.-286    	; 0x72e2 <CDC_Task+0x6c>
    7400:	8d 2f       	mov	r24, r29
    7402:	90 e0       	ldi	r25, 0x00	; 0
    {
        /* Re-enable RWW section */
        boot_rww_enable();
    7404:	90 2b       	or	r25, r16
    7406:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    740a:	c7 36       	cpi	r28, 0x67	; 103
    740c:	09 f0       	breq	.+2      	; 0x7410 <CDC_Task+0x19a>
static void ReadWriteMemoryBlock(const uint8_t Command)
{
    uint16_t BlockSize;
    char     MemoryType;

    bool     HighByte = false;
    740e:	42 c0       	rjmp	.+132    	; 0x7494 <CDC_Task+0x21e>

                /* If both bytes in current word have been read, increment the address counter */
                if (HighByte)
                  CurrAddress += 2;

                HighByte = !HighByte;
    7410:	21 e1       	ldi	r18, 0x11	; 17
    if (Command == 'g')
    {
        /* Re-enable RWW section */
        boot_rww_enable();

        while (BlockSize--)
    7412:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7416:	e8 95       	spm
    7418:	ec 01       	movw	r28, r24
    741a:	b1 2c       	mov	r11, r1
    741c:	01 e0       	ldi	r16, 0x01	; 1
    741e:	20 97       	sbiw	r28, 0x00	; 0
    7420:	09 f4       	brne	.+2      	; 0x7424 <CDC_Task+0x1ae>
    7422:	aa c0       	rjmp	.+340    	; 0x7578 <CDC_Task+0x302>
    7424:	c0 90 bd 01 	lds	r12, 0x01BD	; 0x8001bd <CurrAddress>
        {
            if (MemoryType == 'F')
    7428:	d0 90 be 01 	lds	r13, 0x01BE	; 0x8001be <CurrAddress+0x1>
            {
                /* Read the next FLASH byte from the current FLASH page */
                #if (FLASHEND > 0xFFFF)
                WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
                #else
                WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    742c:	e0 90 bf 01 	lds	r14, 0x01BF	; 0x8001bf <CurrAddress+0x2>
    7430:	f0 90 c0 01 	lds	r15, 0x01C0	; 0x8001c0 <CurrAddress+0x3>
    7434:	16 34       	cpi	r17, 0x46	; 70
    7436:	b9 f4       	brne	.+46     	; 0x7466 <CDC_Task+0x1f0>
                #endif

                /* If both bytes in current word have been read, increment the address counter */
                if (HighByte)
    7438:	eb 2d       	mov	r30, r11
    743a:	f0 e0       	ldi	r31, 0x00	; 0
                  CurrAddress += 2;
    743c:	ec 29       	or	r30, r12
    743e:	fd 29       	or	r31, r13
    7440:	84 91       	lpm	r24, Z
    7442:	67 de       	rcall	.-818    	; 0x7112 <WriteNextResponseByte>
    7444:	bb 20       	and	r11, r11
    7446:	69 f0       	breq	.+26     	; 0x7462 <CDC_Task+0x1ec>
    7448:	52 e0       	ldi	r21, 0x02	; 2
    744a:	c5 0e       	add	r12, r21
    744c:	d1 1c       	adc	r13, r1
    744e:	e1 1c       	adc	r14, r1
    7450:	f1 1c       	adc	r15, r1

                HighByte = !HighByte;
    7452:	c0 92 bd 01 	sts	0x01BD, r12	; 0x8001bd <CurrAddress>
            }
            else
            {
                /* Read the next EEPROM byte into the endpoint */
                WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    7456:	d0 92 be 01 	sts	0x01BE, r13	; 0x8001be <CurrAddress+0x1>
    745a:	e0 92 bf 01 	sts	0x01BF, r14	; 0x8001bf <CurrAddress+0x2>
    745e:	f0 92 c0 01 	sts	0x01C0, r15	; 0x8001c0 <CurrAddress+0x3>
    7462:	b0 26       	eor	r11, r16
    7464:	15 c0       	rjmp	.+42     	; 0x7490 <CDC_Task+0x21a>
    7466:	d7 01       	movw	r26, r14
    7468:	c6 01       	movw	r24, r12

                /* Increment the address counter after use */
                CurrAddress += 2;
    746a:	b6 95       	lsr	r27
    746c:	a7 95       	ror	r26
    746e:	97 95       	ror	r25
    7470:	87 95       	ror	r24
    7472:	23 d5       	rcall	.+2630   	; 0x7eba <eeprom_read_byte>
    7474:	4e de       	rcall	.-868    	; 0x7112 <WriteNextResponseByte>
    7476:	82 e0       	ldi	r24, 0x02	; 2
    7478:	c8 0e       	add	r12, r24
    747a:	d1 1c       	adc	r13, r1
    747c:	e1 1c       	adc	r14, r1
    747e:	f1 1c       	adc	r15, r1
    7480:	c0 92 bd 01 	sts	0x01BD, r12	; 0x8001bd <CurrAddress>
    7484:	d0 92 be 01 	sts	0x01BE, r13	; 0x8001be <CurrAddress+0x1>
            }
        }
    }
    else
    {
        uint32_t PageStartAddress = CurrAddress;
    7488:	e0 92 bf 01 	sts	0x01BF, r14	; 0x8001bf <CurrAddress+0x2>
    748c:	f0 92 c0 01 	sts	0x01C0, r15	; 0x8001c0 <CurrAddress+0x3>
    7490:	21 97       	sbiw	r28, 0x01	; 1
    7492:	c5 cf       	rjmp	.-118    	; 0x741e <CDC_Task+0x1a8>
    7494:	80 90 bd 01 	lds	r8, 0x01BD	; 0x8001bd <CurrAddress>

        if (MemoryType == 'F')
    7498:	90 90 be 01 	lds	r9, 0x01BE	; 0x8001be <CurrAddress+0x1>
        {
            boot_page_erase(PageStartAddress);
    749c:	a0 90 bf 01 	lds	r10, 0x01BF	; 0x8001bf <CurrAddress+0x2>
    74a0:	b0 90 c0 01 	lds	r11, 0x01C0	; 0x8001c0 <CurrAddress+0x3>
    74a4:	16 34       	cpi	r17, 0x46	; 70
            boot_spm_busy_wait();
    74a6:	41 f4       	brne	.+16     	; 0x74b8 <CDC_Task+0x242>
    74a8:	23 e0       	ldi	r18, 0x03	; 3
    74aa:	f4 01       	movw	r30, r8
    }
    else
    {
        uint32_t PageStartAddress = CurrAddress;

        if (MemoryType == 'F')
    74ac:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
                else
                {
                    LowByte = FetchNextCommandByte();
                }

                HighByte = !HighByte;
    74b0:	e8 95       	spm
        {
            boot_page_erase(PageStartAddress);
            boot_spm_busy_wait();
        }

        while (BlockSize--)
    74b2:	07 b6       	in	r0, 0x37	; 55
    74b4:	00 fc       	sbrc	r0, 0
    74b6:	fd cf       	rjmp	.-6      	; 0x74b2 <CDC_Task+0x23c>
        {
            if (MemoryType == 'F')
    74b8:	e1 2c       	mov	r14, r1
    74ba:	f1 2c       	mov	r15, r1
            {
                /* If both bytes in current word have been written, increment the address counter */
                if (HighByte)
    74bc:	ec 01       	movw	r28, r24
    74be:	01 e0       	ldi	r16, 0x01	; 1
                {
                    /* Write the next FLASH word to the current FLASH page */
                    boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    74c0:	20 97       	sbiw	r28, 0x00	; 0
    74c2:	09 f4       	brne	.+2      	; 0x74c6 <CDC_Task+0x250>
    74c4:	4d c0       	rjmp	.+154    	; 0x7560 <CDC_Task+0x2ea>
    74c6:	16 34       	cpi	r17, 0x46	; 70
    74c8:	39 f5       	brne	.+78     	; 0x7518 <CDC_Task+0x2a2>
    74ca:	ff 20       	and	r15, r15
    74cc:	09 f1       	breq	.+66     	; 0x7510 <CDC_Task+0x29a>
    74ce:	40 90 bd 01 	lds	r4, 0x01BD	; 0x8001bd <CurrAddress>
    74d2:	50 90 be 01 	lds	r5, 0x01BE	; 0x8001be <CurrAddress+0x1>
    74d6:	60 90 bf 01 	lds	r6, 0x01BF	; 0x8001bf <CurrAddress+0x2>
    74da:	70 90 c0 01 	lds	r7, 0x01C0	; 0x8001c0 <CurrAddress+0x3>
    74de:	02 de       	rcall	.-1020   	; 0x70e4 <FetchNextCommandByte>
    74e0:	2e 2d       	mov	r18, r14
    74e2:	30 e0       	ldi	r19, 0x00	; 0

                    /* Increment the address counter after use */
                    CurrAddress += 2;
    74e4:	a9 01       	movw	r20, r18
    74e6:	58 2b       	or	r21, r24
    74e8:	f2 01       	movw	r30, r4
    74ea:	0a 01       	movw	r0, r20
    74ec:	00 93 57 00 	sts	0x0057, r16	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    74f0:	e8 95       	spm
    74f2:	11 24       	eor	r1, r1
    74f4:	f2 e0       	ldi	r31, 0x02	; 2
    74f6:	4f 0e       	add	r4, r31
    74f8:	51 1c       	adc	r5, r1
    74fa:	61 1c       	adc	r6, r1
    74fc:	71 1c       	adc	r7, r1
                }
                else
                {
                    LowByte = FetchNextCommandByte();
    74fe:	40 92 bd 01 	sts	0x01BD, r4	; 0x8001bd <CurrAddress>
    7502:	50 92 be 01 	sts	0x01BE, r5	; 0x8001be <CurrAddress+0x1>
                }

                HighByte = !HighByte;
    7506:	60 92 bf 01 	sts	0x01BF, r6	; 0x8001bf <CurrAddress+0x2>
            }
            else
            {
                /* Write the next EEPROM byte from the endpoint */
                eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    750a:	70 92 c0 01 	sts	0x01C0, r7	; 0x8001c0 <CurrAddress+0x3>
    750e:	02 c0       	rjmp	.+4      	; 0x7514 <CDC_Task+0x29e>
    7510:	e9 dd       	rcall	.-1070   	; 0x70e4 <FetchNextCommandByte>
    7512:	e8 2e       	mov	r14, r24
    7514:	f0 26       	eor	r15, r16
    7516:	22 c0       	rjmp	.+68     	; 0x755c <CDC_Task+0x2e6>
    7518:	e5 dd       	rcall	.-1078   	; 0x70e4 <FetchNextCommandByte>
    751a:	68 2f       	mov	r22, r24
    751c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <CurrAddress>
    7520:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <CurrAddress+0x1>
    7524:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <CurrAddress+0x2>
    7528:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <CurrAddress+0x3>

                /* Increment the address counter after use */
                CurrAddress += 2;
    752c:	b6 95       	lsr	r27
    752e:	a7 95       	ror	r26
    7530:	97 95       	ror	r25
    7532:	87 95       	ror	r24
    7534:	ca d4       	rcall	.+2452   	; 0x7eca <eeprom_write_byte>
    7536:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <CurrAddress>
    753a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <CurrAddress+0x1>
    753e:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <CurrAddress+0x2>
    7542:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <CurrAddress+0x3>
    7546:	02 96       	adiw	r24, 0x02	; 2
    7548:	a1 1d       	adc	r26, r1
    754a:	b1 1d       	adc	r27, r1
    754c:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <CurrAddress>
            }
        }

        /* If in FLASH programming mode, commit the page after writing */
        if (MemoryType == 'F')
    7550:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <CurrAddress+0x1>
        {
            /* Commit the flash page to memory */
            boot_page_write(PageStartAddress);
    7554:	a0 93 bf 01 	sts	0x01BF, r26	; 0x8001bf <CurrAddress+0x2>
    7558:	b0 93 c0 01 	sts	0x01C0, r27	; 0x8001c0 <CurrAddress+0x3>

            /* Wait until write operation has completed */
            boot_spm_busy_wait();
    755c:	21 97       	sbiw	r28, 0x01	; 1
    755e:	b0 cf       	rjmp	.-160    	; 0x74c0 <CDC_Task+0x24a>
    7560:	16 34       	cpi	r17, 0x46	; 70
        }

        /* Send response byte back to the host */
        WriteNextResponseByte('\r');
    7562:	41 f4       	brne	.+16     	; 0x7574 <CDC_Task+0x2fe>
    7564:	85 e0       	ldi	r24, 0x05	; 5
    7566:	f4 01       	movw	r30, r8
    }

    /* Re-enable timer 1 interrupt disabled earlier in this routine */
    TIMSK1 = (1 << OCIE1A);
    7568:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    756c:	e8 95       	spm
    756e:	07 b6       	in	r0, 0x37	; 55
        // Delegate the block write/read to a separate function for clarity
        ReadWriteMemoryBlock(Command);
    }
    #endif
    #if !defined(NO_FLASH_BYTE_SUPPORT)
    else if (Command == 'C')
    7570:	00 fc       	sbrc	r0, 0
    7572:	fd cf       	rjmp	.-6      	; 0x756e <CDC_Task+0x2f8>
    {
        // Write the high byte to the current flash page
        boot_page_fill(CurrAddress, FetchNextCommandByte());
    7574:	8d e0       	ldi	r24, 0x0D	; 13
    7576:	cd dd       	rcall	.-1126   	; 0x7112 <WriteNextResponseByte>
    7578:	82 e0       	ldi	r24, 0x02	; 2
    757a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    757e:	94 c0       	rjmp	.+296    	; 0x76a8 <CDC_Task+0x432>
    7580:	83 34       	cpi	r24, 0x43	; 67
    7582:	71 f4       	brne	.+28     	; 0x75a0 <CDC_Task+0x32a>
    7584:	c0 91 bd 01 	lds	r28, 0x01BD	; 0x8001bd <CurrAddress>
    7588:	d0 91 be 01 	lds	r29, 0x01BE	; 0x8001be <CurrAddress+0x1>
    758c:	ab dd       	rcall	.-1194   	; 0x70e4 <FetchNextCommandByte>
    758e:	90 e0       	ldi	r25, 0x00	; 0

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    }
    else if (Command == 'c')
    7590:	21 e0       	ldi	r18, 0x01	; 1
    7592:	fe 01       	movw	r30, r28
    {
        // Write the low byte to the current flash page
        boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    7594:	0c 01       	movw	r0, r24
    7596:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    759a:	e8 95       	spm
    759c:	11 24       	eor	r1, r1
    759e:	a0 ce       	rjmp	.-704    	; 0x72e0 <CDC_Task+0x6a>
    75a0:	83 36       	cpi	r24, 0x63	; 99
    75a2:	01 f5       	brne	.+64     	; 0x75e4 <CDC_Task+0x36e>
    75a4:	c0 90 bd 01 	lds	r12, 0x01BD	; 0x8001bd <CurrAddress>
    75a8:	d0 90 be 01 	lds	r13, 0x01BE	; 0x8001be <CurrAddress+0x1>
    75ac:	e0 90 bf 01 	lds	r14, 0x01BF	; 0x8001bf <CurrAddress+0x2>
    75b0:	f0 90 c0 01 	lds	r15, 0x01C0	; 0x8001c0 <CurrAddress+0x3>
    75b4:	97 dd       	rcall	.-1234   	; 0x70e4 <FetchNextCommandByte>
    75b6:	f6 01       	movw	r30, r12
    75b8:	e1 60       	ori	r30, 0x01	; 1

        // Increment the address
        CurrAddress += 2;
    75ba:	90 e0       	ldi	r25, 0x00	; 0
    75bc:	21 e0       	ldi	r18, 0x01	; 1
    75be:	0c 01       	movw	r0, r24
    75c0:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    75c4:	e8 95       	spm
    75c6:	11 24       	eor	r1, r1
    75c8:	f2 e0       	ldi	r31, 0x02	; 2
    75ca:	cf 0e       	add	r12, r31
    75cc:	d1 1c       	adc	r13, r1
    75ce:	e1 1c       	adc	r14, r1
    75d0:	f1 1c       	adc	r15, r1
    75d2:	c0 92 bd 01 	sts	0x01BD, r12	; 0x8001bd <CurrAddress>

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    }
    else if (Command == 'm')
    75d6:	d0 92 be 01 	sts	0x01BE, r13	; 0x8001be <CurrAddress+0x1>
    {
        // Commit the flash page to memory
        boot_page_write(CurrAddress);
    75da:	e0 92 bf 01 	sts	0x01BF, r14	; 0x8001bf <CurrAddress+0x2>
    75de:	f0 92 c0 01 	sts	0x01C0, r15	; 0x8001c0 <CurrAddress+0x3>
    75e2:	7e ce       	rjmp	.-772    	; 0x72e0 <CDC_Task+0x6a>
    75e4:	8d 36       	cpi	r24, 0x6D	; 109

        // Wait until write operation has completed
        boot_spm_busy_wait();
    75e6:	61 f4       	brne	.+24     	; 0x7600 <CDC_Task+0x38a>
    75e8:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <CurrAddress>
    75ec:	f0 91 be 01 	lds	r31, 0x01BE	; 0x8001be <CurrAddress+0x1>

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    }
    else if (Command == 'R')
    75f0:	85 e0       	ldi	r24, 0x05	; 5
    {
        #if (FLASHEND > 0xFFFF)
        uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
        #else
        uint16_t ProgramWord = pgm_read_word(CurrAddress);
    75f2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    75f6:	e8 95       	spm
    75f8:	07 b6       	in	r0, 0x37	; 55
    75fa:	00 fc       	sbrc	r0, 0
        #endif

        WriteNextResponseByte(ProgramWord >> 8);
    75fc:	fd cf       	rjmp	.-6      	; 0x75f8 <CDC_Task+0x382>
    75fe:	70 ce       	rjmp	.-800    	; 0x72e0 <CDC_Task+0x6a>
    7600:	82 35       	cpi	r24, 0x52	; 82
        WriteNextResponseByte(ProgramWord & 0xFF);
    7602:	51 f4       	brne	.+20     	; 0x7618 <CDC_Task+0x3a2>
    7604:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <CurrAddress>
    }
    #endif
    #if !defined(NO_EEPROM_BYTE_SUPPORT)
    else if (Command == 'D')
    7608:	f0 91 be 01 	lds	r31, 0x01BE	; 0x8001be <CurrAddress+0x1>
    {
        // Read the byte from the endpoint and write it to the EEPROM
        eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    760c:	c5 91       	lpm	r28, Z+
    760e:	d4 91       	lpm	r29, Z
    7610:	8d 2f       	mov	r24, r29
    7612:	7f dd       	rcall	.-1282   	; 0x7112 <WriteNextResponseByte>
    7614:	8c 2f       	mov	r24, r28
    7616:	65 ce       	rjmp	.-822    	; 0x72e2 <CDC_Task+0x6c>
    7618:	84 34       	cpi	r24, 0x44	; 68
    761a:	19 f5       	brne	.+70     	; 0x7662 <CDC_Task+0x3ec>
    761c:	63 dd       	rcall	.-1338   	; 0x70e4 <FetchNextCommandByte>
    761e:	68 2f       	mov	r22, r24
    7620:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <CurrAddress>
    7624:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <CurrAddress+0x1>
    7628:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <CurrAddress+0x2>

        // Increment the address after use
        CurrAddress += 2;
    762c:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <CurrAddress+0x3>
    7630:	b6 95       	lsr	r27
    7632:	a7 95       	ror	r26
    7634:	97 95       	ror	r25
    7636:	87 95       	ror	r24
    7638:	48 d4       	rcall	.+2192   	; 0x7eca <eeprom_write_byte>
    763a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <CurrAddress>
    763e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <CurrAddress+0x1>
    7642:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <CurrAddress+0x2>
    7646:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <CurrAddress+0x3>
    764a:	02 96       	adiw	r24, 0x02	; 2
    764c:	a1 1d       	adc	r26, r1
    764e:	b1 1d       	adc	r27, r1

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    }
    else if (Command == 'd')
    7650:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <CurrAddress>
    {
        // Read the EEPROM byte and write it to the endpoint
        WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7654:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <CurrAddress+0x1>
    7658:	a0 93 bf 01 	sts	0x01BF, r26	; 0x8001bf <CurrAddress+0x2>
    765c:	b0 93 c0 01 	sts	0x01C0, r27	; 0x8001c0 <CurrAddress+0x3>
    7660:	3f ce       	rjmp	.-898    	; 0x72e0 <CDC_Task+0x6a>
    7662:	84 36       	cpi	r24, 0x64	; 100
    7664:	f1 f4       	brne	.+60     	; 0x76a2 <CDC_Task+0x42c>
    7666:	c0 90 bd 01 	lds	r12, 0x01BD	; 0x8001bd <CurrAddress>
    766a:	d0 90 be 01 	lds	r13, 0x01BE	; 0x8001be <CurrAddress+0x1>
    766e:	e0 90 bf 01 	lds	r14, 0x01BF	; 0x8001bf <CurrAddress+0x2>
    7672:	f0 90 c0 01 	lds	r15, 0x01C0	; 0x8001c0 <CurrAddress+0x3>
    7676:	d7 01       	movw	r26, r14

        // Increment the address after use
        CurrAddress += 2;
    7678:	c6 01       	movw	r24, r12
    767a:	b6 95       	lsr	r27
    767c:	a7 95       	ror	r26
    767e:	97 95       	ror	r25
    7680:	87 95       	ror	r24
    7682:	1b d4       	rcall	.+2102   	; 0x7eba <eeprom_read_byte>
    7684:	46 dd       	rcall	.-1396   	; 0x7112 <WriteNextResponseByte>
    7686:	22 e0       	ldi	r18, 0x02	; 2
    7688:	c2 0e       	add	r12, r18
    768a:	d1 1c       	adc	r13, r1
    768c:	e1 1c       	adc	r14, r1
    768e:	f1 1c       	adc	r15, r1
    7690:	c0 92 bd 01 	sts	0x01BD, r12	; 0x8001bd <CurrAddress>
    }
    #endif
    else if (Command != 27)
    7694:	d0 92 be 01 	sts	0x01BE, r13	; 0x8001be <CurrAddress+0x1>
    7698:	e0 92 bf 01 	sts	0x01BF, r14	; 0x8001bf <CurrAddress+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    769c:	f0 92 c0 01 	sts	0x01C0, r15	; 0x8001c0 <CurrAddress+0x3>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    76a0:	03 c0       	rjmp	.+6      	; 0x76a8 <CDC_Task+0x432>
    76a2:	8b 31       	cpi	r24, 0x1B	; 27
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    76a4:	09 f0       	breq	.+2      	; 0x76a8 <CDC_Task+0x432>
    76a6:	aa ce       	rjmp	.-684    	; 0x73fc <CDC_Task+0x186>
    76a8:	83 e0       	ldi	r24, 0x03	; 3
    76aa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

    /* Send the endpoint data to the host */
    Endpoint_ClearIN();

    /* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
    if (IsEndpointFull)
    76ae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    {
        while (!(Endpoint_IsINReady()))
    76b6:	8e 77       	andi	r24, 0x7E	; 126
    76b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        {
            if (USB_DeviceState == DEVICE_STATE_Unattached)
    76bc:	95 fd       	sbrc	r25, 5
    76be:	11 c0       	rjmp	.+34     	; 0x76e2 <CDC_Task+0x46c>
    76c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    76c4:	80 fd       	sbrc	r24, 0
    76c6:	04 c0       	rjmp	.+8      	; 0x76d0 <CDC_Task+0x45a>
    76c8:	8e b3       	in	r24, 0x1e	; 30
    76ca:	81 11       	cpse	r24, r1
    76cc:	f9 cf       	rjmp	.-14     	; 0x76c0 <CDC_Task+0x44a>
    }

    /* Wait until the data has been sent to the host */
    while (!(Endpoint_IsINReady()))
    {
        if (USB_DeviceState == DEVICE_STATE_Unattached)
    76ce:	15 c0       	rjmp	.+42     	; 0x76fa <CDC_Task+0x484>
    76d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76d4:	8e 77       	andi	r24, 0x7E	; 126
    76d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

        Endpoint_ClearIN();
    }

    /* Wait until the data has been sent to the host */
    while (!(Endpoint_IsINReady()))
    76da:	03 c0       	rjmp	.+6      	; 0x76e2 <CDC_Task+0x46c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    76dc:	8e b3       	in	r24, 0x1e	; 30
    76de:	88 23       	and	r24, r24
    76e0:	61 f0       	breq	.+24     	; 0x76fa <CDC_Task+0x484>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    76e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    76e6:	80 ff       	sbrs	r24, 0
    76e8:	f9 cf       	rjmp	.-14     	; 0x76dc <CDC_Task+0x466>
    76ea:	84 e0       	ldi	r24, 0x04	; 4
    /* Select the OUT endpoint */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* Acknowledge the command from the host */
    Endpoint_ClearOUT();
}
    76ec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    76f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    76f4:	8b 77       	andi	r24, 0x7B	; 123
    76f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    76fa:	df 91       	pop	r29
    76fc:	cf 91       	pop	r28
    76fe:	1f 91       	pop	r17
    7700:	0f 91       	pop	r16
    7702:	ff 90       	pop	r15
    7704:	ef 90       	pop	r14
    7706:	df 90       	pop	r13
    7708:	cf 90       	pop	r12
    770a:	bf 90       	pop	r11
    770c:	af 90       	pop	r10
    770e:	9f 90       	pop	r9
    7710:	8f 90       	pop	r8
    7712:	7f 90       	pop	r7
    7714:	6f 90       	pop	r6
    7716:	5f 90       	pop	r5
    7718:	4f 90       	pop	r4
    771a:	08 95       	ret

0000771c <main>:

/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until it times out or is instructed to exit.
 */
int main(void)
{
    771c:	cf 93       	push	r28
    /* Save the value of the boot key memory before it is overwritten */
    uint8_t bootKeyPtrVal = *bootKeyPtr;
    771e:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__bss_end+0x633>
    *bootKeyPtr = 0;
    7722:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__bss_end+0x633>

    /* Check the reason for the reset so we can act accordingly */
    uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
    7726:	84 b7       	in	r24, 0x34	; 52
    MCUSR = 0;							// clear all reset flags
    7728:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    772a:	0f b6       	in	r0, 0x3f	; 63
    772c:	f8 94       	cli
    772e:	a8 95       	wdr
    7730:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7734:	28 61       	ori	r18, 0x18	; 24
    7736:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    773a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    773e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    7740:	40 e8       	ldi	r20, 0x80	; 128
    7742:	20 e0       	ldi	r18, 0x00	; 0
    7744:	0f b6       	in	r0, 0x3f	; 63
    7746:	f8 94       	cli
    7748:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    774c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    7750:	0f be       	out	0x3f, r0	; 63

    // Disable clock division
    clock_prescale_set(clock_div_1);

    // Relocate the interrupt vector table to the bootloader section
    MCUCR = (1 << IVCE);
    7752:	21 e0       	ldi	r18, 0x01	; 1
    7754:	25 bf       	out	0x35, r18	; 53
    MCUCR = (1 << IVSEL);
    7756:	32 e0       	ldi	r19, 0x02	; 2
    7758:	35 bf       	out	0x35, r19	; 53

    LED_SETUP();
    775a:	3f 9a       	sbi	0x07, 7	; 7
    775c:	20 9a       	sbi	0x04, 0	; 4
    775e:	55 9a       	sbi	0x0a, 5	; 10
    CPU_PRESCALE(0);
    7760:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    7764:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    L_LED_OFF();
    7768:	47 98       	cbi	0x08, 7	; 8
    TX_LED_OFF();
    776a:	5d 9a       	sbi	0x0b, 5	; 11
    RX_LED_OFF();
    776c:	28 9a       	sbi	0x05, 0	; 5
    // With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
    // Our chosen compare match generates an interrupt every 1 ms.
    // This interrupt is disabled selectively when doing memory reading, erasing,
    // or writing since SPM has tight timing requirements.

    OCR1AH = 0;
    776e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    OCR1AL = 250;
    7772:	4a ef       	ldi	r20, 0xFA	; 250
    7774:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    7778:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    777c:	33 e0       	ldi	r19, 0x03	; 3
    777e:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>


    // MAH 8/15/12- this replaces bulky pgm_read_word(0) calls later on, to save memory.
    if (pgm_read_word(0) != 0xFFFF) sketchPresent = true;
    7782:	e0 e0       	ldi	r30, 0x00	; 0
    7784:	f0 e0       	ldi	r31, 0x00	; 0
    7786:	45 91       	lpm	r20, Z+
    7788:	54 91       	lpm	r21, Z
    778a:	4f 3f       	cpi	r20, 0xFF	; 255
    778c:	5f 4f       	sbci	r21, 0xFF	; 255
    778e:	11 f0       	breq	.+4      	; 0x7794 <main+0x78>
    7790:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <sketchPresent>
//  to 750ms. If, during that 750ms, another external reset occurs, THEN an 8-second delay
//  in the bootloader will occur.

    // This is the "no-8-second-delay" code. If this is the first time through the loop, we
    //  don't expect to see the bootKey in memory.
    if ( (mcusr_state & (1<<EXTRF)) && (bootKeyPtrVal != bootKey) ) {
    7794:	81 ff       	sbrs	r24, 1
    7796:	20 c0       	rjmp	.+64     	; 0x77d8 <main+0xbc>
    7798:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    779c:	92 17       	cp	r25, r18
    779e:	e1 f0       	breq	.+56     	; 0x77d8 <main+0xbc>
        *bootKeyPtr = bootKey;   // Put the bootKey in memory so if we get back to this
    77a0:	20 93 00 08 	sts	0x0800, r18	; 0x800800 <__bss_end+0x633>
                                 //  point again, we know to jump into the bootloader
        sei();  // Enable interrupts, so we can use timer1 to track our time in the bootloader
    77a4:	78 94       	sei
    77a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RunBootloader>
        while (RunBootloader)
    77aa:	88 23       	and	r24, r24
    77ac:	39 f0       	breq	.+14     	; 0x77bc <main+0xa0>
        {
            if (resetTimeout > EXT_RESET_TIMEOUT_PERIOD) // resetTimeout is getting incremeted
    77ae:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
    77b2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <__data_end+0x1>
    77b6:	88 37       	cpi	r24, 0x78	; 120
    77b8:	91 40       	sbci	r25, 0x01	; 1
    77ba:	c8 f3       	brcs	.-14     	; 0x77ae <main+0x92>
    77bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <RunBootloader>
                RunBootloader = false;                   //  in the timer1 ISR.
        }
        // If we make it past that while loop, it's sketch loading time!
        *bootKeyPtr = 0;   // clear out the bootKey; from now on, we want to treat a reset like
    77c0:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__bss_end+0x633>
                           //  a normal reset.
        cli();             // Disable interrupts, in case no sketch is present.
    77c4:	f8 94       	cli
        RunBootloader = true;  // We want to hang out in the bootloader if no sketch is present.
    77c6:	81 e0       	ldi	r24, 0x01	; 1
    77c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <RunBootloader>
        if (sketchPresent) StartSketch(); // If a sketch is present, go! Otherwise, wait around
    77cc:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <sketchPresent>
    77d0:	88 23       	and	r24, r24
    77d2:	71 f0       	breq	.+28     	; 0x77f0 <main+0xd4>
    77d4:	bc dc       	rcall	.-1672   	; 0x714e <StartSketch>
                                          //  in the bootloader until one is uploaded.
    }
    // On a power-on reset, we ALWAYS want to go to the sketch. If there is one.
    //  This is a place where the old code had an equivalence and now there is a mask.
    else if ( (mcusr_state & (1<<PORF)) && sketchPresent) {
    77d6:	0c c0       	rjmp	.+24     	; 0x77f0 <main+0xd4>
    77d8:	80 ff       	sbrs	r24, 0
    77da:	04 c0       	rjmp	.+8      	; 0x77e4 <main+0xc8>
    77dc:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <sketchPresent>
    77e0:	21 11       	cpse	r18, r1
        StartSketch();
    }
    // On a watchdog reset, if the bootKey isn't set, and there's a sketch, we should just
    //  go straight to the sketch.
    //  This is a place where the old code had an equivalence and now there is a mask.
    else if ( (mcusr_state & (1<<WDRF) ) && (bootKeyPtrVal != bootKey) && sketchPresent) {
    77e2:	f8 cf       	rjmp	.-16     	; 0x77d4 <main+0xb8>
    77e4:	83 ff       	sbrs	r24, 3
    77e6:	04 c0       	rjmp	.+8      	; 0x77f0 <main+0xd4>
    77e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
        // If it looks like an "accidental" watchdog reset then start the sketch.
        StartSketch();
    }

    /* Initialize USB Subsystem */
    USB_Init();
    77ec:	98 13       	cpse	r25, r24
    77ee:	ee cf       	rjmp	.-36     	; 0x77cc <main+0xb0>

    /* Enable global interrupts so that the USB stack can function */
    sei();
    77f0:	d1 d0       	rcall	.+418    	; 0x7994 <USB_Init>

    Timeout = 0;
    77f2:	78 94       	sei
    77f4:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <Timeout+0x1>
    77f8:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <Timeout>

    while (RunBootloader)
    77fc:	ce ef       	ldi	r28, 0xFE	; 254
    77fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RunBootloader>
    {
        CDC_Task();
    7802:	88 23       	and	r24, r24
        USB_USBTask();
    7804:	d1 f0       	breq	.+52     	; 0x783a <main+0x11e>
    7806:	37 dd       	rcall	.-1426   	; 0x7276 <CDC_Task>
        /* Time out and start the sketch if one is present */
        //   if (Timeout > TIMEOUT_PERIOD)
        //      RunBootloader = false;

        // MAH 8/15/12- This used to be a function call- inlining it saves a few bytes.
        LLEDPulse++;
    7808:	46 d3       	rcall	.+1676   	; 0x7e96 <USB_USBTask>
    780a:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <LLEDPulse>
    780e:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <LLEDPulse+0x1>
    7812:	01 96       	adiw	r24, 0x01	; 1
    7814:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <LLEDPulse+0x1>
    7818:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <LLEDPulse>
        uint8_t p = LLEDPulse >> 8;
        if (p > 127)
    781c:	29 2f       	mov	r18, r25
    781e:	97 ff       	sbrs	r25, 7
            p = 254-p;
    7820:	02 c0       	rjmp	.+4      	; 0x7826 <main+0x10a>
    7822:	2c 2f       	mov	r18, r28
        p += p;
        if (((uint8_t)LLEDPulse) > p)
    7824:	29 1b       	sub	r18, r25
    7826:	99 27       	eor	r25, r25
    7828:	22 0f       	add	r18, r18
    782a:	30 e0       	ldi	r19, 0x00	; 0
    782c:	28 17       	cp	r18, r24
    782e:	39 07       	cpc	r19, r25
            L_LED_OFF();
    7830:	14 f4       	brge	.+4      	; 0x7836 <main+0x11a>
    7832:	47 98       	cbi	0x08, 7	; 8
        else
            L_LED_ON();
    7834:	e4 cf       	rjmp	.-56     	; 0x77fe <main+0xe2>
    7836:	47 9a       	sbi	0x08, 7	; 8
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    7838:	e2 cf       	rjmp	.-60     	; 0x77fe <main+0xe2>
    783a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    783e:	81 60       	ori	r24, 0x01	; 1

    /* Disconnect from the host - USB interface will be reset later along with the AVR */
    USB_Detach();

    /* Jump to beginning of application space to run the sketch - do not reset */
    StartSketch();
    7840:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
}
    7844:	84 dc       	rcall	.-1784   	; 0x714e <StartSketch>
    7846:	80 e0       	ldi	r24, 0x00	; 0
    7848:	90 e0       	ldi	r25, 0x00	; 0
    784a:	cf 91       	pop	r28
    784c:	08 95       	ret

0000784e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    784e:	29 2f       	mov	r18, r25
    7850:	30 e0       	ldi	r19, 0x00	; 0
    7852:	22 30       	cpi	r18, 0x02	; 2
    7854:	31 05       	cpc	r19, r1
    7856:	59 f0       	breq	.+22     	; 0x786e <CALLBACK_USB_GetDescriptor+0x20>
    7858:	23 30       	cpi	r18, 0x03	; 3
    785a:	31 05       	cpc	r19, r1
    785c:	69 f0       	breq	.+26     	; 0x7878 <CALLBACK_USB_GetDescriptor+0x2a>
    785e:	21 30       	cpi	r18, 0x01	; 1
    7860:	31 05       	cpc	r19, r1
    7862:	f9 f4       	brne	.+62     	; 0x78a2 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    7864:	82 e1       	ldi	r24, 0x12	; 18
    7866:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    7868:	2b e9       	ldi	r18, 0x9B	; 155
    786a:	31 e0       	ldi	r19, 0x01	; 1
    786c:	1e c0       	rjmp	.+60     	; 0x78aa <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    786e:	8e e3       	ldi	r24, 0x3E	; 62
    7870:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    7872:	2d e5       	ldi	r18, 0x5D	; 93
    7874:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    7876:	19 c0       	rjmp	.+50     	; 0x78aa <CALLBACK_USB_GetDescriptor+0x5c>
		case DTYPE_String:
			if (!(DescriptorNumber))
    7878:	88 23       	and	r24, r24
    787a:	49 f0       	breq	.+18     	; 0x788e <CALLBACK_USB_GetDescriptor+0x40>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    787c:	81 30       	cpi	r24, 0x01	; 1
    787e:	61 f0       	breq	.+24     	; 0x7898 <CALLBACK_USB_GetDescriptor+0x4a>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    7880:	82 30       	cpi	r24, 0x02	; 2
    7882:	79 f4       	brne	.+30     	; 0x78a2 <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &ManufNameString;
				Size	= ManufNameString.Header.Size;
    7884:	8a e2       	ldi	r24, 0x2A	; 42
    7886:	90 e0       	ldi	r25, 0x00	; 0
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
    7888:	29 e0       	ldi	r18, 0x09	; 9
    788a:	31 e0       	ldi	r19, 0x01	; 1
    788c:	0e c0       	rjmp	.+28     	; 0x78aa <CALLBACK_USB_GetDescriptor+0x5c>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    788e:	84 e0       	ldi	r24, 0x04	; 4
    7890:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    7892:	29 e5       	ldi	r18, 0x59	; 89
    7894:	31 e0       	ldi	r19, 0x01	; 1
    7896:	09 c0       	rjmp	.+18     	; 0x78aa <CALLBACK_USB_GetDescriptor+0x5c>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    7898:	82 e2       	ldi	r24, 0x22	; 34
    789a:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
    789c:	25 e3       	ldi	r18, 0x35	; 53
    789e:	31 e0       	ldi	r19, 0x01	; 1
    78a0:	04 c0       	rjmp	.+8      	; 0x78aa <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    78a2:	80 e0       	ldi	r24, 0x00	; 0
    78a4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    78a6:	20 e0       	ldi	r18, 0x00	; 0
    78a8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    78aa:	fa 01       	movw	r30, r20
    78ac:	31 83       	std	Z+1, r19	; 0x01
    78ae:	20 83       	st	Z, r18
	return Size;
}
    78b0:	08 95       	ret

000078b2 <Endpoint_ConfigureEndpoint_Prv>:
    78b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    78b6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    78ba:	81 60       	ori	r24, 0x01	; 1
    78bc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    78c0:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    78c4:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    78c8:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    78cc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    78d0:	88 1f       	adc	r24, r24
    78d2:	88 27       	eor	r24, r24
    78d4:	88 1f       	adc	r24, r24
    78d6:	08 95       	ret

000078d8 <Endpoint_ClearStatusStage>:
    78d8:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <USB_ControlRequest>
    78dc:	88 23       	and	r24, r24
    78de:	8c f4       	brge	.+34     	; 0x7902 <Endpoint_ClearStatusStage+0x2a>
    78e0:	03 c0       	rjmp	.+6      	; 0x78e8 <Endpoint_ClearStatusStage+0x10>
    78e2:	8e b3       	in	r24, 0x1e	; 30
    78e4:	88 23       	and	r24, r24
    78e6:	b1 f0       	breq	.+44     	; 0x7914 <Endpoint_ClearStatusStage+0x3c>
    78e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    78ec:	82 ff       	sbrs	r24, 2
    78ee:	f9 cf       	rjmp	.-14     	; 0x78e2 <Endpoint_ClearStatusStage+0xa>
    78f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    78f4:	8b 77       	andi	r24, 0x7B	; 123
    78f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    78fa:	08 95       	ret
    78fc:	8e b3       	in	r24, 0x1e	; 30
    78fe:	88 23       	and	r24, r24
    7900:	49 f0       	breq	.+18     	; 0x7914 <Endpoint_ClearStatusStage+0x3c>
    7902:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7906:	80 ff       	sbrs	r24, 0
    7908:	f9 cf       	rjmp	.-14     	; 0x78fc <Endpoint_ClearStatusStage+0x24>
    790a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    790e:	8e 77       	andi	r24, 0x7E	; 126
    7910:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7914:	08 95       	ret

00007916 <USB_ResetInterface>:
    7916:	ef 92       	push	r14
    7918:	ff 92       	push	r15
    791a:	0f 93       	push	r16
    791c:	1f 93       	push	r17
    791e:	46 d0       	rcall	.+140    	; 0x79ac <USB_INT_DisableAllInterrupts>
    7920:	4d d0       	rcall	.+154    	; 0x79bc <USB_INT_ClearAllInterrupts>
    7922:	08 ed       	ldi	r16, 0xD8	; 216
    7924:	10 e0       	ldi	r17, 0x00	; 0
    7926:	f8 01       	movw	r30, r16
    7928:	80 81       	ld	r24, Z
    792a:	8f 77       	andi	r24, 0x7F	; 127
    792c:	80 83       	st	Z, r24
    792e:	80 81       	ld	r24, Z
    7930:	80 68       	ori	r24, 0x80	; 128
    7932:	80 83       	st	Z, r24
    7934:	80 81       	ld	r24, Z
    7936:	8f 7d       	andi	r24, 0xDF	; 223
    7938:	80 83       	st	Z, r24
    793a:	19 bc       	out	0x29, r1	; 41
    793c:	1e ba       	out	0x1e, r1	; 30
    793e:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <USB_Device_ConfigurationNumber>
    7942:	80 ee       	ldi	r24, 0xE0	; 224
    7944:	e8 2e       	mov	r14, r24
    7946:	f1 2c       	mov	r15, r1
    7948:	f7 01       	movw	r30, r14
    794a:	80 81       	ld	r24, Z
    794c:	8b 7f       	andi	r24, 0xFB	; 251
    794e:	80 83       	st	Z, r24
    7950:	f8 01       	movw	r30, r16
    7952:	80 81       	ld	r24, Z
    7954:	81 60       	ori	r24, 0x01	; 1
    7956:	80 83       	st	Z, r24
    7958:	80 e0       	ldi	r24, 0x00	; 0
    795a:	60 e0       	ldi	r22, 0x00	; 0
    795c:	42 e0       	ldi	r20, 0x02	; 2
    795e:	a9 df       	rcall	.-174    	; 0x78b2 <Endpoint_ConfigureEndpoint_Prv>
    7960:	e1 ee       	ldi	r30, 0xE1	; 225
    7962:	f0 e0       	ldi	r31, 0x00	; 0
    7964:	80 81       	ld	r24, Z
    7966:	8e 7f       	andi	r24, 0xFE	; 254
    7968:	80 83       	st	Z, r24
    796a:	e2 ee       	ldi	r30, 0xE2	; 226
    796c:	f0 e0       	ldi	r31, 0x00	; 0
    796e:	80 81       	ld	r24, Z
    7970:	81 60       	ori	r24, 0x01	; 1
    7972:	80 83       	st	Z, r24
    7974:	80 81       	ld	r24, Z
    7976:	88 60       	ori	r24, 0x08	; 8
    7978:	80 83       	st	Z, r24
    797a:	f7 01       	movw	r30, r14
    797c:	80 81       	ld	r24, Z
    797e:	8e 7f       	andi	r24, 0xFE	; 254
    7980:	80 83       	st	Z, r24
    7982:	f8 01       	movw	r30, r16
    7984:	80 81       	ld	r24, Z
    7986:	80 61       	ori	r24, 0x10	; 16
    7988:	80 83       	st	Z, r24
    798a:	1f 91       	pop	r17
    798c:	0f 91       	pop	r16
    798e:	ff 90       	pop	r15
    7990:	ef 90       	pop	r14
    7992:	08 95       	ret

00007994 <USB_Init>:
    7994:	e7 ed       	ldi	r30, 0xD7	; 215
    7996:	f0 e0       	ldi	r31, 0x00	; 0
    7998:	80 81       	ld	r24, Z
    799a:	81 60       	ori	r24, 0x01	; 1
    799c:	80 83       	st	Z, r24
    799e:	8a e4       	ldi	r24, 0x4A	; 74
    79a0:	82 bf       	out	0x32, r24	; 50
    79a2:	81 e0       	ldi	r24, 0x01	; 1
    79a4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <USB_IsInitialized>
    79a8:	b6 cf       	rjmp	.-148    	; 0x7916 <USB_ResetInterface>
    79aa:	08 95       	ret

000079ac <USB_INT_DisableAllInterrupts>:
    79ac:	e8 ed       	ldi	r30, 0xD8	; 216
    79ae:	f0 e0       	ldi	r31, 0x00	; 0
    79b0:	80 81       	ld	r24, Z
    79b2:	8e 7f       	andi	r24, 0xFE	; 254
    79b4:	80 83       	st	Z, r24
    79b6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79ba:	08 95       	ret

000079bc <USB_INT_ClearAllInterrupts>:
    79bc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    79c0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    79c4:	08 95       	ret

000079c6 <__vector_10>:
    79c6:	1f 92       	push	r1
    79c8:	0f 92       	push	r0
    79ca:	0f b6       	in	r0, 0x3f	; 63
    79cc:	0f 92       	push	r0
    79ce:	11 24       	eor	r1, r1
    79d0:	2f 93       	push	r18
    79d2:	3f 93       	push	r19
    79d4:	4f 93       	push	r20
    79d6:	5f 93       	push	r21
    79d8:	6f 93       	push	r22
    79da:	7f 93       	push	r23
    79dc:	8f 93       	push	r24
    79de:	9f 93       	push	r25
    79e0:	af 93       	push	r26
    79e2:	bf 93       	push	r27
    79e4:	ef 93       	push	r30
    79e6:	ff 93       	push	r31
    79e8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    79ec:	80 ff       	sbrs	r24, 0
    79ee:	1b c0       	rjmp	.+54     	; 0x7a26 <__vector_10+0x60>
    79f0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    79f4:	80 ff       	sbrs	r24, 0
    79f6:	17 c0       	rjmp	.+46     	; 0x7a26 <__vector_10+0x60>
    79f8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    79fc:	8e 7f       	andi	r24, 0xFE	; 254
    79fe:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    7a02:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    7a06:	80 ff       	sbrs	r24, 0
    7a08:	0b c0       	rjmp	.+22     	; 0x7a20 <__vector_10+0x5a>
    7a0a:	80 e1       	ldi	r24, 0x10	; 16
    7a0c:	89 bd       	out	0x29, r24	; 41
    7a0e:	82 e1       	ldi	r24, 0x12	; 18
    7a10:	89 bd       	out	0x29, r24	; 41
    7a12:	09 b4       	in	r0, 0x29	; 41
    7a14:	00 fe       	sbrs	r0, 0
    7a16:	fd cf       	rjmp	.-6      	; 0x7a12 <__vector_10+0x4c>
    7a18:	81 e0       	ldi	r24, 0x01	; 1
    7a1a:	8e bb       	out	0x1e, r24	; 30
    7a1c:	3b d2       	rcall	.+1142   	; 0x7e94 <USB_Event_Stub>
    7a1e:	03 c0       	rjmp	.+6      	; 0x7a26 <__vector_10+0x60>
    7a20:	19 bc       	out	0x29, r1	; 41
    7a22:	1e ba       	out	0x1e, r1	; 30
    7a24:	37 d2       	rcall	.+1134   	; 0x7e94 <USB_Event_Stub>
    7a26:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a2a:	80 ff       	sbrs	r24, 0
    7a2c:	17 c0       	rjmp	.+46     	; 0x7a5c <__vector_10+0x96>
    7a2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a32:	80 ff       	sbrs	r24, 0
    7a34:	13 c0       	rjmp	.+38     	; 0x7a5c <__vector_10+0x96>
    7a36:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a3a:	8e 7f       	andi	r24, 0xFE	; 254
    7a3c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a40:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a44:	80 61       	ori	r24, 0x10	; 16
    7a46:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a4a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a4e:	80 62       	ori	r24, 0x20	; 32
    7a50:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a54:	19 bc       	out	0x29, r1	; 41
    7a56:	85 e0       	ldi	r24, 0x05	; 5
    7a58:	8e bb       	out	0x1e, r24	; 30
    7a5a:	1c d2       	rcall	.+1080   	; 0x7e94 <USB_Event_Stub>
    7a5c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a60:	84 ff       	sbrs	r24, 4
    7a62:	2c c0       	rjmp	.+88     	; 0x7abc <__vector_10+0xf6>
    7a64:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a68:	84 ff       	sbrs	r24, 4
    7a6a:	28 c0       	rjmp	.+80     	; 0x7abc <__vector_10+0xf6>
    7a6c:	80 e1       	ldi	r24, 0x10	; 16
    7a6e:	89 bd       	out	0x29, r24	; 41
    7a70:	82 e1       	ldi	r24, 0x12	; 18
    7a72:	89 bd       	out	0x29, r24	; 41
    7a74:	09 b4       	in	r0, 0x29	; 41
    7a76:	00 fe       	sbrs	r0, 0
    7a78:	fd cf       	rjmp	.-6      	; 0x7a74 <__vector_10+0xae>
    7a7a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a7e:	8f 7d       	andi	r24, 0xDF	; 223
    7a80:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a84:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a88:	8f 7e       	andi	r24, 0xEF	; 239
    7a8a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a8e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a92:	8f 7e       	andi	r24, 0xEF	; 239
    7a94:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a98:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a9c:	81 60       	ori	r24, 0x01	; 1
    7a9e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7aa2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <USB_Device_ConfigurationNumber>
    7aa6:	88 23       	and	r24, r24
    7aa8:	31 f4       	brne	.+12     	; 0x7ab6 <__vector_10+0xf0>
    7aaa:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7aae:	87 fd       	sbrc	r24, 7
    7ab0:	02 c0       	rjmp	.+4      	; 0x7ab6 <__vector_10+0xf0>
    7ab2:	81 e0       	ldi	r24, 0x01	; 1
    7ab4:	01 c0       	rjmp	.+2      	; 0x7ab8 <__vector_10+0xf2>
    7ab6:	84 e0       	ldi	r24, 0x04	; 4
    7ab8:	8e bb       	out	0x1e, r24	; 30
    7aba:	ec d1       	rcall	.+984    	; 0x7e94 <USB_Event_Stub>
    7abc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7ac0:	83 ff       	sbrs	r24, 3
    7ac2:	21 c0       	rjmp	.+66     	; 0x7b06 <__vector_10+0x140>
    7ac4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7ac8:	83 ff       	sbrs	r24, 3
    7aca:	1d c0       	rjmp	.+58     	; 0x7b06 <__vector_10+0x140>
    7acc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7ad0:	87 7f       	andi	r24, 0xF7	; 247
    7ad2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7ad6:	82 e0       	ldi	r24, 0x02	; 2
    7ad8:	8e bb       	out	0x1e, r24	; 30
    7ada:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <USB_Device_ConfigurationNumber>
    7ade:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7ae2:	8e 7f       	andi	r24, 0xFE	; 254
    7ae4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7ae8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7aec:	8e 7f       	andi	r24, 0xFE	; 254
    7aee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7af2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7af6:	80 61       	ori	r24, 0x10	; 16
    7af8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7afc:	80 e0       	ldi	r24, 0x00	; 0
    7afe:	60 e0       	ldi	r22, 0x00	; 0
    7b00:	42 e0       	ldi	r20, 0x02	; 2
    7b02:	d7 de       	rcall	.-594    	; 0x78b2 <Endpoint_ConfigureEndpoint_Prv>
    7b04:	c7 d1       	rcall	.+910    	; 0x7e94 <USB_Event_Stub>
    7b06:	ff 91       	pop	r31
    7b08:	ef 91       	pop	r30
    7b0a:	bf 91       	pop	r27
    7b0c:	af 91       	pop	r26
    7b0e:	9f 91       	pop	r25
    7b10:	8f 91       	pop	r24
    7b12:	7f 91       	pop	r23
    7b14:	6f 91       	pop	r22
    7b16:	5f 91       	pop	r21
    7b18:	4f 91       	pop	r20
    7b1a:	3f 91       	pop	r19
    7b1c:	2f 91       	pop	r18
    7b1e:	0f 90       	pop	r0
    7b20:	0f be       	out	0x3f, r0	; 63
    7b22:	0f 90       	pop	r0
    7b24:	1f 90       	pop	r1
    7b26:	18 95       	reti

00007b28 <Endpoint_Write_Control_Stream_LE>:
    7b28:	9c 01       	movw	r18, r24
    7b2a:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <USB_ControlRequest+0x6>
    7b2e:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <USB_ControlRequest+0x7>
    7b32:	46 17       	cp	r20, r22
    7b34:	57 07       	cpc	r21, r23
    7b36:	18 f4       	brcc	.+6      	; 0x7b3e <Endpoint_Write_Control_Stream_LE+0x16>
    7b38:	f9 01       	movw	r30, r18
    7b3a:	90 e0       	ldi	r25, 0x00	; 0
    7b3c:	44 c0       	rjmp	.+136    	; 0x7bc6 <Endpoint_Write_Control_Stream_LE+0x9e>
    7b3e:	61 15       	cp	r22, r1
    7b40:	71 05       	cpc	r23, r1
    7b42:	11 f0       	breq	.+4      	; 0x7b48 <Endpoint_Write_Control_Stream_LE+0x20>
    7b44:	ab 01       	movw	r20, r22
    7b46:	f8 cf       	rjmp	.-16     	; 0x7b38 <Endpoint_Write_Control_Stream_LE+0x10>
    7b48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b4c:	8e 77       	andi	r24, 0x7E	; 126
    7b4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b52:	40 e0       	ldi	r20, 0x00	; 0
    7b54:	50 e0       	ldi	r21, 0x00	; 0
    7b56:	f0 cf       	rjmp	.-32     	; 0x7b38 <Endpoint_Write_Control_Stream_LE+0x10>
    7b58:	8e b3       	in	r24, 0x1e	; 30
    7b5a:	88 23       	and	r24, r24
    7b5c:	09 f4       	brne	.+2      	; 0x7b60 <Endpoint_Write_Control_Stream_LE+0x38>
    7b5e:	44 c0       	rjmp	.+136    	; 0x7be8 <Endpoint_Write_Control_Stream_LE+0xc0>
    7b60:	85 30       	cpi	r24, 0x05	; 5
    7b62:	09 f4       	brne	.+2      	; 0x7b66 <Endpoint_Write_Control_Stream_LE+0x3e>
    7b64:	43 c0       	rjmp	.+134    	; 0x7bec <Endpoint_Write_Control_Stream_LE+0xc4>
    7b66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b6a:	83 ff       	sbrs	r24, 3
    7b6c:	02 c0       	rjmp	.+4      	; 0x7b72 <Endpoint_Write_Control_Stream_LE+0x4a>
    7b6e:	81 e0       	ldi	r24, 0x01	; 1
    7b70:	08 95       	ret
    7b72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b76:	82 fd       	sbrc	r24, 2
    7b78:	31 c0       	rjmp	.+98     	; 0x7bdc <Endpoint_Write_Control_Stream_LE+0xb4>
    7b7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b7e:	80 ff       	sbrs	r24, 0
    7b80:	22 c0       	rjmp	.+68     	; 0x7bc6 <Endpoint_Write_Control_Stream_LE+0x9e>
    7b82:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7b86:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    7b8a:	78 2f       	mov	r23, r24
    7b8c:	60 e0       	ldi	r22, 0x00	; 0
    7b8e:	29 2f       	mov	r18, r25
    7b90:	30 e0       	ldi	r19, 0x00	; 0
    7b92:	26 2b       	or	r18, r22
    7b94:	37 2b       	or	r19, r23
    7b96:	07 c0       	rjmp	.+14     	; 0x7ba6 <Endpoint_Write_Control_Stream_LE+0x7e>
    7b98:	81 91       	ld	r24, Z+
    7b9a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7b9e:	41 50       	subi	r20, 0x01	; 1
    7ba0:	50 40       	sbci	r21, 0x00	; 0
    7ba2:	2f 5f       	subi	r18, 0xFF	; 255
    7ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba6:	41 15       	cp	r20, r1
    7ba8:	51 05       	cpc	r21, r1
    7baa:	19 f0       	breq	.+6      	; 0x7bb2 <Endpoint_Write_Control_Stream_LE+0x8a>
    7bac:	28 30       	cpi	r18, 0x08	; 8
    7bae:	31 05       	cpc	r19, r1
    7bb0:	98 f3       	brcs	.-26     	; 0x7b98 <Endpoint_Write_Control_Stream_LE+0x70>
    7bb2:	90 e0       	ldi	r25, 0x00	; 0
    7bb4:	28 30       	cpi	r18, 0x08	; 8
    7bb6:	31 05       	cpc	r19, r1
    7bb8:	09 f4       	brne	.+2      	; 0x7bbc <Endpoint_Write_Control_Stream_LE+0x94>
    7bba:	91 e0       	ldi	r25, 0x01	; 1
    7bbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7bc0:	8e 77       	andi	r24, 0x7E	; 126
    7bc2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7bc6:	41 15       	cp	r20, r1
    7bc8:	51 05       	cpc	r21, r1
    7bca:	31 f6       	brne	.-116    	; 0x7b58 <Endpoint_Write_Control_Stream_LE+0x30>
    7bcc:	99 23       	and	r25, r25
    7bce:	21 f6       	brne	.-120    	; 0x7b58 <Endpoint_Write_Control_Stream_LE+0x30>
    7bd0:	05 c0       	rjmp	.+10     	; 0x7bdc <Endpoint_Write_Control_Stream_LE+0xb4>
    7bd2:	8e b3       	in	r24, 0x1e	; 30
    7bd4:	88 23       	and	r24, r24
    7bd6:	41 f0       	breq	.+16     	; 0x7be8 <Endpoint_Write_Control_Stream_LE+0xc0>
    7bd8:	85 30       	cpi	r24, 0x05	; 5
    7bda:	41 f0       	breq	.+16     	; 0x7bec <Endpoint_Write_Control_Stream_LE+0xc4>
    7bdc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7be0:	82 ff       	sbrs	r24, 2
    7be2:	f7 cf       	rjmp	.-18     	; 0x7bd2 <Endpoint_Write_Control_Stream_LE+0xaa>
    7be4:	80 e0       	ldi	r24, 0x00	; 0
    7be6:	08 95       	ret
    7be8:	82 e0       	ldi	r24, 0x02	; 2
    7bea:	08 95       	ret
    7bec:	83 e0       	ldi	r24, 0x03	; 3
    7bee:	08 95       	ret

00007bf0 <Endpoint_Read_Control_Stream_LE>:
    7bf0:	9c 01       	movw	r18, r24
    7bf2:	61 15       	cp	r22, r1
    7bf4:	71 05       	cpc	r23, r1
    7bf6:	29 f4       	brne	.+10     	; 0x7c02 <Endpoint_Read_Control_Stream_LE+0x12>
    7bf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7bfc:	8b 77       	andi	r24, 0x7B	; 123
    7bfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c02:	f9 01       	movw	r30, r18
    7c04:	26 c0       	rjmp	.+76     	; 0x7c52 <Endpoint_Read_Control_Stream_LE+0x62>
    7c06:	8e b3       	in	r24, 0x1e	; 30
    7c08:	88 23       	and	r24, r24
    7c0a:	91 f1       	breq	.+100    	; 0x7c70 <Endpoint_Read_Control_Stream_LE+0x80>
    7c0c:	85 30       	cpi	r24, 0x05	; 5
    7c0e:	91 f1       	breq	.+100    	; 0x7c74 <Endpoint_Read_Control_Stream_LE+0x84>
    7c10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c14:	83 ff       	sbrs	r24, 3
    7c16:	02 c0       	rjmp	.+4      	; 0x7c1c <Endpoint_Read_Control_Stream_LE+0x2c>
    7c18:	81 e0       	ldi	r24, 0x01	; 1
    7c1a:	08 95       	ret
    7c1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c20:	82 ff       	sbrs	r24, 2
    7c22:	f1 cf       	rjmp	.-30     	; 0x7c06 <Endpoint_Read_Control_Stream_LE+0x16>
    7c24:	06 c0       	rjmp	.+12     	; 0x7c32 <Endpoint_Read_Control_Stream_LE+0x42>
    7c26:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7c2a:	81 93       	st	Z+, r24
    7c2c:	61 50       	subi	r22, 0x01	; 1
    7c2e:	70 40       	sbci	r23, 0x00	; 0
    7c30:	59 f0       	breq	.+22     	; 0x7c48 <Endpoint_Read_Control_Stream_LE+0x58>
    7c32:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7c36:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    7c3a:	32 2f       	mov	r19, r18
    7c3c:	20 e0       	ldi	r18, 0x00	; 0
    7c3e:	90 e0       	ldi	r25, 0x00	; 0
    7c40:	82 2b       	or	r24, r18
    7c42:	93 2b       	or	r25, r19
    7c44:	89 2b       	or	r24, r25
    7c46:	79 f7       	brne	.-34     	; 0x7c26 <Endpoint_Read_Control_Stream_LE+0x36>
    7c48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c4c:	8b 77       	andi	r24, 0x7B	; 123
    7c4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c52:	61 15       	cp	r22, r1
    7c54:	71 05       	cpc	r23, r1
    7c56:	b9 f6       	brne	.-82     	; 0x7c06 <Endpoint_Read_Control_Stream_LE+0x16>
    7c58:	05 c0       	rjmp	.+10     	; 0x7c64 <Endpoint_Read_Control_Stream_LE+0x74>
    7c5a:	8e b3       	in	r24, 0x1e	; 30
    7c5c:	88 23       	and	r24, r24
    7c5e:	41 f0       	breq	.+16     	; 0x7c70 <Endpoint_Read_Control_Stream_LE+0x80>
    7c60:	85 30       	cpi	r24, 0x05	; 5
    7c62:	41 f0       	breq	.+16     	; 0x7c74 <Endpoint_Read_Control_Stream_LE+0x84>
    7c64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c68:	80 ff       	sbrs	r24, 0
    7c6a:	f7 cf       	rjmp	.-18     	; 0x7c5a <Endpoint_Read_Control_Stream_LE+0x6a>
    7c6c:	80 e0       	ldi	r24, 0x00	; 0
    7c6e:	08 95       	ret
    7c70:	82 e0       	ldi	r24, 0x02	; 2
    7c72:	08 95       	ret
    7c74:	83 e0       	ldi	r24, 0x03	; 3
    7c76:	08 95       	ret

00007c78 <USB_Device_ProcessControlRequest>:
    7c78:	0f 93       	push	r16
    7c7a:	1f 93       	push	r17
    7c7c:	df 93       	push	r29
    7c7e:	cf 93       	push	r28
    7c80:	00 d0       	rcall	.+0      	; 0x7c82 <USB_Device_ProcessControlRequest+0xa>
    7c82:	cd b7       	in	r28, 0x3d	; 61
    7c84:	de b7       	in	r29, 0x3e	; 62
    7c86:	e5 ec       	ldi	r30, 0xC5	; 197
    7c88:	f1 e0       	ldi	r31, 0x01	; 1
    7c8a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7c8e:	81 93       	st	Z+, r24
    7c90:	81 e0       	ldi	r24, 0x01	; 1
    7c92:	ed 3c       	cpi	r30, 0xCD	; 205
    7c94:	f8 07       	cpc	r31, r24
    7c96:	c9 f7       	brne	.-14     	; 0x7c8a <USB_Device_ProcessControlRequest+0x12>
    7c98:	c0 da       	rcall	.-2688   	; 0x721a <EVENT_USB_Device_ControlRequest>
    7c9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c9e:	83 ff       	sbrs	r24, 3
    7ca0:	e4 c0       	rjmp	.+456    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7ca2:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <USB_ControlRequest>
    7ca6:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <USB_ControlRequest+0x1>
    7caa:	95 30       	cpi	r25, 0x05	; 5
    7cac:	09 f4       	brne	.+2      	; 0x7cb0 <USB_Device_ProcessControlRequest+0x38>
    7cae:	6d c0       	rjmp	.+218    	; 0x7d8a <USB_Device_ProcessControlRequest+0x112>
    7cb0:	96 30       	cpi	r25, 0x06	; 6
    7cb2:	40 f4       	brcc	.+16     	; 0x7cc4 <USB_Device_ProcessControlRequest+0x4c>
    7cb4:	91 30       	cpi	r25, 0x01	; 1
    7cb6:	81 f1       	breq	.+96     	; 0x7d18 <USB_Device_ProcessControlRequest+0xa0>
    7cb8:	91 30       	cpi	r25, 0x01	; 1
    7cba:	70 f0       	brcs	.+28     	; 0x7cd8 <USB_Device_ProcessControlRequest+0x60>
    7cbc:	93 30       	cpi	r25, 0x03	; 3
    7cbe:	09 f0       	breq	.+2      	; 0x7cc2 <USB_Device_ProcessControlRequest+0x4a>
    7cc0:	d4 c0       	rjmp	.+424    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7cc2:	2a c0       	rjmp	.+84     	; 0x7d18 <USB_Device_ProcessControlRequest+0xa0>
    7cc4:	98 30       	cpi	r25, 0x08	; 8
    7cc6:	09 f4       	brne	.+2      	; 0x7cca <USB_Device_ProcessControlRequest+0x52>
    7cc8:	a3 c0       	rjmp	.+326    	; 0x7e10 <USB_Device_ProcessControlRequest+0x198>
    7cca:	99 30       	cpi	r25, 0x09	; 9
    7ccc:	09 f4       	brne	.+2      	; 0x7cd0 <USB_Device_ProcessControlRequest+0x58>
    7cce:	b2 c0       	rjmp	.+356    	; 0x7e34 <USB_Device_ProcessControlRequest+0x1bc>
    7cd0:	96 30       	cpi	r25, 0x06	; 6
    7cd2:	09 f0       	breq	.+2      	; 0x7cd6 <USB_Device_ProcessControlRequest+0x5e>
    7cd4:	ca c0       	rjmp	.+404    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7cd6:	7c c0       	rjmp	.+248    	; 0x7dd0 <USB_Device_ProcessControlRequest+0x158>
    7cd8:	80 38       	cpi	r24, 0x80	; 128
    7cda:	09 f4       	brne	.+2      	; 0x7cde <USB_Device_ProcessControlRequest+0x66>
    7cdc:	c6 c0       	rjmp	.+396    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7cde:	82 38       	cpi	r24, 0x82	; 130
    7ce0:	09 f0       	breq	.+2      	; 0x7ce4 <USB_Device_ProcessControlRequest+0x6c>
    7ce2:	c3 c0       	rjmp	.+390    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7ce4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <USB_ControlRequest+0x4>
    7ce8:	87 70       	andi	r24, 0x07	; 7
    7cea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7cee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7cf2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7cf6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7cfa:	27 7f       	andi	r18, 0xF7	; 247
    7cfc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d00:	90 e0       	ldi	r25, 0x00	; 0
    7d02:	25 e0       	ldi	r18, 0x05	; 5
    7d04:	96 95       	lsr	r25
    7d06:	87 95       	ror	r24
    7d08:	2a 95       	dec	r18
    7d0a:	e1 f7       	brne	.-8      	; 0x7d04 <USB_Device_ProcessControlRequest+0x8c>
    7d0c:	81 70       	andi	r24, 0x01	; 1
    7d0e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7d12:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7d16:	87 c0       	rjmp	.+270    	; 0x7e26 <USB_Device_ProcessControlRequest+0x1ae>
    7d18:	88 23       	and	r24, r24
    7d1a:	19 f0       	breq	.+6      	; 0x7d22 <USB_Device_ProcessControlRequest+0xaa>
    7d1c:	82 30       	cpi	r24, 0x02	; 2
    7d1e:	09 f0       	breq	.+2      	; 0x7d22 <USB_Device_ProcessControlRequest+0xaa>
    7d20:	a4 c0       	rjmp	.+328    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7d22:	8f 71       	andi	r24, 0x1F	; 31
    7d24:	82 30       	cpi	r24, 0x02	; 2
    7d26:	09 f0       	breq	.+2      	; 0x7d2a <USB_Device_ProcessControlRequest+0xb2>
    7d28:	a0 c0       	rjmp	.+320    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7d2a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x2>
    7d2e:	88 23       	and	r24, r24
    7d30:	31 f5       	brne	.+76     	; 0x7d7e <USB_Device_ProcessControlRequest+0x106>
    7d32:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <USB_ControlRequest+0x4>
    7d36:	27 70       	andi	r18, 0x07	; 7
    7d38:	09 f4       	brne	.+2      	; 0x7d3c <USB_Device_ProcessControlRequest+0xc4>
    7d3a:	97 c0       	rjmp	.+302    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7d3c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7d40:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7d44:	80 ff       	sbrs	r24, 0
    7d46:	1b c0       	rjmp	.+54     	; 0x7d7e <USB_Device_ProcessControlRequest+0x106>
    7d48:	93 30       	cpi	r25, 0x03	; 3
    7d4a:	21 f4       	brne	.+8      	; 0x7d54 <USB_Device_ProcessControlRequest+0xdc>
    7d4c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7d50:	80 62       	ori	r24, 0x20	; 32
    7d52:	13 c0       	rjmp	.+38     	; 0x7d7a <USB_Device_ProcessControlRequest+0x102>
    7d54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7d58:	80 61       	ori	r24, 0x10	; 16
    7d5a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7d5e:	81 e0       	ldi	r24, 0x01	; 1
    7d60:	90 e0       	ldi	r25, 0x00	; 0
    7d62:	02 c0       	rjmp	.+4      	; 0x7d68 <USB_Device_ProcessControlRequest+0xf0>
    7d64:	88 0f       	add	r24, r24
    7d66:	99 1f       	adc	r25, r25
    7d68:	2a 95       	dec	r18
    7d6a:	e2 f7       	brpl	.-8      	; 0x7d64 <USB_Device_ProcessControlRequest+0xec>
    7d6c:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    7d70:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    7d74:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7d78:	88 60       	ori	r24, 0x08	; 8
    7d7a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7d7e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7d82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d86:	87 7f       	andi	r24, 0xF7	; 247
    7d88:	51 c0       	rjmp	.+162    	; 0x7e2c <USB_Device_ProcessControlRequest+0x1b4>
    7d8a:	88 23       	and	r24, r24
    7d8c:	09 f0       	breq	.+2      	; 0x7d90 <USB_Device_ProcessControlRequest+0x118>
    7d8e:	6d c0       	rjmp	.+218    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7d90:	10 91 c7 01 	lds	r17, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x2>
    7d94:	1f 77       	andi	r17, 0x7F	; 127
    7d96:	0f b7       	in	r16, 0x3f	; 63
    7d98:	f8 94       	cli
    7d9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d9e:	87 7f       	andi	r24, 0xF7	; 247
    7da0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7da4:	99 dd       	rcall	.-1230   	; 0x78d8 <Endpoint_ClearStatusStage>
    7da6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7daa:	80 ff       	sbrs	r24, 0
    7dac:	fc cf       	rjmp	.-8      	; 0x7da6 <USB_Device_ProcessControlRequest+0x12e>
    7dae:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7db2:	80 78       	andi	r24, 0x80	; 128
    7db4:	81 2b       	or	r24, r17
    7db6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7dba:	80 68       	ori	r24, 0x80	; 128
    7dbc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7dc0:	11 23       	and	r17, r17
    7dc2:	11 f4       	brne	.+4      	; 0x7dc8 <USB_Device_ProcessControlRequest+0x150>
    7dc4:	82 e0       	ldi	r24, 0x02	; 2
    7dc6:	01 c0       	rjmp	.+2      	; 0x7dca <USB_Device_ProcessControlRequest+0x152>
    7dc8:	83 e0       	ldi	r24, 0x03	; 3
    7dca:	8e bb       	out	0x1e, r24	; 30
    7dcc:	0f bf       	out	0x3f, r16	; 63
    7dce:	4d c0       	rjmp	.+154    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7dd0:	80 58       	subi	r24, 0x80	; 128
    7dd2:	82 30       	cpi	r24, 0x02	; 2
    7dd4:	08 f0       	brcs	.+2      	; 0x7dd8 <USB_Device_ProcessControlRequest+0x160>
    7dd6:	49 c0       	rjmp	.+146    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7dd8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x2>
    7ddc:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <USB_ControlRequest+0x3>
    7de0:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <USB_ControlRequest+0x4>
    7de4:	ae 01       	movw	r20, r28
    7de6:	4f 5f       	subi	r20, 0xFF	; 255
    7de8:	5f 4f       	sbci	r21, 0xFF	; 255
    7dea:	31 dd       	rcall	.-1438   	; 0x784e <CALLBACK_USB_GetDescriptor>
    7dec:	bc 01       	movw	r22, r24
    7dee:	00 97       	sbiw	r24, 0x00	; 0
    7df0:	09 f4       	brne	.+2      	; 0x7df4 <USB_Device_ProcessControlRequest+0x17c>
    7df2:	3b c0       	rjmp	.+118    	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7df4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7df8:	87 7f       	andi	r24, 0xF7	; 247
    7dfa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7dfe:	89 81       	ldd	r24, Y+1	; 0x01
    7e00:	9a 81       	ldd	r25, Y+2	; 0x02
    7e02:	92 de       	rcall	.-732    	; 0x7b28 <Endpoint_Write_Control_Stream_LE>
    7e04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e08:	8b 77       	andi	r24, 0x7B	; 123
    7e0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e0e:	2d c0       	rjmp	.+90     	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7e10:	80 38       	cpi	r24, 0x80	; 128
    7e12:	59 f5       	brne	.+86     	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7e14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e18:	87 7f       	andi	r24, 0xF7	; 247
    7e1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e1e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <USB_Device_ConfigurationNumber>
    7e22:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7e26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e2a:	8e 77       	andi	r24, 0x7E	; 126
    7e2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e30:	53 dd       	rcall	.-1370   	; 0x78d8 <Endpoint_ClearStatusStage>
    7e32:	1b c0       	rjmp	.+54     	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7e34:	88 23       	and	r24, r24
    7e36:	c9 f4       	brne	.+50     	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7e38:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <USB_ControlRequest+0x2>
    7e3c:	92 30       	cpi	r25, 0x02	; 2
    7e3e:	a8 f4       	brcc	.+42     	; 0x7e6a <USB_Device_ProcessControlRequest+0x1f2>
    7e40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e44:	87 7f       	andi	r24, 0xF7	; 247
    7e46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e4a:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <USB_Device_ConfigurationNumber>
    7e4e:	44 dd       	rcall	.-1400   	; 0x78d8 <Endpoint_ClearStatusStage>
    7e50:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <USB_Device_ConfigurationNumber>
    7e54:	88 23       	and	r24, r24
    7e56:	31 f4       	brne	.+12     	; 0x7e64 <USB_Device_ProcessControlRequest+0x1ec>
    7e58:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7e5c:	87 fd       	sbrc	r24, 7
    7e5e:	02 c0       	rjmp	.+4      	; 0x7e64 <USB_Device_ProcessControlRequest+0x1ec>
    7e60:	81 e0       	ldi	r24, 0x01	; 1
    7e62:	01 c0       	rjmp	.+2      	; 0x7e66 <USB_Device_ProcessControlRequest+0x1ee>
    7e64:	84 e0       	ldi	r24, 0x04	; 4
    7e66:	8e bb       	out	0x1e, r24	; 30
    7e68:	cc d9       	rcall	.-3176   	; 0x7202 <EVENT_USB_Device_ConfigurationChanged>
    7e6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e6e:	83 ff       	sbrs	r24, 3
    7e70:	0a c0       	rjmp	.+20     	; 0x7e86 <USB_Device_ProcessControlRequest+0x20e>
    7e72:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7e76:	80 62       	ori	r24, 0x20	; 32
    7e78:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7e7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e80:	87 7f       	andi	r24, 0xF7	; 247
    7e82:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7e86:	0f 90       	pop	r0
    7e88:	0f 90       	pop	r0
    7e8a:	cf 91       	pop	r28
    7e8c:	df 91       	pop	r29
    7e8e:	1f 91       	pop	r17
    7e90:	0f 91       	pop	r16
    7e92:	08 95       	ret

00007e94 <USB_Event_Stub>:
    7e94:	08 95       	ret

00007e96 <USB_USBTask>:
    7e96:	1f 93       	push	r17
    7e98:	8e b3       	in	r24, 0x1e	; 30
    7e9a:	88 23       	and	r24, r24
    7e9c:	61 f0       	breq	.+24     	; 0x7eb6 <USB_USBTask+0x20>
    7e9e:	10 91 e9 00 	lds	r17, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7ea2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7ea6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7eaa:	83 ff       	sbrs	r24, 3
    7eac:	01 c0       	rjmp	.+2      	; 0x7eb0 <USB_USBTask+0x1a>
    7eae:	e4 de       	rcall	.-568    	; 0x7c78 <USB_Device_ProcessControlRequest>
    7eb0:	17 70       	andi	r17, 0x07	; 7
    7eb2:	10 93 e9 00 	sts	0x00E9, r17	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7eb6:	1f 91       	pop	r17
    7eb8:	08 95       	ret

00007eba <eeprom_read_byte>:
    7eba:	f9 99       	sbic	0x1f, 1	; 31
    7ebc:	fe cf       	rjmp	.-4      	; 0x7eba <eeprom_read_byte>
    7ebe:	92 bd       	out	0x22, r25	; 34
    7ec0:	81 bd       	out	0x21, r24	; 33
    7ec2:	f8 9a       	sbi	0x1f, 0	; 31
    7ec4:	99 27       	eor	r25, r25
    7ec6:	80 b5       	in	r24, 0x20	; 32
    7ec8:	08 95       	ret

00007eca <eeprom_write_byte>:
    7eca:	26 2f       	mov	r18, r22

00007ecc <eeprom_write_r18>:
    7ecc:	f9 99       	sbic	0x1f, 1	; 31
    7ece:	fe cf       	rjmp	.-4      	; 0x7ecc <eeprom_write_r18>
    7ed0:	1f ba       	out	0x1f, r1	; 31
    7ed2:	92 bd       	out	0x22, r25	; 34
    7ed4:	81 bd       	out	0x21, r24	; 33
    7ed6:	20 bd       	out	0x20, r18	; 32
    7ed8:	0f b6       	in	r0, 0x3f	; 63
    7eda:	f8 94       	cli
    7edc:	fa 9a       	sbi	0x1f, 2	; 31
    7ede:	f9 9a       	sbi	0x1f, 1	; 31
    7ee0:	0f be       	out	0x3f, r0	; 63
    7ee2:	01 96       	adiw	r24, 0x01	; 1
    7ee4:	08 95       	ret

00007ee6 <_exit>:
    7ee6:	f8 94       	cli

00007ee8 <__stop_program>:
    7ee8:	ff cf       	rjmp	.-2      	; 0x7ee8 <__stop_program>
