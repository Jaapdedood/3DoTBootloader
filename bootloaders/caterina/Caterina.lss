
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00007e24  00000eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e24  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800196  00800196  00000f4e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00000fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006060  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001db4  00000000  00000000  00007300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000763e  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  000106f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000214c  00000000  00000000  00010f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000384e  00000000  00000000  00013050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  0001689e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	9a c4       	rjmp	.+2356   	; 0x795e <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	e1 c0       	rjmp	.+450    	; 0x7208 <__vector_17>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	e4 e2       	ldi	r30, 0x24	; 36
    70c0:	fe e7       	ldi	r31, 0x7E	; 126
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <__do_copy_data+0x10>
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	a6 39       	cpi	r26, 0x96	; 150
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__do_copy_data+0xc>

000070ce <__do_clear_bss>:
    70ce:	21 e0       	ldi	r18, 0x01	; 1
    70d0:	a6 e9       	ldi	r26, 0x96	; 150
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	ac 3a       	cpi	r26, 0xAC	; 172
    70da:	b2 07       	cpc	r27, r18
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	5c d3       	rcall	.+1720   	; 0x7798 <main>
    70e0:	95 c6       	rjmp	.+3370   	; 0x7e0c <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70e4:	84 e0       	ldi	r24, 0x04	; 4
    70e6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    70ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
    /* Select the OUT endpoint so that the next data byte can be read */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* If OUT endpoint empty, clear it and wait for the next packet from the host */
    while (!(Endpoint_IsReadWriteAllowed()))
    70ee:	85 ff       	sbrs	r24, 5
    70f0:	03 c0       	rjmp	.+6      	; 0x70f8 <FetchNextCommandByte+0x14>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    70f2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
              return 0;
        }
    }

    /* Fetch the next byte from the OUT endpoint */
    return Endpoint_Read_8();
    70f6:	0c c0       	rjmp	.+24     	; 0x7110 <FetchNextCommandByte+0x2c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    70fc:	8b 77       	andi	r24, 0x7B	; 123
    70fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7102:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsOUTReceived()))
    7106:	82 fd       	sbrc	r24, 2
    7108:	f0 cf       	rjmp	.-32     	; 0x70ea <FetchNextCommandByte+0x6>
            if (USB_DeviceState == DEVICE_STATE_Unattached)
    710a:	8e b3       	in	r24, 0x1e	; 30
    710c:	81 11       	cpse	r24, r1
    710e:	f9 cf       	rjmp	.-14     	; 0x7102 <FetchNextCommandByte+0x1e>
}
    7110:	08 95       	ret

00007112 <WriteNextResponseByte>:
					UENUM = EndpointNumber;
    7112:	93 e0       	ldi	r25, 0x03	; 3
    7114:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7118:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
    /* Select the IN endpoint so that the next data byte can be written */
    Endpoint_SelectEndpoint(CDC_TX_EPNUM);

    /* If IN endpoint full, clear it and wait until ready for the next packet to the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    711c:	95 ff       	sbrs	r25, 5
    711e:	0a c0       	rjmp	.+20     	; 0x7134 <WriteNextResponseByte+0x22>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7120:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    }

    /* Write the next byte to the IN endpoint */
    Endpoint_Write_8(Response);

    TX_LED_ON();
    7124:	5b 98       	cbi	0x0b, 3	; 11
    TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7126:	84 e6       	ldi	r24, 0x64	; 100
    7128:	90 e0       	ldi	r25, 0x00	; 0
    712a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <TxLEDPulse+0x1>
    712e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TxLEDPulse>
    7132:	08 95       	ret
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7134:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7138:	9e 77       	andi	r25, 0x7E	; 126
    713a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    713e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsINReady()))
    7142:	90 fd       	sbrc	r25, 0
    7144:	ed cf       	rjmp	.-38     	; 0x7120 <WriteNextResponseByte+0xe>
            if (USB_DeviceState == DEVICE_STATE_Unattached)
    7146:	9e b3       	in	r25, 0x1e	; 30
    7148:	91 11       	cpse	r25, r1
    714a:	f9 cf       	rjmp	.-14     	; 0x713e <WriteNextResponseByte+0x2c>
}
    714c:	08 95       	ret

0000714e <StartSketch>:
    cli();
    714e:	f8 94       	cli
    TIMSK1 = 0;
    7150:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TCCR1B = 0;
    7154:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
    7158:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    TCNT1L = 0;
    715c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    MCUCR = (1 << IVCE);
    7160:	81 e0       	ldi	r24, 0x01	; 1
    7162:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    7164:	15 be       	out	0x35, r1	; 53
    L_LED_OFF();
    7166:	47 98       	cbi	0x08, 7	; 8
    TX_LED_OFF();
    7168:	5b 9a       	sbi	0x0b, 3	; 11
    RX_LED_OFF();
    716a:	5a 9a       	sbi	0x0b, 2	; 11
    __asm__ volatile("jmp 0x0000");
    716c:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
}
    7170:	08 95       	ret

00007172 <TWIStart>:
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    7172:	84 ea       	ldi	r24, 0xA4	; 164
    7174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(!(TWCR & (1<<TWINT)));
    7178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    717c:	87 ff       	sbrs	r24, 7
    717e:	fc cf       	rjmp	.-8      	; 0x7178 <TWIStart+0x6>
}
    7180:	08 95       	ret

00007182 <TWIWrite>:
    TWDR = u8data;
    7182:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT)|(1<<TWEN);
    7186:	84 e8       	ldi	r24, 0x84	; 132
    7188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(!(TWCR & (1<<TWINT)));
    718c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    7190:	87 ff       	sbrs	r24, 7
    7192:	fc cf       	rjmp	.-8      	; 0x718c <TWIWrite+0xa>
}
    7194:	08 95       	ret

00007196 <SetupCurrentLimit>:
    TWIStart();
    7196:	ed df       	rcall	.-38     	; 0x7172 <TWIStart>
    TWIWrite(SLA_W);
    7198:	8e e5       	ldi	r24, 0x5E	; 94
    719a:	f3 df       	rcall	.-26     	; 0x7182 <TWIWrite>
    TWIWrite(POT_STEPS);
    719c:	80 e0       	ldi	r24, 0x00	; 0
    719e:	f1 df       	rcall	.-30     	; 0x7182 <TWIWrite>
    71a0:	84 e9       	ldi	r24, 0x94	; 148
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    71a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    71a6:	08 95       	ret

000071a8 <LEDPulse>:
}
    71a8:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <LLEDPulse>
    LLEDPulse++;
    71ac:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <LLEDPulse+0x1>
    71b0:	2f 5f       	subi	r18, 0xFF	; 255
    71b2:	3f 4f       	sbci	r19, 0xFF	; 255
    71b4:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <LLEDPulse+0x1>
    71b8:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <LLEDPulse>
    uint8_t p = LLEDPulse >> 8;
    71bc:	83 2f       	mov	r24, r19
    if (p > 127)
    71be:	37 ff       	sbrs	r19, 7
    71c0:	02 c0       	rjmp	.+4      	; 0x71c6 <LEDPulse+0x1e>
        p = 254-p;
    71c2:	8e ef       	ldi	r24, 0xFE	; 254
    71c4:	83 1b       	sub	r24, r19
    p += p;
    71c6:	88 0f       	add	r24, r24
    if (((uint8_t)LLEDPulse) > p)
    71c8:	82 17       	cp	r24, r18
    71ca:	10 f4       	brcc	.+4      	; 0x71d0 <LEDPulse+0x28>
        L_LED_OFF();
    71cc:	47 98       	cbi	0x08, 7	; 8
    71ce:	08 95       	ret
        L_LED_ON();
    71d0:	47 9a       	sbi	0x08, 7	; 8
}
    71d2:	08 95       	ret

000071d4 <SetupHardware>:
    CPU_PRESCALE(0);
    71d4:	e1 e6       	ldi	r30, 0x61	; 97
    71d6:	f0 e0       	ldi	r31, 0x00	; 0
    71d8:	80 e8       	ldi	r24, 0x80	; 128
    71da:	80 83       	st	Z, r24
    71dc:	10 82       	st	Z, r1
    MCUCR = (1 << IVCE);
    71de:	81 e0       	ldi	r24, 0x01	; 1
    71e0:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1 << IVSEL);
    71e2:	82 e0       	ldi	r24, 0x02	; 2
    71e4:	85 bf       	out	0x35, r24	; 53
    LED_SETUP();
    71e6:	3f 9a       	sbi	0x07, 7	; 7
    71e8:	52 9a       	sbi	0x0a, 2	; 10
    71ea:	53 9a       	sbi	0x0a, 3	; 10
    L_LED_OFF();
    71ec:	47 98       	cbi	0x08, 7	; 8
    TX_LED_OFF();
    71ee:	5b 9a       	sbi	0x0b, 3	; 11
    RX_LED_OFF();
    71f0:	5a 9a       	sbi	0x0b, 2	; 11
    OCR1AH = 0;
    71f2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    OCR1AL = 250;
    71f6:	9a ef       	ldi	r25, 0xFA	; 250
    71f8:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    71fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    7200:	83 e0       	ldi	r24, 0x03	; 3
    7202:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    USB_Init();
    7206:	93 c3       	rjmp	.+1830   	; 0x792e <USB_Init>

00007208 <__vector_17>:
{
    7208:	1f 92       	push	r1
    720a:	1f b6       	in	r1, 0x3f	; 63
    720c:	1f 92       	push	r1
    720e:	11 24       	eor	r1, r1
    7210:	2f 93       	push	r18
    7212:	8f 93       	push	r24
    7214:	9f 93       	push	r25
    7216:	ef 93       	push	r30
    7218:	ff 93       	push	r31
    TCNT1H = 0;
    721a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    TCNT1L = 0;
    721e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    if (TxLEDPulse && !(--TxLEDPulse))
    7222:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <TxLEDPulse>
    7226:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <TxLEDPulse+0x1>
    722a:	00 97       	sbiw	r24, 0x00	; 0
    722c:	41 f0       	breq	.+16     	; 0x723e <__vector_17+0x36>
    722e:	01 97       	sbiw	r24, 0x01	; 1
    7230:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <TxLEDPulse+0x1>
    7234:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TxLEDPulse>
    7238:	89 2b       	or	r24, r25
    723a:	09 f4       	brne	.+2      	; 0x723e <__vector_17+0x36>
        TX_LED_OFF();
    723c:	5b 9a       	sbi	0x0b, 3	; 11
    if (RxLEDPulse && !(--RxLEDPulse))
    723e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <RxLEDPulse>
    7242:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <RxLEDPulse+0x1>
    7246:	00 97       	sbiw	r24, 0x00	; 0
    7248:	41 f0       	breq	.+16     	; 0x725a <__vector_17+0x52>
    724a:	01 97       	sbiw	r24, 0x01	; 1
    724c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <RxLEDPulse+0x1>
    7250:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <RxLEDPulse>
    7254:	89 2b       	or	r24, r25
    7256:	09 f4       	brne	.+2      	; 0x725a <__vector_17+0x52>
        RX_LED_OFF();
    7258:	5a 9a       	sbi	0x0b, 2	; 11
    if (pgm_read_word(0) != 0xFFFF)
    725a:	f0 e0       	ldi	r31, 0x00	; 0
    725c:	e0 e0       	ldi	r30, 0x00	; 0
    725e:	85 91       	lpm	r24, Z+
    7260:	94 91       	lpm	r25, Z
    7262:	01 96       	adiw	r24, 0x01	; 1
    7264:	49 f0       	breq	.+18     	; 0x7278 <__vector_17+0x70>
        Timeout++;
    7266:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
    726a:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
    726e:	01 96       	adiw	r24, 0x01	; 1
    7270:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
    7274:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
}
    7278:	ff 91       	pop	r31
    727a:	ef 91       	pop	r30
    727c:	9f 91       	pop	r25
    727e:	8f 91       	pop	r24
    7280:	2f 91       	pop	r18
    7282:	1f 90       	pop	r1
    7284:	1f be       	out	0x3f, r1	; 63
    7286:	1f 90       	pop	r1
    7288:	18 95       	reti

0000728a <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    728a:	42 e0       	ldi	r20, 0x02	; 2
    728c:	61 ec       	ldi	r22, 0xC1	; 193
    728e:	82 e0       	ldi	r24, 0x02	; 2
    7290:	e3 d2       	rcall	.+1478   	; 0x7858 <Endpoint_ConfigureEndpoint_Prv>
    7292:	42 e1       	ldi	r20, 0x12	; 18
    7294:	61 e8       	ldi	r22, 0x81	; 129
    7296:	83 e0       	ldi	r24, 0x03	; 3
    7298:	df d2       	rcall	.+1470   	; 0x7858 <Endpoint_ConfigureEndpoint_Prv>
    729a:	42 e1       	ldi	r20, 0x12	; 18
    729c:	60 e8       	ldi	r22, 0x80	; 128
    729e:	84 e0       	ldi	r24, 0x04	; 4
    72a0:	db c2       	rjmp	.+1462   	; 0x7858 <Endpoint_ConfigureEndpoint_Prv>

000072a2 <EVENT_USB_Device_ControlRequest>:
    if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    72a2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ControlRequest>
    72a6:	98 2f       	mov	r25, r24
    72a8:	9f 77       	andi	r25, 0x7F	; 127
    72aa:	91 32       	cpi	r25, 0x21	; 33
    72ac:	b9 f4       	brne	.+46     	; 0x72dc <EVENT_USB_Device_ControlRequest+0x3a>
    switch (USB_ControlRequest.bRequest)
    72ae:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <USB_ControlRequest+0x1>
    72b2:	90 32       	cpi	r25, 0x20	; 32
    72b4:	a1 f0       	breq	.+40     	; 0x72de <EVENT_USB_Device_ControlRequest+0x3c>
    72b6:	91 32       	cpi	r25, 0x21	; 33
    72b8:	89 f4       	brne	.+34     	; 0x72dc <EVENT_USB_Device_ControlRequest+0x3a>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    72ba:	81 3a       	cpi	r24, 0xA1	; 161
    72bc:	79 f4       	brne	.+30     	; 0x72dc <EVENT_USB_Device_ControlRequest+0x3a>
				UEINTX &= ~(1 << RXSTPI);
    72be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72c2:	87 7f       	andi	r24, 0xF7	; 247
    72c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72c8:	67 e0       	ldi	r22, 0x07	; 7
    72ca:	70 e0       	ldi	r23, 0x00	; 0
    72cc:	80 e0       	ldi	r24, 0x00	; 0
    72ce:	91 e0       	ldi	r25, 0x01	; 1
    72d0:	f4 d3       	rcall	.+2024   	; 0x7aba <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    72d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72d6:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    72dc:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    72de:	81 32       	cpi	r24, 0x21	; 33
    72e0:	e9 f7       	brne	.-6      	; 0x72dc <EVENT_USB_Device_ControlRequest+0x3a>
				UEINTX &= ~(1 << RXSTPI);
    72e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72e6:	87 7f       	andi	r24, 0xF7	; 247
    72e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72ec:	67 e0       	ldi	r22, 0x07	; 7
    72ee:	70 e0       	ldi	r23, 0x00	; 0
    72f0:	80 e0       	ldi	r24, 0x00	; 0
    72f2:	91 e0       	ldi	r25, 0x01	; 1
    72f4:	36 d4       	rcall	.+2156   	; 0x7b62 <Endpoint_Read_Control_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72fa:	8e 77       	andi	r24, 0x7E	; 126
    72fc:	ed cf       	rjmp	.-38     	; 0x72d8 <EVENT_USB_Device_ControlRequest+0x36>

000072fe <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    72fe:	4f 92       	push	r4
    7300:	5f 92       	push	r5
    7302:	6f 92       	push	r6
    7304:	7f 92       	push	r7
    7306:	8f 92       	push	r8
    7308:	9f 92       	push	r9
    730a:	af 92       	push	r10
    730c:	bf 92       	push	r11
    730e:	cf 92       	push	r12
    7310:	df 92       	push	r13
    7312:	ef 92       	push	r14
    7314:	ff 92       	push	r15
    7316:	0f 93       	push	r16
    7318:	1f 93       	push	r17
    731a:	cf 93       	push	r28
    731c:	df 93       	push	r29
					UENUM = EndpointNumber;
    731e:	84 e0       	ldi	r24, 0x04	; 4
    7320:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7324:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    /* Select the OUT endpoint */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* Check if endpoint has a command in it sent from the host */
    if (!(Endpoint_IsOUTReceived()))
    7328:	82 ff       	sbrs	r24, 2
    732a:	25 c2       	rjmp	.+1098   	; 0x7776 <CDC_Task+0x478>
      return;

    RX_LED_ON();
    732c:	5a 98       	cbi	0x0b, 2	; 11
    RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    732e:	84 e6       	ldi	r24, 0x64	; 100
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <RxLEDPulse+0x1>
    7336:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <RxLEDPulse>

    /* Read in the bootloader command (first byte sent from host) */
    uint8_t Command = FetchNextCommandByte();
    733a:	d4 de       	rcall	.-600    	; 0x70e4 <FetchNextCommandByte>
    733c:	c8 2f       	mov	r28, r24

    if (Command == 'E')
    733e:	85 34       	cpi	r24, 0x45	; 69
    7340:	51 f5       	brne	.+84     	; 0x7396 <CDC_Task+0x98>
    {
        /* We nearly run out the bootloader timeout clock,
        * leaving just a few hundred milliseconds so the
        * bootloder has time to respond and service any
        * subsequent requests */
        Timeout = TIMEOUT_PERIOD - 500;
    7342:	84 ef       	ldi	r24, 0xF4	; 244
    7344:	9f ef       	ldi	r25, 0xFF	; 255
    7346:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
    734a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>

        /* Re-enable RWW section - must be done here in case
         * user has disabled verification on upload.  */
        boot_rww_enable_safe();
    734e:	07 b6       	in	r0, 0x37	; 55
    7350:	00 fc       	sbrc	r0, 0
    7352:	fd cf       	rjmp	.-6      	; 0x734e <CDC_Task+0x50>
    7354:	f9 99       	sbic	0x1f, 1	; 31
    7356:	fe cf       	rjmp	.-4      	; 0x7354 <CDC_Task+0x56>
    7358:	81 e1       	ldi	r24, 0x11	; 17
    735a:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    735e:	e8 95       	spm
    else if (Command == 'T')
    {
        FetchNextCommandByte();

        // Send confirmation byte back to the host
        WriteNextResponseByte('\r');
    7360:	8d e0       	ldi	r24, 0x0D	; 13
    7362:	d7 de       	rcall	.-594    	; 0x7112 <WriteNextResponseByte>
					UENUM = EndpointNumber;
    7364:	83 e0       	ldi	r24, 0x03	; 3
    7366:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    736a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    736e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7372:	8e 77       	andi	r24, 0x7E	; 126
    7374:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

    /* Send the endpoint data to the host */
    Endpoint_ClearIN();

    /* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
    if (IsEndpointFull)
    7378:	95 ff       	sbrs	r25, 5
    737a:	f0 c1       	rjmp	.+992    	; 0x775c <CDC_Task+0x45e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    737c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

        Endpoint_ClearIN();
    }

    /* Wait until the data has been sent to the host */
    while (!(Endpoint_IsINReady()))
    7380:	80 ff       	sbrs	r24, 0
    7382:	f6 c1       	rjmp	.+1004   	; 0x7770 <CDC_Task+0x472>
					UENUM = EndpointNumber;
    7384:	84 e0       	ldi	r24, 0x04	; 4
    7386:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    738a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    738e:	8b 77       	andi	r24, 0x7B	; 123
    7390:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    7394:	f0 c1       	rjmp	.+992    	; 0x7776 <CDC_Task+0x478>
    else if (Command == 'T')
    7396:	84 35       	cpi	r24, 0x54	; 84
        FetchNextCommandByte();
    7398:	11 f4       	brne	.+4      	; 0x739e <CDC_Task+0xa0>
    739a:	a4 de       	rcall	.-696    	; 0x70e4 <FetchNextCommandByte>
    739c:	e1 cf       	rjmp	.-62     	; 0x7360 <CDC_Task+0x62>
    else if ((Command == 'L') || (Command == 'P'))
    739e:	8c 34       	cpi	r24, 0x4C	; 76
    73a0:	f9 f2       	breq	.-66     	; 0x7360 <CDC_Task+0x62>
    73a2:	80 35       	cpi	r24, 0x50	; 80
    73a4:	e9 f2       	breq	.-70     	; 0x7360 <CDC_Task+0x62>
    else if (Command == 't')
    73a6:	84 37       	cpi	r24, 0x74	; 116
        WriteNextResponseByte(0x44);
    73a8:	21 f4       	brne	.+8      	; 0x73b2 <CDC_Task+0xb4>
    73aa:	84 e4       	ldi	r24, 0x44	; 68
    73ac:	b2 de       	rcall	.-668    	; 0x7112 <WriteNextResponseByte>
        WriteNextResponseByte(0x00);
    73ae:	80 e0       	ldi	r24, 0x00	; 0
    73b0:	d8 cf       	rjmp	.-80     	; 0x7362 <CDC_Task+0x64>
        WriteNextResponseByte('Y');
    73b2:	89 e5       	ldi	r24, 0x59	; 89
    else if (Command == 'a')
    73b4:	c1 36       	cpi	r28, 0x61	; 97
    else if (Command == 'A')
    73b6:	a9 f2       	breq	.-86     	; 0x7362 <CDC_Task+0x64>
        CurrAddress   = (FetchNextCommandByte() << 9);
    73b8:	c1 34       	cpi	r28, 0x41	; 65
    73ba:	d1 f4       	brne	.+52     	; 0x73f0 <CDC_Task+0xf2>
    73bc:	93 de       	rcall	.-730    	; 0x70e4 <FetchNextCommandByte>
        CurrAddress  |= (FetchNextCommandByte() << 1);
    73be:	c8 2f       	mov	r28, r24
    73c0:	91 de       	rcall	.-734    	; 0x70e4 <FetchNextCommandByte>
        CurrAddress   = (FetchNextCommandByte() << 9);
    73c2:	2c 2f       	mov	r18, r28
    73c4:	30 e0       	ldi	r19, 0x00	; 0
    73c6:	32 2f       	mov	r19, r18
    73c8:	22 27       	eor	r18, r18
    73ca:	33 0f       	add	r19, r19
        CurrAddress  |= (FetchNextCommandByte() << 1);
    73cc:	90 e0       	ldi	r25, 0x00	; 0
    73ce:	88 0f       	add	r24, r24
    73d0:	99 1f       	adc	r25, r25
    73d2:	82 2b       	or	r24, r18
    73d4:	93 2b       	or	r25, r19
    73d6:	09 2e       	mov	r0, r25
    73d8:	00 0c       	add	r0, r0
    73da:	aa 0b       	sbc	r26, r26
    73dc:	bb 0b       	sbc	r27, r27
        CurrAddress += 2;
    73de:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <CurrAddress>
    73e2:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <CurrAddress+0x1>
    73e6:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <CurrAddress+0x2>
    73ea:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <CurrAddress+0x3>
        WriteNextResponseByte('\r');
    73ee:	b8 cf       	rjmp	.-144    	; 0x7360 <CDC_Task+0x62>
        WriteNextResponseByte('S');
    73f0:	83 e5       	ldi	r24, 0x53	; 83
    else if (Command == 'p')
    73f2:	c0 37       	cpi	r28, 0x70	; 112
    73f4:	09 f4       	brne	.+2      	; 0x73f8 <CDC_Task+0xfa>
    else if (Command == 'S')
    73f6:	b5 cf       	rjmp	.-150    	; 0x7362 <CDC_Task+0x64>
    73f8:	c3 35       	cpi	r28, 0x53	; 83
    73fa:	49 f4       	brne	.+18     	; 0x740e <CDC_Task+0x110>
    73fc:	cd e8       	ldi	r28, 0x8D	; 141
          WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    73fe:	d1 e0       	ldi	r29, 0x01	; 1
    7400:	89 91       	ld	r24, Y+
    7402:	87 de       	rcall	.-754    	; 0x7112 <WriteNextResponseByte>
        for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    7404:	21 e0       	ldi	r18, 0x01	; 1
    7406:	c4 39       	cpi	r28, 0x94	; 148
    7408:	d2 07       	cpc	r29, r18
    740a:	d1 f7       	brne	.-12     	; 0x7400 <CDC_Task+0x102>
    else if (Command == 'V')
    740c:	ab cf       	rjmp	.-170    	; 0x7364 <CDC_Task+0x66>
    740e:	c6 35       	cpi	r28, 0x56	; 86
        WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    7410:	21 f4       	brne	.+8      	; 0x741a <CDC_Task+0x11c>
    7412:	81 e3       	ldi	r24, 0x31	; 49
        WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    7414:	7e de       	rcall	.-772    	; 0x7112 <WriteNextResponseByte>
    7416:	80 e3       	ldi	r24, 0x30	; 48
    else if (Command == 's')
    7418:	a4 cf       	rjmp	.-184    	; 0x7362 <CDC_Task+0x64>
    741a:	c3 37       	cpi	r28, 0x73	; 115
        WriteNextResponseByte(AVR_SIGNATURE_3);
    741c:	31 f4       	brne	.+12     	; 0x742a <CDC_Task+0x12c>
    741e:	87 e8       	ldi	r24, 0x87	; 135
    7420:	78 de       	rcall	.-784    	; 0x7112 <WriteNextResponseByte>
        WriteNextResponseByte(AVR_SIGNATURE_2);
    7422:	85 e9       	ldi	r24, 0x95	; 149
    7424:	76 de       	rcall	.-788    	; 0x7112 <WriteNextResponseByte>
    7426:	8e e1       	ldi	r24, 0x1E	; 30
        WriteNextResponseByte(AVR_SIGNATURE_1);
    7428:	9c cf       	rjmp	.-200    	; 0x7362 <CDC_Task+0x64>
    742a:	c5 36       	cpi	r28, 0x65	; 101
    else if (Command == 'e')
    742c:	b9 f4       	brne	.+46     	; 0x745c <CDC_Task+0x15e>
    742e:	f0 e0       	ldi	r31, 0x00	; 0
    7430:	e0 e0       	ldi	r30, 0x00	; 0
    7432:	83 e0       	ldi	r24, 0x03	; 3
            boot_page_erase(CurrFlashAddress);
    7434:	95 e0       	ldi	r25, 0x05	; 5
            boot_page_write(CurrFlashAddress);
    7436:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
            boot_page_erase(CurrFlashAddress);
    743a:	e8 95       	spm
    743c:	07 b6       	in	r0, 0x37	; 55
            boot_spm_busy_wait();
    743e:	00 fc       	sbrc	r0, 0
    7440:	fd cf       	rjmp	.-6      	; 0x743c <CDC_Task+0x13e>
    7442:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
            boot_page_write(CurrFlashAddress);
    7446:	e8 95       	spm
    7448:	07 b6       	in	r0, 0x37	; 55
            boot_spm_busy_wait();
    744a:	00 fc       	sbrc	r0, 0
    744c:	fd cf       	rjmp	.-6      	; 0x7448 <CDC_Task+0x14a>
    744e:	e0 58       	subi	r30, 0x80	; 128
        for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    7450:	ff 4f       	sbci	r31, 0xFF	; 255
    7452:	e1 15       	cp	r30, r1
    7454:	20 e7       	ldi	r18, 0x70	; 112
    7456:	f2 07       	cpc	r31, r18
    7458:	71 f7       	brne	.-36     	; 0x7436 <CDC_Task+0x138>
    745a:	82 cf       	rjmp	.-252    	; 0x7360 <CDC_Task+0x62>
    745c:	89 e0       	ldi	r24, 0x09	; 9
        WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    745e:	e1 e0       	ldi	r30, 0x01	; 1
    7460:	f0 e0       	ldi	r31, 0x00	; 0
    7462:	c2 37       	cpi	r28, 0x72	; 114
    else if (Command == 'r')
    7464:	79 f0       	breq	.+30     	; 0x7484 <CDC_Task+0x186>
    7466:	89 e0       	ldi	r24, 0x09	; 9
        WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    7468:	f0 e0       	ldi	r31, 0x00	; 0
    746a:	e0 e0       	ldi	r30, 0x00	; 0
    746c:	c6 34       	cpi	r28, 0x46	; 70
    else if (Command == 'F')
    746e:	51 f0       	breq	.+20     	; 0x7484 <CDC_Task+0x186>
    7470:	89 e0       	ldi	r24, 0x09	; 9
        WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    7472:	e3 e0       	ldi	r30, 0x03	; 3
    7474:	f0 e0       	ldi	r31, 0x00	; 0
    7476:	ce 34       	cpi	r28, 0x4E	; 78
    else if (Command == 'N')
    7478:	29 f0       	breq	.+10     	; 0x7484 <CDC_Task+0x186>
    747a:	c1 35       	cpi	r28, 0x51	; 81
    else if (Command == 'Q')
    747c:	39 f4       	brne	.+14     	; 0x748c <CDC_Task+0x18e>
    747e:	89 e0       	ldi	r24, 0x09	; 9
        WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7480:	e2 e0       	ldi	r30, 0x02	; 2
    7482:	f0 e0       	ldi	r31, 0x00	; 0
    7484:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7488:	84 91       	lpm	r24, Z
    else if (Command == 'b')
    748a:	6b cf       	rjmp	.-298    	; 0x7362 <CDC_Task+0x64>
    748c:	c2 36       	cpi	r28, 0x62	; 98
        WriteNextResponseByte('Y');
    748e:	31 f4       	brne	.+12     	; 0x749c <CDC_Task+0x19e>
    7490:	89 e5       	ldi	r24, 0x59	; 89
    7492:	3f de       	rcall	.-898    	; 0x7112 <WriteNextResponseByte>
        WriteNextResponseByte(SPM_PAGESIZE >> 8);
    7494:	80 e0       	ldi	r24, 0x00	; 0
    7496:	3d de       	rcall	.-902    	; 0x7112 <WriteNextResponseByte>
        WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    7498:	80 e8       	ldi	r24, 0x80	; 128
    else if ((Command == 'B') || (Command == 'g'))
    749a:	63 cf       	rjmp	.-314    	; 0x7362 <CDC_Task+0x64>
    749c:	c2 34       	cpi	r28, 0x42	; 66
    749e:	19 f0       	breq	.+6      	; 0x74a6 <CDC_Task+0x1a8>
    74a0:	c7 36       	cpi	r28, 0x67	; 103
        Timeout = 0;
    74a2:	09 f0       	breq	.+2      	; 0x74a6 <CDC_Task+0x1a8>
    74a4:	cb c0       	rjmp	.+406    	; 0x763c <CDC_Task+0x33e>
    74a6:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__data_end+0x1>
    BlockSize  = (FetchNextCommandByte() << 8);
    74aa:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
    74ae:	1a de       	rcall	.-972    	; 0x70e4 <FetchNextCommandByte>
    BlockSize |=  FetchNextCommandByte();
    74b0:	18 2f       	mov	r17, r24
    74b2:	18 de       	rcall	.-976    	; 0x70e4 <FetchNextCommandByte>
    74b4:	08 2f       	mov	r16, r24
    MemoryType =  FetchNextCommandByte();
    74b6:	16 de       	rcall	.-980    	; 0x70e4 <FetchNextCommandByte>
    74b8:	d8 2f       	mov	r29, r24
    74ba:	8b eb       	ldi	r24, 0xBB	; 187
    if ((MemoryType != 'E') && (MemoryType != 'F'))
    74bc:	8d 0f       	add	r24, r29
    74be:	82 30       	cpi	r24, 0x02	; 2
    74c0:	10 f0       	brcs	.+4      	; 0x74c6 <CDC_Task+0x1c8>
    74c2:	8f e3       	ldi	r24, 0x3F	; 63
        WriteNextResponseByte('?');
    74c4:	4e cf       	rjmp	.-356    	; 0x7362 <CDC_Task+0x64>
    74c6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TIMSK1 = 0;
    74ca:	c7 36       	cpi	r28, 0x67	; 103
    if (Command == 'g')
    74cc:	09 f0       	breq	.+2      	; 0x74d0 <CDC_Task+0x1d2>
    74ce:	45 c0       	rjmp	.+138    	; 0x755a <CDC_Task+0x25c>
    74d0:	81 e1       	ldi	r24, 0x11	; 17
        boot_rww_enable();
    74d2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    74d6:	e8 95       	spm
    74d8:	c0 e0       	ldi	r28, 0x00	; 0
    bool     HighByte = false;
    74da:	bb 24       	eor	r11, r11
                HighByte = !HighByte;
    74dc:	b3 94       	inc	r11
    74de:	01 50       	subi	r16, 0x01	; 1
        while (BlockSize--)
    74e0:	11 09       	sbc	r17, r1
    74e2:	20 f4       	brcc	.+8      	; 0x74ec <CDC_Task+0x1ee>
    74e4:	82 e0       	ldi	r24, 0x02	; 2
    TIMSK1 = (1 << OCIE1A);
    74e6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    74ea:	3c cf       	rjmp	.-392    	; 0x7364 <CDC_Task+0x66>
    74ec:	c0 90 9c 01 	lds	r12, 0x019C	; 0x80019c <CurrAddress>
            if (MemoryType == 'F')
    74f0:	d0 90 9d 01 	lds	r13, 0x019D	; 0x80019d <CurrAddress+0x1>
    74f4:	e0 90 9e 01 	lds	r14, 0x019E	; 0x80019e <CurrAddress+0x2>
    74f8:	f0 90 9f 01 	lds	r15, 0x019F	; 0x80019f <CurrAddress+0x3>
    74fc:	d6 34       	cpi	r29, 0x46	; 70
    74fe:	b9 f4       	brne	.+46     	; 0x752e <CDC_Task+0x230>
                WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    7500:	ec 2f       	mov	r30, r28
    7502:	f0 e0       	ldi	r31, 0x00	; 0
    7504:	ec 29       	or	r30, r12
    7506:	fd 29       	or	r31, r13
    7508:	84 91       	lpm	r24, Z
    750a:	03 de       	rcall	.-1018   	; 0x7112 <WriteNextResponseByte>
    750c:	cc 23       	and	r28, r28
                if (HighByte)
    750e:	69 f0       	breq	.+26     	; 0x752a <CDC_Task+0x22c>
    7510:	82 e0       	ldi	r24, 0x02	; 2
                  CurrAddress += 2;
    7512:	c8 0e       	add	r12, r24
    7514:	d1 1c       	adc	r13, r1
    7516:	e1 1c       	adc	r14, r1
    7518:	f1 1c       	adc	r15, r1
    751a:	c0 92 9c 01 	sts	0x019C, r12	; 0x80019c <CurrAddress>
    751e:	d0 92 9d 01 	sts	0x019D, r13	; 0x80019d <CurrAddress+0x1>
    7522:	e0 92 9e 01 	sts	0x019E, r14	; 0x80019e <CurrAddress+0x2>
    7526:	f0 92 9f 01 	sts	0x019F, r15	; 0x80019f <CurrAddress+0x3>
                HighByte = !HighByte;
    752a:	cb 25       	eor	r28, r11
                WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    752c:	d8 cf       	rjmp	.-80     	; 0x74de <CDC_Task+0x1e0>
    752e:	d7 01       	movw	r26, r14
    7530:	c6 01       	movw	r24, r12
    7532:	b6 95       	lsr	r27
    7534:	a7 95       	ror	r26
    7536:	97 95       	ror	r25
    7538:	87 95       	ror	r24
    753a:	52 d4       	rcall	.+2212   	; 0x7de0 <eeprom_read_byte>
    753c:	ea dd       	rcall	.-1068   	; 0x7112 <WriteNextResponseByte>
    753e:	e2 e0       	ldi	r30, 0x02	; 2
                CurrAddress += 2;
    7540:	ce 0e       	add	r12, r30
    7542:	d1 1c       	adc	r13, r1
    7544:	e1 1c       	adc	r14, r1
    7546:	f1 1c       	adc	r15, r1
    7548:	c0 92 9c 01 	sts	0x019C, r12	; 0x80019c <CurrAddress>
    754c:	d0 92 9d 01 	sts	0x019D, r13	; 0x80019d <CurrAddress+0x1>
    7550:	e0 92 9e 01 	sts	0x019E, r14	; 0x80019e <CurrAddress+0x2>
    7554:	f0 92 9f 01 	sts	0x019F, r15	; 0x80019f <CurrAddress+0x3>
    7558:	c2 cf       	rjmp	.-124    	; 0x74de <CDC_Task+0x1e0>
    755a:	40 90 9c 01 	lds	r4, 0x019C	; 0x80019c <CurrAddress>
        uint32_t PageStartAddress = CurrAddress;
    755e:	50 90 9d 01 	lds	r5, 0x019D	; 0x80019d <CurrAddress+0x1>
    7562:	60 90 9e 01 	lds	r6, 0x019E	; 0x80019e <CurrAddress+0x2>
    7566:	70 90 9f 01 	lds	r7, 0x019F	; 0x80019f <CurrAddress+0x3>
    756a:	d6 34       	cpi	r29, 0x46	; 70
        if (MemoryType == 'F')
    756c:	41 f4       	brne	.+16     	; 0x757e <CDC_Task+0x280>
    756e:	83 e0       	ldi	r24, 0x03	; 3
            boot_page_erase(PageStartAddress);
    7570:	f2 01       	movw	r30, r4
    7572:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7576:	e8 95       	spm
    7578:	07 b6       	in	r0, 0x37	; 55
            boot_spm_busy_wait();
    757a:	00 fc       	sbrc	r0, 0
    757c:	fd cf       	rjmp	.-6      	; 0x7578 <CDC_Task+0x27a>
    757e:	c0 e0       	ldi	r28, 0x00	; 0
    7580:	f1 2c       	mov	r15, r1
                HighByte = !HighByte;
    7582:	ee 24       	eor	r14, r14
    7584:	e3 94       	inc	r14
    7586:	24 c0       	rjmp	.+72     	; 0x75d0 <CDC_Task+0x2d2>
            if (MemoryType == 'F')
    7588:	d6 34       	cpi	r29, 0x46	; 70
    758a:	09 f0       	breq	.+2      	; 0x758e <CDC_Task+0x290>
    758c:	34 c0       	rjmp	.+104    	; 0x75f6 <CDC_Task+0x2f8>
                if (HighByte)
    758e:	ff 20       	and	r15, r15
    7590:	79 f1       	breq	.+94     	; 0x75f0 <CDC_Task+0x2f2>
                    boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    7592:	80 90 9c 01 	lds	r8, 0x019C	; 0x80019c <CurrAddress>
    7596:	90 90 9d 01 	lds	r9, 0x019D	; 0x80019d <CurrAddress+0x1>
    759a:	a0 90 9e 01 	lds	r10, 0x019E	; 0x80019e <CurrAddress+0x2>
    759e:	b0 90 9f 01 	lds	r11, 0x019F	; 0x80019f <CurrAddress+0x3>
    75a2:	a0 dd       	rcall	.-1216   	; 0x70e4 <FetchNextCommandByte>
    75a4:	98 2f       	mov	r25, r24
    75a6:	8c 2f       	mov	r24, r28
    75a8:	f4 01       	movw	r30, r8
    75aa:	0c 01       	movw	r0, r24
    75ac:	e0 92 57 00 	sts	0x0057, r14	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    75b0:	e8 95       	spm
    75b2:	11 24       	eor	r1, r1
    75b4:	f2 e0       	ldi	r31, 0x02	; 2
                    CurrAddress += 2;
    75b6:	8f 0e       	add	r8, r31
    75b8:	91 1c       	adc	r9, r1
    75ba:	a1 1c       	adc	r10, r1
    75bc:	b1 1c       	adc	r11, r1
    75be:	80 92 9c 01 	sts	0x019C, r8	; 0x80019c <CurrAddress>
    75c2:	90 92 9d 01 	sts	0x019D, r9	; 0x80019d <CurrAddress+0x1>
    75c6:	a0 92 9e 01 	sts	0x019E, r10	; 0x80019e <CurrAddress+0x2>
    75ca:	b0 92 9f 01 	sts	0x019F, r11	; 0x80019f <CurrAddress+0x3>
        while (BlockSize--)
    75ce:	fe 24       	eor	r15, r14
    75d0:	01 50       	subi	r16, 0x01	; 1
        if (MemoryType == 'F')
    75d2:	11 09       	sbc	r17, r1
    75d4:	c8 f6       	brcc	.-78     	; 0x7588 <CDC_Task+0x28a>
            boot_page_write(PageStartAddress);
    75d6:	d6 34       	cpi	r29, 0x46	; 70
    75d8:	41 f4       	brne	.+16     	; 0x75ea <CDC_Task+0x2ec>
    75da:	85 e0       	ldi	r24, 0x05	; 5
    75dc:	f2 01       	movw	r30, r4
    75de:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
            boot_spm_busy_wait();
    75e2:	e8 95       	spm
    75e4:	07 b6       	in	r0, 0x37	; 55
        WriteNextResponseByte('\r');
    75e6:	00 fc       	sbrc	r0, 0
    75e8:	fd cf       	rjmp	.-6      	; 0x75e4 <CDC_Task+0x2e6>
    75ea:	8d e0       	ldi	r24, 0x0D	; 13
                    LowByte = FetchNextCommandByte();
    75ec:	92 dd       	rcall	.-1244   	; 0x7112 <WriteNextResponseByte>
    75ee:	7a cf       	rjmp	.-268    	; 0x74e4 <CDC_Task+0x1e6>
    75f0:	79 dd       	rcall	.-1294   	; 0x70e4 <FetchNextCommandByte>
    75f2:	c8 2f       	mov	r28, r24
                eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75f4:	ec cf       	rjmp	.-40     	; 0x75ce <CDC_Task+0x2d0>
    75f6:	76 dd       	rcall	.-1300   	; 0x70e4 <FetchNextCommandByte>
    75f8:	68 2f       	mov	r22, r24
    75fa:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <CurrAddress>
    75fe:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <CurrAddress+0x1>
    7602:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <CurrAddress+0x2>
    7606:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <CurrAddress+0x3>
    760a:	b6 95       	lsr	r27
    760c:	a7 95       	ror	r26
    760e:	97 95       	ror	r25
    7610:	87 95       	ror	r24
    7612:	ee d3       	rcall	.+2012   	; 0x7df0 <eeprom_write_byte>
    7614:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <CurrAddress>
                CurrAddress += 2;
    7618:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <CurrAddress+0x1>
    761c:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <CurrAddress+0x2>
    7620:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <CurrAddress+0x3>
    7624:	02 96       	adiw	r24, 0x02	; 2
    7626:	a1 1d       	adc	r26, r1
    7628:	b1 1d       	adc	r27, r1
    762a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <CurrAddress>
    762e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <CurrAddress+0x1>
    7632:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <CurrAddress+0x2>
    7636:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <CurrAddress+0x3>
    763a:	ca cf       	rjmp	.-108    	; 0x75d0 <CDC_Task+0x2d2>
    else if (Command == 'C')
    763c:	c3 34       	cpi	r28, 0x43	; 67
    763e:	71 f4       	brne	.+28     	; 0x765c <CDC_Task+0x35e>
        boot_page_fill(CurrAddress, FetchNextCommandByte());
    7640:	c0 91 9c 01 	lds	r28, 0x019C	; 0x80019c <CurrAddress>
    7644:	d0 91 9d 01 	lds	r29, 0x019D	; 0x80019d <CurrAddress+0x1>
    7648:	4d dd       	rcall	.-1382   	; 0x70e4 <FetchNextCommandByte>
    764a:	90 e0       	ldi	r25, 0x00	; 0
    764c:	21 e0       	ldi	r18, 0x01	; 1
    764e:	fe 01       	movw	r30, r28
    7650:	0c 01       	movw	r0, r24
    7652:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7656:	e8 95       	spm
    7658:	11 24       	eor	r1, r1
        WriteNextResponseByte('\r');
    765a:	82 ce       	rjmp	.-764    	; 0x7360 <CDC_Task+0x62>
    else if (Command == 'c')
    765c:	c3 36       	cpi	r28, 0x63	; 99
    765e:	01 f5       	brne	.+64     	; 0x76a0 <CDC_Task+0x3a2>
        boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    7660:	c0 90 9c 01 	lds	r12, 0x019C	; 0x80019c <CurrAddress>
    7664:	d0 90 9d 01 	lds	r13, 0x019D	; 0x80019d <CurrAddress+0x1>
    7668:	e0 90 9e 01 	lds	r14, 0x019E	; 0x80019e <CurrAddress+0x2>
    766c:	f0 90 9f 01 	lds	r15, 0x019F	; 0x80019f <CurrAddress+0x3>
    7670:	39 dd       	rcall	.-1422   	; 0x70e4 <FetchNextCommandByte>
    7672:	f6 01       	movw	r30, r12
    7674:	e1 60       	ori	r30, 0x01	; 1
    7676:	90 e0       	ldi	r25, 0x00	; 0
    7678:	21 e0       	ldi	r18, 0x01	; 1
    767a:	0c 01       	movw	r0, r24
    767c:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7680:	e8 95       	spm
    7682:	11 24       	eor	r1, r1
    7684:	f2 e0       	ldi	r31, 0x02	; 2
        CurrAddress += 2;
    7686:	cf 0e       	add	r12, r31
    7688:	d1 1c       	adc	r13, r1
    768a:	e1 1c       	adc	r14, r1
    768c:	f1 1c       	adc	r15, r1
    768e:	c0 92 9c 01 	sts	0x019C, r12	; 0x80019c <CurrAddress>
    7692:	d0 92 9d 01 	sts	0x019D, r13	; 0x80019d <CurrAddress+0x1>
    7696:	e0 92 9e 01 	sts	0x019E, r14	; 0x80019e <CurrAddress+0x2>
    769a:	f0 92 9f 01 	sts	0x019F, r15	; 0x80019f <CurrAddress+0x3>
        WriteNextResponseByte('\r');
    769e:	60 ce       	rjmp	.-832    	; 0x7360 <CDC_Task+0x62>
    else if (Command == 'm')
    76a0:	cd 36       	cpi	r28, 0x6D	; 109
    76a2:	61 f4       	brne	.+24     	; 0x76bc <CDC_Task+0x3be>
        boot_page_write(CurrAddress);
    76a4:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <CurrAddress>
    76a8:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <CurrAddress+0x1>
    76ac:	85 e0       	ldi	r24, 0x05	; 5
    76ae:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
        boot_spm_busy_wait();
    76b2:	e8 95       	spm
    76b4:	07 b6       	in	r0, 0x37	; 55
    76b6:	00 fc       	sbrc	r0, 0
    76b8:	fd cf       	rjmp	.-6      	; 0x76b4 <CDC_Task+0x3b6>
    else if (Command == 'R')
    76ba:	52 ce       	rjmp	.-860    	; 0x7360 <CDC_Task+0x62>
    76bc:	c2 35       	cpi	r28, 0x52	; 82
        uint16_t ProgramWord = pgm_read_word(CurrAddress);
    76be:	51 f4       	brne	.+20     	; 0x76d4 <CDC_Task+0x3d6>
    76c0:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <CurrAddress>
    76c4:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <CurrAddress+0x1>
        WriteNextResponseByte(ProgramWord >> 8);
    76c8:	c5 91       	lpm	r28, Z+
    76ca:	d4 91       	lpm	r29, Z
    76cc:	8d 2f       	mov	r24, r29
        WriteNextResponseByte(ProgramWord & 0xFF);
    76ce:	21 dd       	rcall	.-1470   	; 0x7112 <WriteNextResponseByte>
    76d0:	8c 2f       	mov	r24, r28
    else if (Command == 'D')
    76d2:	47 ce       	rjmp	.-882    	; 0x7362 <CDC_Task+0x64>
    76d4:	c4 34       	cpi	r28, 0x44	; 68
        eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    76d6:	d9 f4       	brne	.+54     	; 0x770e <CDC_Task+0x410>
    76d8:	05 dd       	rcall	.-1526   	; 0x70e4 <FetchNextCommandByte>
    76da:	68 2f       	mov	r22, r24
    76dc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <CurrAddress>
    76e0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <CurrAddress+0x1>
    76e4:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <CurrAddress+0x2>
    76e8:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <CurrAddress+0x3>
    76ec:	b6 95       	lsr	r27
    76ee:	a7 95       	ror	r26
    76f0:	97 95       	ror	r25
    76f2:	87 95       	ror	r24
    76f4:	7d d3       	rcall	.+1786   	; 0x7df0 <eeprom_write_byte>
    76f6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <CurrAddress>
        CurrAddress += 2;
    76fa:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <CurrAddress+0x1>
    76fe:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <CurrAddress+0x2>
    7702:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <CurrAddress+0x3>
    7706:	02 96       	adiw	r24, 0x02	; 2
    7708:	a1 1d       	adc	r26, r1
    770a:	b1 1d       	adc	r27, r1
    else if (Command == 'd')
    770c:	68 ce       	rjmp	.-816    	; 0x73de <CDC_Task+0xe0>
    770e:	c4 36       	cpi	r28, 0x64	; 100
        WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7710:	f1 f4       	brne	.+60     	; 0x774e <CDC_Task+0x450>
    7712:	c0 90 9c 01 	lds	r12, 0x019C	; 0x80019c <CurrAddress>
    7716:	d0 90 9d 01 	lds	r13, 0x019D	; 0x80019d <CurrAddress+0x1>
    771a:	e0 90 9e 01 	lds	r14, 0x019E	; 0x80019e <CurrAddress+0x2>
    771e:	f0 90 9f 01 	lds	r15, 0x019F	; 0x80019f <CurrAddress+0x3>
    7722:	d7 01       	movw	r26, r14
    7724:	c6 01       	movw	r24, r12
    7726:	b6 95       	lsr	r27
    7728:	a7 95       	ror	r26
    772a:	97 95       	ror	r25
    772c:	87 95       	ror	r24
    772e:	58 d3       	rcall	.+1712   	; 0x7de0 <eeprom_read_byte>
    7730:	f0 dc       	rcall	.-1568   	; 0x7112 <WriteNextResponseByte>
    7732:	22 e0       	ldi	r18, 0x02	; 2
        CurrAddress += 2;
    7734:	c2 0e       	add	r12, r18
    7736:	d1 1c       	adc	r13, r1
    7738:	e1 1c       	adc	r14, r1
    773a:	f1 1c       	adc	r15, r1
    773c:	c0 92 9c 01 	sts	0x019C, r12	; 0x80019c <CurrAddress>
    7740:	d0 92 9d 01 	sts	0x019D, r13	; 0x80019d <CurrAddress+0x1>
    7744:	e0 92 9e 01 	sts	0x019E, r14	; 0x80019e <CurrAddress+0x2>
    7748:	f0 92 9f 01 	sts	0x019F, r15	; 0x80019f <CurrAddress+0x3>
    774c:	0b ce       	rjmp	.-1002   	; 0x7364 <CDC_Task+0x66>
    774e:	cb 31       	cpi	r28, 0x1B	; 27
    else if (Command != 27)
    7750:	09 f4       	brne	.+2      	; 0x7754 <CDC_Task+0x456>
    7752:	08 ce       	rjmp	.-1008   	; 0x7364 <CDC_Task+0x66>
    7754:	b6 ce       	rjmp	.-660    	; 0x74c2 <CDC_Task+0x1c4>
    7756:	8e b3       	in	r24, 0x1e	; 30
            if (USB_DeviceState == DEVICE_STATE_Unattached)
    7758:	88 23       	and	r24, r24
    775a:	69 f0       	breq	.+26     	; 0x7776 <CDC_Task+0x478>
    775c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7760:	80 ff       	sbrs	r24, 0
        while (!(Endpoint_IsINReady()))
    7762:	f9 cf       	rjmp	.-14     	; 0x7756 <CDC_Task+0x458>
    7764:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7768:	8e 77       	andi	r24, 0x7E	; 126
    776a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    776e:	06 ce       	rjmp	.-1012   	; 0x737c <CDC_Task+0x7e>
			}
    7770:	8e b3       	in	r24, 0x1e	; 30
    {
        if (USB_DeviceState == DEVICE_STATE_Unattached)
    7772:	81 11       	cpse	r24, r1
    7774:	03 ce       	rjmp	.-1018   	; 0x737c <CDC_Task+0x7e>
    7776:	df 91       	pop	r29
    /* Select the OUT endpoint */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* Acknowledge the command from the host */
    Endpoint_ClearOUT();
}
    7778:	cf 91       	pop	r28
    777a:	1f 91       	pop	r17
    777c:	0f 91       	pop	r16
    777e:	ff 90       	pop	r15
    7780:	ef 90       	pop	r14
    7782:	df 90       	pop	r13
    7784:	cf 90       	pop	r12
    7786:	bf 90       	pop	r11
    7788:	af 90       	pop	r10
    778a:	9f 90       	pop	r9
    778c:	8f 90       	pop	r8
    778e:	7f 90       	pop	r7
    7790:	6f 90       	pop	r6
    7792:	5f 90       	pop	r5
    7794:	4f 90       	pop	r4
    7796:	08 95       	ret

00007798 <main>:
    7798:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    779a:	0f b6       	in	r0, 0x3f	; 63
    779c:	f8 94       	cli
    779e:	a8 95       	wdr
    77a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    77a4:	88 61       	ori	r24, 0x18	; 24
    77a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    77aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    77ae:	0f be       	out	0x3f, r0	; 63
    BootMode_Init();
    77b0:	6a 98       	cbi	0x0d, 2	; 13
    77b2:	72 9a       	sbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    77b4:	8f e1       	ldi	r24, 0x1F	; 31
    77b6:	9e e4       	ldi	r25, 0x4E	; 78
    77b8:	01 97       	sbiw	r24, 0x01	; 1
    77ba:	f1 f7       	brne	.-4      	; 0x77b8 <main+0x20>
    77bc:	00 c0       	rjmp	.+0      	; 0x77be <main+0x26>
    77be:	00 00       	nop
    if ((isBootMode() || (pgm_read_word(0) == 0xFFFF)))
    77c0:	62 9b       	sbis	0x0c, 2	; 12
    77c2:	06 c0       	rjmp	.+12     	; 0x77d0 <main+0x38>
    77c4:	f0 e0       	ldi	r31, 0x00	; 0
    77c6:	e0 e0       	ldi	r30, 0x00	; 0
    77c8:	85 91       	lpm	r24, Z+
    77ca:	94 91       	lpm	r25, Z
    77cc:	01 96       	adiw	r24, 0x01	; 1
    77ce:	21 f4       	brne	.+8      	; 0x77d8 <main+0x40>
        SetupHardware();
    77d0:	01 dd       	rcall	.-1534   	; 0x71d4 <SetupHardware>
        sei();
    77d2:	78 94       	sei
        while(isBootMode()){
    77d4:	62 9b       	sbis	0x0c, 2	; 12
    77d6:	0a c0       	rjmp	.+20     	; 0x77ec <main+0x54>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    77d8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    77dc:	81 60       	ori	r24, 0x01	; 1
    77de:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    StartSketch();
    77e2:	d9 dc       	rcall	.-1614   	; 0x7196 <SetupCurrentLimit>
    77e4:	b4 dc       	rcall	.-1688   	; 0x714e <StartSketch>
}
    77e6:	90 e0       	ldi	r25, 0x00	; 0
            CDC_Task();
    77e8:	80 e0       	ldi	r24, 0x00	; 0
    77ea:	08 95       	ret
            USB_USBTask();
    77ec:	88 dd       	rcall	.-1264   	; 0x72fe <CDC_Task>
    77ee:	e1 d2       	rcall	.+1474   	; 0x7db2 <USB_USBTask>
            LEDPulse();
    77f0:	db dc       	rcall	.-1610   	; 0x71a8 <LEDPulse>
    77f2:	f0 cf       	rjmp	.-32     	; 0x77d4 <main+0x3c>

000077f4 <CALLBACK_USB_GetDescriptor>:
    77f4:	fa 01       	movw	r30, r20
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    77f6:	29 2f       	mov	r18, r25
    77f8:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    77fa:	22 30       	cpi	r18, 0x02	; 2
    77fc:	31 05       	cpc	r19, r1
    77fe:	c1 f0       	breq	.+48     	; 0x7830 <CALLBACK_USB_GetDescriptor+0x3c>
    7800:	23 30       	cpi	r18, 0x03	; 3
    7802:	31 05       	cpc	r19, r1
    7804:	51 f0       	breq	.+20     	; 0x781a <CALLBACK_USB_GetDescriptor+0x26>
    7806:	21 30       	cpi	r18, 0x01	; 1
    7808:	31 05       	cpc	r19, r1
    780a:	09 f5       	brne	.+66     	; 0x784e <CALLBACK_USB_GetDescriptor+0x5a>
    780c:	82 e1       	ldi	r24, 0x12	; 18
    780e:	90 e0       	ldi	r25, 0x00	; 0
    7810:	2b e7       	ldi	r18, 0x7B	; 123
    7812:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    7814:	31 83       	std	Z+1, r19	; 0x01
    7816:	20 83       	st	Z, r18
	return Size;
}
    7818:	08 95       	ret
			if (!(DescriptorNumber))
    781a:	88 23       	and	r24, r24
    781c:	71 f0       	breq	.+28     	; 0x783a <CALLBACK_USB_GetDescriptor+0x46>
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    781e:	81 30       	cpi	r24, 0x01	; 1
    7820:	89 f0       	breq	.+34     	; 0x7844 <CALLBACK_USB_GetDescriptor+0x50>
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    7822:	82 30       	cpi	r24, 0x02	; 2
    7824:	a1 f4       	brne	.+40     	; 0x784e <CALLBACK_USB_GetDescriptor+0x5a>
				Size	= ManufNameString.Header.Size;
    7826:	86 e2       	ldi	r24, 0x26	; 38
    7828:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufNameString;
    782a:	27 e0       	ldi	r18, 0x07	; 7
    782c:	31 e0       	ldi	r19, 0x01	; 1
    782e:	f2 cf       	rjmp	.-28     	; 0x7814 <CALLBACK_USB_GetDescriptor+0x20>
			Size    = sizeof(USB_Descriptor_Configuration_t);
    7830:	8e e3       	ldi	r24, 0x3E	; 62
    7832:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
    7834:	2d e3       	ldi	r18, 0x3D	; 61
    7836:	31 e0       	ldi	r19, 0x01	; 1
    7838:	ed cf       	rjmp	.-38     	; 0x7814 <CALLBACK_USB_GetDescriptor+0x20>
				Size    = LanguageString.Header.Size;
    783a:	84 e0       	ldi	r24, 0x04	; 4
    783c:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
    783e:	29 e3       	ldi	r18, 0x39	; 57
    7840:	31 e0       	ldi	r19, 0x01	; 1
    7842:	e8 cf       	rjmp	.-48     	; 0x7814 <CALLBACK_USB_GetDescriptor+0x20>
				Size    = ProductString.Header.Size;
    7844:	8c e1       	ldi	r24, 0x1C	; 28
    7846:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ProductString;
    7848:	2b e1       	ldi	r18, 0x1B	; 27
    784a:	31 e0       	ldi	r19, 0x01	; 1
    784c:	e3 cf       	rjmp	.-58     	; 0x7814 <CALLBACK_USB_GetDescriptor+0x20>
	uint16_t    Size    = NO_DESCRIPTOR;
    784e:	90 e0       	ldi	r25, 0x00	; 0
    7850:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
    7852:	30 e0       	ldi	r19, 0x00	; 0
    7854:	20 e0       	ldi	r18, 0x00	; 0
    7856:	de cf       	rjmp	.-68     	; 0x7814 <CALLBACK_USB_GetDescriptor+0x20>

00007858 <Endpoint_ConfigureEndpoint_Prv>:
					UENUM = EndpointNumber;
    7858:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << EPEN);
    785c:	eb ee       	ldi	r30, 0xEB	; 235
    785e:	f0 e0       	ldi	r31, 0x00	; 0
    7860:	80 81       	ld	r24, Z
    7862:	81 60       	ori	r24, 0x01	; 1
    7864:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    7866:	ed ee       	ldi	r30, 0xED	; 237
    7868:	f0 e0       	ldi	r31, 0x00	; 0
    786a:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    786c:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	UECFG1X = UECFG1XData;
    7870:	40 83       	st	Z, r20
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    7872:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    7876:	88 1f       	adc	r24, r24
    7878:	88 27       	eor	r24, r24
    787a:	88 1f       	adc	r24, r24
    787c:	08 95       	ret

0000787e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    787e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ControlRequest>
    7882:	87 ff       	sbrs	r24, 7
    7884:	11 c0       	rjmp	.+34     	; 0x78a8 <Endpoint_ClearStatusStage+0x2a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7886:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    788a:	82 ff       	sbrs	r24, 2
    788c:	06 c0       	rjmp	.+12     	; 0x789a <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    788e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7892:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7894:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    7898:	03 c0       	rjmp	.+6      	; 0x78a0 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    789a:	8e b3       	in	r24, 0x1e	; 30
    789c:	81 11       	cpse	r24, r1
    789e:	f3 cf       	rjmp	.-26     	; 0x7886 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    78a0:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78a2:	8e b3       	in	r24, 0x1e	; 30
    78a4:	88 23       	and	r24, r24
    78a6:	e1 f3       	breq	.-8      	; 0x78a0 <Endpoint_ClearStatusStage+0x22>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    78a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    78ac:	80 ff       	sbrs	r24, 0
    78ae:	f9 cf       	rjmp	.-14     	; 0x78a2 <Endpoint_ClearStatusStage+0x24>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    78b4:	8e 77       	andi	r24, 0x7E	; 126
    78b6:	ee cf       	rjmp	.-36     	; 0x7894 <Endpoint_ClearStatusStage+0x16>

000078b8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    78b8:	0f 93       	push	r16
    78ba:	1f 93       	push	r17
    78bc:	cf 93       	push	r28
    78be:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    78c0:	41 d0       	rcall	.+130    	; 0x7944 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    78c2:	48 d0       	rcall	.+144    	; 0x7954 <USB_INT_ClearAllInterrupts>
    78c4:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    78c6:	d0 e0       	ldi	r29, 0x00	; 0
    78c8:	88 81       	ld	r24, Y
    78ca:	8f 77       	andi	r24, 0x7F	; 127
    78cc:	88 83       	st	Y, r24
    78ce:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    78d0:	80 68       	ori	r24, 0x80	; 128
    78d2:	88 83       	st	Y, r24
    78d4:	88 81       	ld	r24, Y
				USBCON  &= ~(1 << FRZCLK);
    78d6:	8f 7d       	andi	r24, 0xDF	; 223
    78d8:	88 83       	st	Y, r24
    78da:	19 bc       	out	0x29, r1	; 41
				PLLCSR = 0;
    78dc:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    78de:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    78e2:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    78e4:	10 e0       	ldi	r17, 0x00	; 0
    78e6:	f8 01       	movw	r30, r16
    78e8:	80 81       	ld	r24, Z
    78ea:	8b 7f       	andi	r24, 0xFB	; 251
    78ec:	80 83       	st	Z, r24
    78ee:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    78f0:	81 60       	ori	r24, 0x01	; 1
    78f2:	88 83       	st	Y, r24
    78f4:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    78f6:	60 e0       	ldi	r22, 0x00	; 0
    78f8:	80 e0       	ldi	r24, 0x00	; 0
    78fa:	ae df       	rcall	.-164    	; 0x7858 <Endpoint_ConfigureEndpoint_Prv>
    78fc:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    78fe:	f0 e0       	ldi	r31, 0x00	; 0
    7900:	80 81       	ld	r24, Z
    7902:	8e 7f       	andi	r24, 0xFE	; 254
    7904:	80 83       	st	Z, r24
    7906:	e2 ee       	ldi	r30, 0xE2	; 226
						UDIEN  |= (1 << SUSPE);
    7908:	f0 e0       	ldi	r31, 0x00	; 0
    790a:	80 81       	ld	r24, Z
    790c:	81 60       	ori	r24, 0x01	; 1
    790e:	80 83       	st	Z, r24
    7910:	80 81       	ld	r24, Z
						UDIEN  |= (1 << EORSTE);
    7912:	88 60       	ori	r24, 0x08	; 8
    7914:	80 83       	st	Z, r24
    7916:	f8 01       	movw	r30, r16
				UDCON  &= ~(1 << DETACH);
    7918:	80 81       	ld	r24, Z
    791a:	8e 7f       	andi	r24, 0xFE	; 254
    791c:	80 83       	st	Z, r24
    791e:	88 81       	ld	r24, Y
				USBCON  |=  (1 << OTGPADE);
    7920:	80 61       	ori	r24, 0x10	; 16
    7922:	88 83       	st	Y, r24
    7924:	df 91       	pop	r29
}
    7926:	cf 91       	pop	r28
    7928:	1f 91       	pop	r17
    792a:	0f 91       	pop	r16
    792c:	08 95       	ret

0000792e <USB_Init>:
    792e:	e7 ed       	ldi	r30, 0xD7	; 215
				UHWCON  |=  (1 << UVREGE);
    7930:	f0 e0       	ldi	r31, 0x00	; 0
    7932:	80 81       	ld	r24, Z
    7934:	81 60       	ori	r24, 0x01	; 1
    7936:	80 83       	st	Z, r24
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    7938:	8a e4       	ldi	r24, 0x4A	; 74
    793a:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    793c:	81 e0       	ldi	r24, 0x01	; 1
    793e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <USB_IsInitialized>
	USB_ResetInterface();
    7942:	ba cf       	rjmp	.-140    	; 0x78b8 <USB_ResetInterface>

00007944 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7944:	e8 ed       	ldi	r30, 0xD8	; 216
    7946:	f0 e0       	ldi	r31, 0x00	; 0
    7948:	80 81       	ld	r24, Z
    794a:	8e 7f       	andi	r24, 0xFE	; 254
    794c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    794e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    7952:	08 95       	ret

00007954 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7954:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7958:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    795c:	08 95       	ret

0000795e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    795e:	1f 92       	push	r1
    7960:	0f 92       	push	r0
    7962:	0f b6       	in	r0, 0x3f	; 63
    7964:	0f 92       	push	r0
    7966:	11 24       	eor	r1, r1
    7968:	2f 93       	push	r18
    796a:	3f 93       	push	r19
    796c:	4f 93       	push	r20
    796e:	5f 93       	push	r21
    7970:	6f 93       	push	r22
    7972:	7f 93       	push	r23
    7974:	8f 93       	push	r24
    7976:	9f 93       	push	r25
    7978:	af 93       	push	r26
    797a:	bf 93       	push	r27
    797c:	ef 93       	push	r30
    797e:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7980:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7984:	80 ff       	sbrs	r24, 0
    7986:	16 c0       	rjmp	.+44     	; 0x79b4 <__vector_10+0x56>
						return (USBCON & (1 << VBUSTE));
    7988:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    798c:	80 ff       	sbrs	r24, 0
    798e:	12 c0       	rjmp	.+36     	; 0x79b4 <__vector_10+0x56>
						USBINT &= ~(1 << VBUSTI);
    7990:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    7994:	8e 7f       	andi	r24, 0xFE	; 254
    7996:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    799a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    799e:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    79a0:	80 ff       	sbrs	r24, 0
    79a2:	4b c0       	rjmp	.+150    	; 0x7a3a <__vector_10+0xdc>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    79a4:	82 e0       	ldi	r24, 0x02	; 2
    79a6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    79a8:	09 b4       	in	r0, 0x29	; 41
    79aa:	00 fe       	sbrs	r0, 0
    79ac:	fd cf       	rjmp	.-6      	; 0x79a8 <__vector_10+0x4a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    79ae:	81 e0       	ldi	r24, 0x01	; 1
    79b0:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    79b2:	fe d1       	rcall	.+1020   	; 0x7db0 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    79b4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    79b8:	80 ff       	sbrs	r24, 0
    79ba:	17 c0       	rjmp	.+46     	; 0x79ea <__vector_10+0x8c>
						return (UDIEN  & (1 << SUSPE));
    79bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79c0:	80 ff       	sbrs	r24, 0
    79c2:	13 c0       	rjmp	.+38     	; 0x79ea <__vector_10+0x8c>
						UDIEN  &= ~(1 << SUSPE);
    79c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79c8:	8e 7f       	andi	r24, 0xFE	; 254
    79ca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    79ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79d2:	80 61       	ori	r24, 0x10	; 16
    79d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    79d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    79dc:	80 62       	ori	r24, 0x20	; 32
    79de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    79e2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    79e4:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    79e6:	8e bb       	out	0x1e, r24	; 30
    79e8:	e3 d1       	rcall	.+966    	; 0x7db0 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    79ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    79ee:	84 ff       	sbrs	r24, 4
    79f0:	2e c0       	rjmp	.+92     	; 0x7a4e <__vector_10+0xf0>
						return (UDIEN  & (1 << WAKEUPE));
    79f2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79f6:	84 ff       	sbrs	r24, 4
    79f8:	2a c0       	rjmp	.+84     	; 0x7a4e <__vector_10+0xf0>
				PLLCSR = USB_PLL_PSC;
    79fa:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    79fc:	82 e0       	ldi	r24, 0x02	; 2
    79fe:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7a00:	09 b4       	in	r0, 0x29	; 41
    7a02:	00 fe       	sbrs	r0, 0
    7a04:	fd cf       	rjmp	.-6      	; 0x7a00 <__vector_10+0xa2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7a06:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a0a:	8f 7d       	andi	r24, 0xDF	; 223
    7a0c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    7a10:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a14:	8f 7e       	andi	r24, 0xEF	; 239
    7a16:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    7a1a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a1e:	8f 7e       	andi	r24, 0xEF	; 239
    7a20:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    7a24:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a28:	81 60       	ori	r24, 0x01	; 1
    7a2a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7a2e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USB_Device_ConfigurationNumber>
    7a32:	88 23       	and	r24, r24
    7a34:	29 f0       	breq	.+10     	; 0x7a40 <__vector_10+0xe2>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a36:	84 e0       	ldi	r24, 0x04	; 4
			USB_DeviceState = DEVICE_STATE_Unattached;
    7a38:	08 c0       	rjmp	.+16     	; 0x7a4a <__vector_10+0xec>
			EVENT_USB_Device_Disconnect();
    7a3a:	1e ba       	out	0x1e, r1	; 30
    7a3c:	b9 d1       	rcall	.+882    	; 0x7db0 <USB_Event_Stub>
    7a3e:	ba cf       	rjmp	.-140    	; 0x79b4 <__vector_10+0x56>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7a40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a44:	87 fd       	sbrc	r24, 7
    7a46:	f7 cf       	rjmp	.-18     	; 0x7a36 <__vector_10+0xd8>
    7a48:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7a4a:	8e bb       	out	0x1e, r24	; 30
    7a4c:	b1 d1       	rcall	.+866    	; 0x7db0 <USB_Event_Stub>
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7a4e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7a52:	83 ff       	sbrs	r24, 3
    7a54:	21 c0       	rjmp	.+66     	; 0x7a98 <__vector_10+0x13a>
						return (UDIEN  & (1 << EORSTE));
    7a56:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a5a:	83 ff       	sbrs	r24, 3
    7a5c:	1d c0       	rjmp	.+58     	; 0x7a98 <__vector_10+0x13a>
						UDINT  &= ~(1 << EORSTI);
    7a5e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a62:	87 7f       	andi	r24, 0xF7	; 247
    7a64:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7a68:	82 e0       	ldi	r24, 0x02	; 2
    7a6a:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    7a6c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    7a70:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a74:	8e 7f       	andi	r24, 0xFE	; 254
    7a76:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    7a7a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a7e:	8e 7f       	andi	r24, 0xFE	; 254
    7a80:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    7a84:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a88:	80 61       	ori	r24, 0x10	; 16
    7a8a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7a8e:	42 e0       	ldi	r20, 0x02	; 2
    7a90:	60 e0       	ldi	r22, 0x00	; 0
    7a92:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7a94:	e1 de       	rcall	.-574    	; 0x7858 <Endpoint_ConfigureEndpoint_Prv>
    7a96:	8c d1       	rcall	.+792    	; 0x7db0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7a98:	ff 91       	pop	r31
    7a9a:	ef 91       	pop	r30
    7a9c:	bf 91       	pop	r27
    7a9e:	af 91       	pop	r26
    7aa0:	9f 91       	pop	r25
    7aa2:	8f 91       	pop	r24
    7aa4:	7f 91       	pop	r23
    7aa6:	6f 91       	pop	r22
    7aa8:	5f 91       	pop	r21
    7aaa:	4f 91       	pop	r20
    7aac:	3f 91       	pop	r19
    7aae:	2f 91       	pop	r18
    7ab0:	0f 90       	pop	r0
    7ab2:	0f be       	out	0x3f, r0	; 63
    7ab4:	0f 90       	pop	r0
    7ab6:	1f 90       	pop	r1
    7ab8:	18 95       	reti

00007aba <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    7aba:	fc 01       	movw	r30, r24
    7abc:	cb 01       	movw	r24, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7abe:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <USB_ControlRequest+0x6>
    7ac2:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <USB_ControlRequest+0x7>
    7ac6:	26 17       	cp	r18, r22
    7ac8:	37 07       	cpc	r19, r23
    7aca:	90 f0       	brcs	.+36     	; 0x7af0 <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7acc:	00 97       	sbiw	r24, 0x00	; 0
    7ace:	29 f4       	brne	.+10     	; 0x7ada <Endpoint_Write_Control_Stream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7ad0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7ad4:	2e 77       	andi	r18, 0x7E	; 126
    7ad6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7ada:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7adc:	00 97       	sbiw	r24, 0x00	; 0
    7ade:	51 f4       	brne	.+20     	; 0x7af4 <Endpoint_Write_Control_Stream_LE+0x3a>
    7ae0:	41 11       	cpse	r20, r1
    7ae2:	08 c0       	rjmp	.+16     	; 0x7af4 <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7ae4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7ae8:	82 ff       	sbrs	r24, 2
    7aea:	30 c0       	rjmp	.+96     	; 0x7b4c <Endpoint_Write_Control_Stream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7aec:	80 e0       	ldi	r24, 0x00	; 0
    7aee:	08 95       	ret
    7af0:	c9 01       	movw	r24, r18
    7af2:	f3 cf       	rjmp	.-26     	; 0x7ada <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7af4:	2e b3       	in	r18, 0x1e	; 30
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7af6:	22 23       	and	r18, r18
    7af8:	91 f1       	breq	.+100    	; 0x7b5e <Endpoint_Write_Control_Stream_LE+0xa4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7afa:	25 30       	cpi	r18, 0x05	; 5
    7afc:	61 f1       	breq	.+88     	; 0x7b56 <Endpoint_Write_Control_Stream_LE+0x9c>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7afe:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    7b02:	23 fd       	sbrc	r18, 3
    7b04:	2a c0       	rjmp	.+84     	; 0x7b5a <Endpoint_Write_Control_Stream_LE+0xa0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7b06:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    7b0a:	22 fd       	sbrc	r18, 2
    7b0c:	eb cf       	rjmp	.-42     	; 0x7ae4 <Endpoint_Write_Control_Stream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b0e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    7b12:	20 ff       	sbrs	r18, 0
    7b14:	e3 cf       	rjmp	.-58     	; 0x7adc <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7b16:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7b1a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7b1e:	00 97       	sbiw	r24, 0x00	; 0
    7b20:	19 f0       	breq	.+6      	; 0x7b28 <Endpoint_Write_Control_Stream_LE+0x6e>
    7b22:	28 30       	cpi	r18, 0x08	; 8
    7b24:	31 05       	cpc	r19, r1
    7b26:	58 f0       	brcs	.+22     	; 0x7b3e <Endpoint_Write_Control_Stream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7b28:	41 e0       	ldi	r20, 0x01	; 1
    7b2a:	28 30       	cpi	r18, 0x08	; 8
    7b2c:	31 05       	cpc	r19, r1
    7b2e:	09 f0       	breq	.+2      	; 0x7b32 <Endpoint_Write_Control_Stream_LE+0x78>
    7b30:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b32:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b36:	2e 77       	andi	r18, 0x7E	; 126
    7b38:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				#else
					UEINTX &= ~(1 << TXINI);
				#endif
			}
    7b3c:	cf cf       	rjmp	.-98     	; 0x7adc <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7b3e:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7b40:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
    7b44:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    7b46:	2f 5f       	subi	r18, 0xFF	; 255
    7b48:	3f 4f       	sbci	r19, 0xFF	; 255
    7b4a:	e9 cf       	rjmp	.-46     	; 0x7b1e <Endpoint_Write_Control_Stream_LE+0x64>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b4c:	8e b3       	in	r24, 0x1e	; 30
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b4e:	88 23       	and	r24, r24
    7b50:	31 f0       	breq	.+12     	; 0x7b5e <Endpoint_Write_Control_Stream_LE+0xa4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7b52:	85 30       	cpi	r24, 0x05	; 5
    7b54:	39 f6       	brne	.-114    	; 0x7ae4 <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7b56:	83 e0       	ldi	r24, 0x03	; 3
}
    7b58:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7b5a:	81 e0       	ldi	r24, 0x01	; 1
    7b5c:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7b5e:	82 e0       	ldi	r24, 0x02	; 2
    7b60:	08 95       	ret

00007b62 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7b62:	fc 01       	movw	r30, r24
    7b64:	cb 01       	movw	r24, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7b66:	00 97       	sbiw	r24, 0x00	; 0
    7b68:	29 f4       	brne	.+10     	; 0x7b74 <Endpoint_Read_Control_Stream_LE+0x12>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7b6a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b6e:	2b 77       	andi	r18, 0x7B	; 123
    7b70:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  Endpoint_ClearOUT();

	while (Length)
    7b74:	00 97       	sbiw	r24, 0x00	; 0
    7b76:	31 f4       	brne	.+12     	; 0x7b84 <Endpoint_Read_Control_Stream_LE+0x22>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7b7c:	80 ff       	sbrs	r24, 0
    7b7e:	1b c0       	rjmp	.+54     	; 0x7bb6 <Endpoint_Read_Control_Stream_LE+0x54>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7b80:	80 e0       	ldi	r24, 0x00	; 0
    7b82:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b84:	2e b3       	in	r18, 0x1e	; 30
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b86:	22 23       	and	r18, r18
    7b88:	f9 f0       	breq	.+62     	; 0x7bc8 <Endpoint_Read_Control_Stream_LE+0x66>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7b8a:	25 30       	cpi	r18, 0x05	; 5
    7b8c:	c9 f0       	breq	.+50     	; 0x7bc0 <Endpoint_Read_Control_Stream_LE+0x5e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7b8e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    7b92:	23 fd       	sbrc	r18, 3
    7b94:	17 c0       	rjmp	.+46     	; 0x7bc4 <Endpoint_Read_Control_Stream_LE+0x62>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7b96:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsOUTReceived())
    7b9a:	22 ff       	sbrs	r18, 2
    7b9c:	eb cf       	rjmp	.-42     	; 0x7b74 <Endpoint_Read_Control_Stream_LE+0x12>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7b9e:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7ba2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			while (Length && Endpoint_BytesInEndpoint())
    7ba6:	23 2b       	or	r18, r19
    7ba8:	01 f3       	breq	.-64     	; 0x7b6a <Endpoint_Read_Control_Stream_LE+0x8>
				return UEDATX;
    7baa:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7bae:	21 93       	st	Z+, r18
				Length--;
    7bb0:	01 97       	sbiw	r24, 0x01	; 1
			while (Length && Endpoint_BytesInEndpoint())
    7bb2:	a9 f7       	brne	.-22     	; 0x7b9e <Endpoint_Read_Control_Stream_LE+0x3c>
    7bb4:	da cf       	rjmp	.-76     	; 0x7b6a <Endpoint_Read_Control_Stream_LE+0x8>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bb6:	8e b3       	in	r24, 0x1e	; 30
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bb8:	88 23       	and	r24, r24
    7bba:	31 f0       	breq	.+12     	; 0x7bc8 <Endpoint_Read_Control_Stream_LE+0x66>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bbc:	85 30       	cpi	r24, 0x05	; 5
    7bbe:	e1 f6       	brne	.-72     	; 0x7b78 <Endpoint_Read_Control_Stream_LE+0x16>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7bc0:	83 e0       	ldi	r24, 0x03	; 3
}
    7bc2:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7bc4:	81 e0       	ldi	r24, 0x01	; 1
    7bc6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7bc8:	82 e0       	ldi	r24, 0x02	; 2
    7bca:	08 95       	ret

00007bcc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7bcc:	0f 93       	push	r16
    7bce:	1f 93       	push	r17
    7bd0:	cf 93       	push	r28
    7bd2:	df 93       	push	r29
    7bd4:	00 d0       	rcall	.+0      	; 0x7bd6 <USB_Device_ProcessControlRequest+0xa>
    7bd6:	cd b7       	in	r28, 0x3d	; 61
    7bd8:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    7bda:	84 ea       	ldi	r24, 0xA4	; 164
    7bdc:	91 e0       	ldi	r25, 0x01	; 1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7bde:	fc 01       	movw	r30, r24
    7be0:	01 96       	adiw	r24, 0x01	; 1
				return UEDATX;
    7be2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7be6:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7be8:	21 e0       	ldi	r18, 0x01	; 1
    7bea:	8c 3a       	cpi	r24, 0xAC	; 172
    7bec:	92 07       	cpc	r25, r18
    7bee:	b9 f7       	brne	.-18     	; 0x7bde <USB_Device_ProcessControlRequest+0x12>
	#endif

	EVENT_USB_Device_ControlRequest();
    7bf0:	58 db       	rcall	.-2384   	; 0x72a2 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bf2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    7bf6:	83 ff       	sbrs	r24, 3
    7bf8:	29 c0       	rjmp	.+82     	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7bfa:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7bfe:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <USB_ControlRequest+0x1>
    7c02:	9a 30       	cpi	r25, 0x0A	; 10
    7c04:	18 f5       	brcc	.+70     	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
    7c06:	e9 2f       	mov	r30, r25
    7c08:	f0 e0       	ldi	r31, 0x00	; 0
    7c0a:	e8 5f       	subi	r30, 0xF8	; 248
    7c0c:	f0 4c       	sbci	r31, 0xC0	; 192
    7c0e:	e2 c0       	rjmp	.+452    	; 0x7dd4 <__tablejump2__>

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
    7c10:	82 38       	cpi	r24, 0x82	; 130
    7c12:	e1 f4       	brne	.+56     	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c14:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x4>
    7c18:	87 70       	andi	r24, 0x07	; 7
					UENUM = EndpointNumber;
    7c1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c1e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c22:	85 fb       	bst	r24, 5
    7c24:	88 27       	eor	r24, r24
    7c26:	80 f9       	bld	r24, 0
					UENUM = EndpointNumber;
    7c28:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    7c2c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c30:	97 7f       	andi	r25, 0xF7	; 247
    7c32:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7c36:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    7c3a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7c3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c42:	8e 77       	andi	r24, 0x7E	; 126
    7c44:	b1 c0       	rjmp	.+354    	; 0x7da8 <USB_Device_ProcessControlRequest+0x1dc>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c46:	82 30       	cpi	r24, 0x02	; 2
    7c48:	09 f4       	brne	.+2      	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
    7c4a:	92 c0       	rjmp	.+292    	; 0x7d70 <USB_Device_ProcessControlRequest+0x1a4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    7c50:	83 ff       	sbrs	r24, 3
    7c52:	0a c0       	rjmp	.+20     	; 0x7c68 <USB_Device_ProcessControlRequest+0x9c>
				UECONX |= (1 << STALLRQ);
    7c54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c58:	80 62       	ori	r24, 0x20	; 32
    7c5a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UEINTX &= ~(1 << RXSTPI);
    7c5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c62:	87 7f       	andi	r24, 0xF7	; 247
    7c64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    7c68:	0f 90       	pop	r0
    7c6a:	0f 90       	pop	r0
    7c6c:	df 91       	pop	r29
    7c6e:	cf 91       	pop	r28
    7c70:	1f 91       	pop	r17
    7c72:	0f 91       	pop	r16
    7c74:	08 95       	ret
				UECONX |= (1 << STALLRQC);
    7c76:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c7a:	90 61       	ori	r25, 0x10	; 16
    7c7c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << EndpointNumber);
    7c80:	21 e0       	ldi	r18, 0x01	; 1
    7c82:	30 e0       	ldi	r19, 0x00	; 0
    7c84:	01 c0       	rjmp	.+2      	; 0x7c88 <USB_Device_ProcessControlRequest+0xbc>
    7c86:	22 0f       	add	r18, r18
    7c88:	8a 95       	dec	r24
    7c8a:	ea f7       	brpl	.-6      	; 0x7c86 <USB_Device_ProcessControlRequest+0xba>
    7c8c:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    7c90:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    7c94:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c98:	88 60       	ori	r24, 0x08	; 8
    7c9a:	7f c0       	rjmp	.+254    	; 0x7d9a <USB_Device_ProcessControlRequest+0x1ce>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7c9c:	81 11       	cpse	r24, r1
    7c9e:	d6 cf       	rjmp	.-84     	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7ca0:	10 91 a6 01 	lds	r17, 0x01A6	; 0x8001a6 <USB_ControlRequest+0x2>
    7ca4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7ca6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7ca8:	f8 94       	cli
				UEINTX &= ~(1 << RXSTPI);
    7caa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7cae:	87 7f       	andi	r24, 0xF7	; 247
    7cb0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    7cb4:	e4 dd       	rcall	.-1080   	; 0x787e <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7cb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    7cba:	80 ff       	sbrs	r24, 0
    7cbc:	fc cf       	rjmp	.-8      	; 0x7cb6 <USB_Device_ProcessControlRequest+0xea>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7cbe:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7cc2:	80 78       	andi	r24, 0x80	; 128
    7cc4:	81 2b       	or	r24, r17

				UDADDR = Temp;
    7cc6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    7cca:	80 68       	ori	r24, 0x80	; 128
    7ccc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7cd0:	82 e0       	ldi	r24, 0x02	; 2
    7cd2:	11 11       	cpse	r17, r1
    7cd4:	83 e0       	ldi	r24, 0x03	; 3
    7cd6:	8e bb       	out	0x1e, r24	; 30
				SREG = GlobalIntState;
    7cd8:	0f bf       	out	0x3f, r16	; 63
}
    7cda:	b8 cf       	rjmp	.-144    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7cdc:	80 58       	subi	r24, 0x80	; 128
    7cde:	82 30       	cpi	r24, 0x02	; 2
    7ce0:	08 f0       	brcs	.+2      	; 0x7ce4 <USB_Device_ProcessControlRequest+0x118>
    7ce2:	b4 cf       	rjmp	.-152    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7ce4:	ae 01       	movw	r20, r28
    7ce6:	4f 5f       	subi	r20, 0xFF	; 255
    7ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    7cea:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x4>
    7cee:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest+0x2>
    7cf2:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <USB_ControlRequest+0x3>
    7cf6:	7e dd       	rcall	.-1284   	; 0x77f4 <CALLBACK_USB_GetDescriptor>
    7cf8:	bc 01       	movw	r22, r24
    7cfa:	89 2b       	or	r24, r25
    7cfc:	09 f4       	brne	.+2      	; 0x7d00 <USB_Device_ProcessControlRequest+0x134>
    7cfe:	a6 cf       	rjmp	.-180    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
				UEINTX &= ~(1 << RXSTPI);
    7d00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d04:	87 7f       	andi	r24, 0xF7	; 247
    7d06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7d0a:	89 81       	ldd	r24, Y+1	; 0x01
    7d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d0e:	d5 de       	rcall	.-598    	; 0x7aba <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7d10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d14:	8b 77       	andi	r24, 0x7B	; 123
    7d16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d1a:	98 cf       	rjmp	.-208    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7d1c:	80 38       	cpi	r24, 0x80	; 128
    7d1e:	09 f0       	breq	.+2      	; 0x7d22 <USB_Device_ProcessControlRequest+0x156>
    7d20:	95 cf       	rjmp	.-214    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
				UEINTX &= ~(1 << RXSTPI);
    7d22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d26:	87 7f       	andi	r24, 0xF7	; 247
    7d28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7d2c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    7d30:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7d34:	84 cf       	rjmp	.-248    	; 0x7c3e <USB_Device_ProcessControlRequest+0x72>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d36:	81 11       	cpse	r24, r1
    7d38:	89 cf       	rjmp	.-238    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7d3a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <USB_ControlRequest+0x2>
    7d3e:	92 30       	cpi	r25, 0x02	; 2
    7d40:	08 f0       	brcs	.+2      	; 0x7d44 <USB_Device_ProcessControlRequest+0x178>
    7d42:	84 cf       	rjmp	.-248    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
				UEINTX &= ~(1 << RXSTPI);
    7d44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d48:	87 7f       	andi	r24, 0xF7	; 247
    7d4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7d4e:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    7d52:	95 dd       	rcall	.-1238   	; 0x787e <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    7d54:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USB_Device_ConfigurationNumber>
    7d58:	88 23       	and	r24, r24
    7d5a:	11 f0       	breq	.+4      	; 0x7d60 <USB_Device_ProcessControlRequest+0x194>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7d5c:	84 e0       	ldi	r24, 0x04	; 4
    7d5e:	05 c0       	rjmp	.+10     	; 0x7d6a <USB_Device_ProcessControlRequest+0x19e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7d60:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7d64:	87 fd       	sbrc	r24, 7
    7d66:	fa cf       	rjmp	.-12     	; 0x7d5c <USB_Device_ProcessControlRequest+0x190>
    7d68:	81 e0       	ldi	r24, 0x01	; 1
	EVENT_USB_Device_ConfigurationChanged();
    7d6a:	8e bb       	out	0x1e, r24	; 30
    7d6c:	8e da       	rcall	.-2788   	; 0x728a <EVENT_USB_Device_ConfigurationChanged>
    7d6e:	6e cf       	rjmp	.-292    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7d70:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest+0x2>
    7d74:	81 11       	cpse	r24, r1
    7d76:	13 c0       	rjmp	.+38     	; 0x7d9e <USB_Device_ProcessControlRequest+0x1d2>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7d78:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x4>
    7d7c:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7d7e:	09 f4       	brne	.+2      	; 0x7d82 <USB_Device_ProcessControlRequest+0x1b6>
    7d80:	65 cf       	rjmp	.-310    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>
					UENUM = EndpointNumber;
    7d82:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    7d86:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7d8a:	20 ff       	sbrs	r18, 0
    7d8c:	08 c0       	rjmp	.+16     	; 0x7d9e <USB_Device_ProcessControlRequest+0x1d2>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7d8e:	93 30       	cpi	r25, 0x03	; 3
    7d90:	09 f0       	breq	.+2      	; 0x7d94 <USB_Device_ProcessControlRequest+0x1c8>
    7d92:	71 cf       	rjmp	.-286    	; 0x7c76 <USB_Device_ProcessControlRequest+0xaa>
				UECONX |= (1 << STALLRQ);
    7d94:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7d98:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    7d9a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = EndpointNumber;
    7d9e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    7da2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7da6:	87 7f       	andi	r24, 0xF7	; 247
    7da8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    7dac:	68 dd       	rcall	.-1328   	; 0x787e <Endpoint_ClearStatusStage>
}
    7dae:	4e cf       	rjmp	.-356    	; 0x7c4c <USB_Device_ProcessControlRequest+0x80>

00007db0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7db0:	08 95       	ret

00007db2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7db2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7db4:	8e b3       	in	r24, 0x1e	; 30
    7db6:	88 23       	and	r24, r24
    7db8:	59 f0       	breq	.+22     	; 0x7dd0 <USB_USBTask+0x1e>
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7dba:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7dbe:	c7 70       	andi	r28, 0x07	; 7
					UENUM = EndpointNumber;
    7dc0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7dc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7dc8:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    7dca:	00 df       	rcall	.-512    	; 0x7bcc <USB_Device_ProcessControlRequest>
					UENUM = EndpointNumber;
    7dcc:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    7dd0:	cf 91       	pop	r28
    7dd2:	08 95       	ret

00007dd4 <__tablejump2__>:
    7dd4:	ee 0f       	add	r30, r30
    7dd6:	ff 1f       	adc	r31, r31
    7dd8:	05 90       	lpm	r0, Z+
    7dda:	f4 91       	lpm	r31, Z
    7ddc:	e0 2d       	mov	r30, r0
    7dde:	09 94       	ijmp

00007de0 <eeprom_read_byte>:
    7de0:	f9 99       	sbic	0x1f, 1	; 31
    7de2:	fe cf       	rjmp	.-4      	; 0x7de0 <eeprom_read_byte>
    7de4:	92 bd       	out	0x22, r25	; 34
    7de6:	81 bd       	out	0x21, r24	; 33
    7de8:	f8 9a       	sbi	0x1f, 0	; 31
    7dea:	99 27       	eor	r25, r25
    7dec:	80 b5       	in	r24, 0x20	; 32
    7dee:	08 95       	ret

00007df0 <eeprom_write_byte>:
    7df0:	26 2f       	mov	r18, r22

00007df2 <eeprom_write_r18>:
    7df2:	f9 99       	sbic	0x1f, 1	; 31
    7df4:	fe cf       	rjmp	.-4      	; 0x7df2 <eeprom_write_r18>
    7df6:	1f ba       	out	0x1f, r1	; 31
    7df8:	92 bd       	out	0x22, r25	; 34
    7dfa:	81 bd       	out	0x21, r24	; 33
    7dfc:	20 bd       	out	0x20, r18	; 32
    7dfe:	0f b6       	in	r0, 0x3f	; 63
    7e00:	f8 94       	cli
    7e02:	fa 9a       	sbi	0x1f, 2	; 31
    7e04:	f9 9a       	sbi	0x1f, 1	; 31
    7e06:	0f be       	out	0x3f, r0	; 63
    7e08:	01 96       	adiw	r24, 0x01	; 1
    7e0a:	08 95       	ret

00007e0c <_exit>:
    7e0c:	f8 94       	cli

00007e0e <__stop_program>:
    7e0e:	ff cf       	rjmp	.-2      	; 0x7e0e <__stop_program>
    7e10:	08 3e       	cpi	r16, 0xE8	; 232
    7e12:	23 3e       	cpi	r18, 0xE3	; 227
    7e14:	26 3e       	cpi	r18, 0xE6	; 230
    7e16:	23 3e       	cpi	r18, 0xE3	; 227
    7e18:	26 3e       	cpi	r18, 0xE6	; 230
    7e1a:	4e 3e       	cpi	r20, 0xEE	; 238
    7e1c:	6e 3e       	cpi	r22, 0xEE	; 238
    7e1e:	26 3e       	cpi	r18, 0xE6	; 230
    7e20:	8e 3e       	cpi	r24, 0xEE	; 238
    7e22:	9b 3e       	cpi	r25, 0xEB	; 235
