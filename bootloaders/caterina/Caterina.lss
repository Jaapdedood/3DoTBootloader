
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00007e6c  00000f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6c  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800194  00800194  00000f94  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ed5  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018e8  00000000  00000000  0000612d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eb6  00000000  00000000  00007a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007bc  00000000  00000000  0000a8cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002057  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ef8  00000000  00000000  0000d0df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000ffd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	5f c0       	rjmp	.+190    	; 0x70c0 <__ctors_end>
    7002:	00 00       	nop
    7004:	78 c0       	rjmp	.+240    	; 0x70f6 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	76 c0       	rjmp	.+236    	; 0x70f6 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	74 c0       	rjmp	.+232    	; 0x70f6 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	72 c0       	rjmp	.+228    	; 0x70f6 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	70 c0       	rjmp	.+224    	; 0x70f6 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	6e c0       	rjmp	.+220    	; 0x70f6 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	6c c0       	rjmp	.+216    	; 0x70f6 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	6a c0       	rjmp	.+212    	; 0x70f6 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	68 c0       	rjmp	.+208    	; 0x70f6 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	af c4       	rjmp	.+2398   	; 0x7988 <__vector_10>
    702a:	00 00       	nop
    702c:	64 c0       	rjmp	.+200    	; 0x70f6 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	62 c0       	rjmp	.+196    	; 0x70f6 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	60 c0       	rjmp	.+192    	; 0x70f6 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	5e c0       	rjmp	.+188    	; 0x70f6 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	5c c0       	rjmp	.+184    	; 0x70f6 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	5a c0       	rjmp	.+180    	; 0x70f6 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	ee c0       	rjmp	.+476    	; 0x7222 <__vector_17>
    7046:	00 00       	nop
    7048:	56 c0       	rjmp	.+172    	; 0x70f6 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	54 c0       	rjmp	.+168    	; 0x70f6 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	52 c0       	rjmp	.+164    	; 0x70f6 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	50 c0       	rjmp	.+160    	; 0x70f6 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	4e c0       	rjmp	.+156    	; 0x70f6 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	4c c0       	rjmp	.+152    	; 0x70f6 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	4a c0       	rjmp	.+148    	; 0x70f6 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	48 c0       	rjmp	.+144    	; 0x70f6 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	46 c0       	rjmp	.+140    	; 0x70f6 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	44 c0       	rjmp	.+136    	; 0x70f6 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	42 c0       	rjmp	.+132    	; 0x70f6 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	40 c0       	rjmp	.+128    	; 0x70f6 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	3e c0       	rjmp	.+124    	; 0x70f6 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	3c c0       	rjmp	.+120    	; 0x70f6 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	3a c0       	rjmp	.+116    	; 0x70f6 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	38 c0       	rjmp	.+112    	; 0x70f6 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	36 c0       	rjmp	.+108    	; 0x70f6 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	34 c0       	rjmp	.+104    	; 0x70f6 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	32 c0       	rjmp	.+100    	; 0x70f6 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	30 c0       	rjmp	.+96     	; 0x70f6 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	2e c0       	rjmp	.+92     	; 0x70f6 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	2c c0       	rjmp	.+88     	; 0x70f6 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	2a c0       	rjmp	.+84     	; 0x70f6 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	28 c0       	rjmp	.+80     	; 0x70f6 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	26 c0       	rjmp	.+76     	; 0x70f6 <__bad_interrupt>
    70aa:	00 00       	nop
    70ac:	2c 3e       	cpi	r18, 0xEC	; 236
    70ae:	45 3e       	cpi	r20, 0xE5	; 229
    70b0:	f1 3e       	cpi	r31, 0xE1	; 225
    70b2:	45 3e       	cpi	r20, 0xE5	; 229
    70b4:	f1 3e       	cpi	r31, 0xE1	; 225
    70b6:	7d 3e       	cpi	r23, 0xED	; 237
    70b8:	9f 3e       	cpi	r25, 0xEF	; 239
    70ba:	f1 3e       	cpi	r31, 0xE1	; 225
    70bc:	bf 3e       	cpi	r27, 0xEF	; 239
    70be:	d1 3e       	cpi	r29, 0xE1	; 225

000070c0 <__ctors_end>:
    70c0:	11 24       	eor	r1, r1
    70c2:	1f be       	out	0x3f, r1	; 63
    70c4:	cf ef       	ldi	r28, 0xFF	; 255
    70c6:	da e0       	ldi	r29, 0x0A	; 10
    70c8:	de bf       	out	0x3e, r29	; 62
    70ca:	cd bf       	out	0x3d, r28	; 61

000070cc <__do_copy_data>:
    70cc:	11 e0       	ldi	r17, 0x01	; 1
    70ce:	a0 e0       	ldi	r26, 0x00	; 0
    70d0:	b1 e0       	ldi	r27, 0x01	; 1
    70d2:	ec e6       	ldi	r30, 0x6C	; 108
    70d4:	fe e7       	ldi	r31, 0x7E	; 126
    70d6:	02 c0       	rjmp	.+4      	; 0x70dc <__do_copy_data+0x10>
    70d8:	05 90       	lpm	r0, Z+
    70da:	0d 92       	st	X+, r0
    70dc:	a4 39       	cpi	r26, 0x94	; 148
    70de:	b1 07       	cpc	r27, r17
    70e0:	d9 f7       	brne	.-10     	; 0x70d8 <__do_copy_data+0xc>

000070e2 <__do_clear_bss>:
    70e2:	21 e0       	ldi	r18, 0x01	; 1
    70e4:	a4 e9       	ldi	r26, 0x94	; 148
    70e6:	b1 e0       	ldi	r27, 0x01	; 1
    70e8:	01 c0       	rjmp	.+2      	; 0x70ec <.do_clear_bss_start>

000070ea <.do_clear_bss_loop>:
    70ea:	1d 92       	st	X+, r1

000070ec <.do_clear_bss_start>:
    70ec:	aa 3a       	cpi	r26, 0xAA	; 170
    70ee:	b2 07       	cpc	r27, r18
    70f0:	e1 f7       	brne	.-8      	; 0x70ea <.do_clear_bss_loop>
    70f2:	67 d3       	rcall	.+1742   	; 0x77c2 <main>
    70f4:	b9 c6       	rjmp	.+3442   	; 0x7e68 <_exit>

000070f6 <__bad_interrupt>:
    70f6:	84 cf       	rjmp	.-248    	; 0x7000 <__vectors>

000070f8 <FetchNextCommandByte>:
    while(!(TWCR & (1<<TWINT)));
}

void TWIStop(void)
{
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    70f8:	84 e0       	ldi	r24, 0x04	; 4
    70fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    70fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7102:	85 fd       	sbrc	r24, 5
    7104:	0d c0       	rjmp	.+26     	; 0x7120 <FetchNextCommandByte+0x28>
    7106:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    710a:	8b 77       	andi	r24, 0x7B	; 123
    710c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7110:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7114:	82 fd       	sbrc	r24, 2
    7116:	f3 cf       	rjmp	.-26     	; 0x70fe <FetchNextCommandByte+0x6>
    7118:	8e b3       	in	r24, 0x1e	; 30
    711a:	81 11       	cpse	r24, r1
    711c:	f9 cf       	rjmp	.-14     	; 0x7110 <FetchNextCommandByte+0x18>
    711e:	02 c0       	rjmp	.+4      	; 0x7124 <FetchNextCommandByte+0x2c>
    7120:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7124:	08 95       	ret

00007126 <WriteNextResponseByte>:
    7126:	93 e0       	ldi	r25, 0x03	; 3
    7128:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    712c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7130:	95 ff       	sbrs	r25, 5
    7132:	0a c0       	rjmp	.+20     	; 0x7148 <WriteNextResponseByte+0x22>
    7134:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7138:	5d 98       	cbi	0x0b, 5	; 11
    713a:	84 e6       	ldi	r24, 0x64	; 100
    713c:	90 e0       	ldi	r25, 0x00	; 0
    713e:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <TxLEDPulse+0x1>
    7142:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <TxLEDPulse>
    7146:	08 95       	ret
    7148:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    714c:	9e 77       	andi	r25, 0x7E	; 126
    714e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7152:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7156:	90 fd       	sbrc	r25, 0
    7158:	ed cf       	rjmp	.-38     	; 0x7134 <WriteNextResponseByte+0xe>
    715a:	9e b3       	in	r25, 0x1e	; 30
    715c:	91 11       	cpse	r25, r1
    715e:	f9 cf       	rjmp	.-14     	; 0x7152 <WriteNextResponseByte+0x2c>
    7160:	08 95       	ret

00007162 <StartSketch>:
    7162:	f8 94       	cli
    7164:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    7168:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    716c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7170:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    7174:	81 e0       	ldi	r24, 0x01	; 1
    7176:	85 bf       	out	0x35, r24	; 53
    7178:	15 be       	out	0x35, r1	; 53
    717a:	47 98       	cbi	0x08, 7	; 8
    717c:	5d 9a       	sbi	0x0b, 5	; 11
    717e:	28 9a       	sbi	0x05, 0	; 5
    7180:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    7184:	08 95       	ret

00007186 <TWIStart>:
    7186:	84 ea       	ldi	r24, 0xA4	; 164
    7188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    718c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    7190:	87 ff       	sbrs	r24, 7
    7192:	fc cf       	rjmp	.-8      	; 0x718c <TWIStart+0x6>
    7194:	08 95       	ret

00007196 <TWIWrite>:
}

void TWIWrite(uint8_t u8data)
{
    /* Load data into TWDR Register. Clear TWINT bit in TWCR to start transmission */
    TWDR = u8data;
    7196:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1<<TWINT)|(1<<TWEN);
    719a:	84 e8       	ldi	r24, 0x84	; 132
    719c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    /* Wait for TWINT Flag set. This indicates that the data has been transmitted, and ACK/NACK has been received. */
    while(!(TWCR & (1<<TWINT)));
    71a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    71a4:	87 ff       	sbrs	r24, 7
    71a6:	fc cf       	rjmp	.-8      	; 0x71a0 <TWIWrite+0xa>
}
    71a8:	08 95       	ret

000071aa <SetupCurrentLimit>:

void SetupCurrentLimit(void)
{
    71aa:	ed df       	rcall	.-38     	; 0x7186 <TWIStart>
    71ac:	8e e5       	ldi	r24, 0x5E	; 94
    71ae:	f3 df       	rcall	.-26     	; 0x7196 <TWIWrite>
    71b0:	83 e7       	ldi	r24, 0x73	; 115
    71b2:	f1 df       	rcall	.-30     	; 0x7196 <TWIWrite>
    71b4:	84 e9       	ldi	r24, 0x94	; 148
    71b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    71ba:	08 95       	ret

000071bc <LEDPulse>:
    71bc:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <LLEDPulse>
    71c0:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <LLEDPulse+0x1>
    71c4:	2f 5f       	subi	r18, 0xFF	; 255
    71c6:	3f 4f       	sbci	r19, 0xFF	; 255
    71c8:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <LLEDPulse+0x1>
    71cc:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <LLEDPulse>
    71d0:	83 2f       	mov	r24, r19
    71d2:	37 ff       	sbrs	r19, 7
    71d4:	02 c0       	rjmp	.+4      	; 0x71da <LEDPulse+0x1e>
    71d6:	8e ef       	ldi	r24, 0xFE	; 254
    71d8:	83 1b       	sub	r24, r19
    71da:	33 27       	eor	r19, r19
    71dc:	88 0f       	add	r24, r24
    71de:	90 e0       	ldi	r25, 0x00	; 0
    71e0:	82 17       	cp	r24, r18
    71e2:	93 07       	cpc	r25, r19
    71e4:	14 f4       	brge	.+4      	; 0x71ea <LEDPulse+0x2e>
    71e6:	47 98       	cbi	0x08, 7	; 8
    71e8:	08 95       	ret
    71ea:	47 9a       	sbi	0x08, 7	; 8
    71ec:	08 95       	ret

000071ee <SetupHardware>:
    71ee:	e1 e6       	ldi	r30, 0x61	; 97
    71f0:	f0 e0       	ldi	r31, 0x00	; 0
    71f2:	80 e8       	ldi	r24, 0x80	; 128
    71f4:	80 83       	st	Z, r24
    71f6:	10 82       	st	Z, r1
    71f8:	81 e0       	ldi	r24, 0x01	; 1
    71fa:	85 bf       	out	0x35, r24	; 53
    71fc:	82 e0       	ldi	r24, 0x02	; 2
    71fe:	85 bf       	out	0x35, r24	; 53
    7200:	3f 9a       	sbi	0x07, 7	; 7
    7202:	20 9a       	sbi	0x04, 0	; 4
    7204:	55 9a       	sbi	0x0a, 5	; 10
    7206:	47 98       	cbi	0x08, 7	; 8
    7208:	5d 9a       	sbi	0x0b, 5	; 11
    720a:	28 9a       	sbi	0x05, 0	; 5
    720c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    7210:	9a ef       	ldi	r25, 0xFA	; 250
    7212:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    7216:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    721a:	83 e0       	ldi	r24, 0x03	; 3
    721c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    7220:	9b c3       	rjmp	.+1846   	; 0x7958 <USB_Init>

00007222 <__vector_17>:
    7222:	1f 92       	push	r1
    7224:	0f 92       	push	r0
    7226:	0f b6       	in	r0, 0x3f	; 63
    7228:	0f 92       	push	r0
    722a:	11 24       	eor	r1, r1
    722c:	2f 93       	push	r18
    722e:	8f 93       	push	r24
    7230:	9f 93       	push	r25
    7232:	ef 93       	push	r30
    7234:	ff 93       	push	r31
    7236:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    723a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    723e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <TxLEDPulse>
    7242:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <TxLEDPulse+0x1>
    7246:	00 97       	sbiw	r24, 0x00	; 0
    7248:	41 f0       	breq	.+16     	; 0x725a <__vector_17+0x38>
    724a:	01 97       	sbiw	r24, 0x01	; 1
    724c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <TxLEDPulse+0x1>
    7250:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <TxLEDPulse>
    7254:	89 2b       	or	r24, r25
    7256:	09 f4       	brne	.+2      	; 0x725a <__vector_17+0x38>
    7258:	5d 9a       	sbi	0x0b, 5	; 11
    725a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <RxLEDPulse>
    725e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <RxLEDPulse+0x1>
    7262:	00 97       	sbiw	r24, 0x00	; 0
    7264:	41 f0       	breq	.+16     	; 0x7276 <__vector_17+0x54>
    7266:	01 97       	sbiw	r24, 0x01	; 1
    7268:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <RxLEDPulse+0x1>
    726c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <RxLEDPulse>
    7270:	89 2b       	or	r24, r25
    7272:	09 f4       	brne	.+2      	; 0x7276 <__vector_17+0x54>
    7274:	28 9a       	sbi	0x05, 0	; 5
    7276:	e0 e0       	ldi	r30, 0x00	; 0
    7278:	f0 e0       	ldi	r31, 0x00	; 0
    727a:	85 91       	lpm	r24, Z+
    727c:	94 91       	lpm	r25, Z
    727e:	01 96       	adiw	r24, 0x01	; 1
    7280:	49 f0       	breq	.+18     	; 0x7294 <__vector_17+0x72>
    7282:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    7286:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    728a:	01 96       	adiw	r24, 0x01	; 1
    728c:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    7290:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    7294:	ff 91       	pop	r31
    7296:	ef 91       	pop	r30
    7298:	9f 91       	pop	r25
    729a:	8f 91       	pop	r24
    729c:	2f 91       	pop	r18
    729e:	0f 90       	pop	r0
    72a0:	0f be       	out	0x3f, r0	; 63
    72a2:	0f 90       	pop	r0
    72a4:	1f 90       	pop	r1
    72a6:	18 95       	reti

000072a8 <EVENT_USB_Device_ConfigurationChanged>:
    72a8:	42 e0       	ldi	r20, 0x02	; 2
    72aa:	61 ec       	ldi	r22, 0xC1	; 193
    72ac:	82 e0       	ldi	r24, 0x02	; 2
    72ae:	e9 d2       	rcall	.+1490   	; 0x7882 <Endpoint_ConfigureEndpoint_Prv>
    72b0:	42 e1       	ldi	r20, 0x12	; 18
    72b2:	61 e8       	ldi	r22, 0x81	; 129
    72b4:	83 e0       	ldi	r24, 0x03	; 3
    72b6:	e5 d2       	rcall	.+1482   	; 0x7882 <Endpoint_ConfigureEndpoint_Prv>
    72b8:	42 e1       	ldi	r20, 0x12	; 18
    72ba:	60 e8       	ldi	r22, 0x80	; 128
    72bc:	84 e0       	ldi	r24, 0x04	; 4
    72be:	e1 c2       	rjmp	.+1474   	; 0x7882 <Endpoint_ConfigureEndpoint_Prv>

000072c0 <EVENT_USB_Device_ControlRequest>:
    72c0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USB_ControlRequest>
    72c4:	98 2f       	mov	r25, r24
    72c6:	9f 77       	andi	r25, 0x7F	; 127
    72c8:	91 32       	cpi	r25, 0x21	; 33
    72ca:	39 f5       	brne	.+78     	; 0x731a <EVENT_USB_Device_ControlRequest+0x5a>
    72cc:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <USB_ControlRequest+0x1>
    72d0:	90 32       	cpi	r25, 0x20	; 32
    72d2:	91 f0       	breq	.+36     	; 0x72f8 <EVENT_USB_Device_ControlRequest+0x38>
    72d4:	91 32       	cpi	r25, 0x21	; 33
    72d6:	09 f5       	brne	.+66     	; 0x731a <EVENT_USB_Device_ControlRequest+0x5a>
    72d8:	81 3a       	cpi	r24, 0xA1	; 161
    72da:	f9 f4       	brne	.+62     	; 0x731a <EVENT_USB_Device_ControlRequest+0x5a>
    72dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72e0:	87 7f       	andi	r24, 0xF7	; 247
    72e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72e6:	67 e0       	ldi	r22, 0x07	; 7
    72e8:	70 e0       	ldi	r23, 0x00	; 0
    72ea:	80 e0       	ldi	r24, 0x00	; 0
    72ec:	91 e0       	ldi	r25, 0x01	; 1
    72ee:	fa d3       	rcall	.+2036   	; 0x7ae4 <Endpoint_Write_Control_Stream_LE>
    72f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72f4:	8b 77       	andi	r24, 0x7B	; 123
    72f6:	0f c0       	rjmp	.+30     	; 0x7316 <EVENT_USB_Device_ControlRequest+0x56>
    72f8:	81 32       	cpi	r24, 0x21	; 33
    72fa:	79 f4       	brne	.+30     	; 0x731a <EVENT_USB_Device_ControlRequest+0x5a>
    72fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7300:	87 7f       	andi	r24, 0xF7	; 247
    7302:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7306:	67 e0       	ldi	r22, 0x07	; 7
    7308:	70 e0       	ldi	r23, 0x00	; 0
    730a:	80 e0       	ldi	r24, 0x00	; 0
    730c:	91 e0       	ldi	r25, 0x01	; 1
    730e:	42 d4       	rcall	.+2180   	; 0x7b94 <Endpoint_Read_Control_Stream_LE>
    7310:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7314:	8e 77       	andi	r24, 0x7E	; 126
    7316:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    731a:	08 95       	ret

0000731c <CDC_Task>:
    731c:	4f 92       	push	r4
    731e:	5f 92       	push	r5
    7320:	6f 92       	push	r6
    7322:	7f 92       	push	r7
    7324:	8f 92       	push	r8
    7326:	9f 92       	push	r9
    7328:	af 92       	push	r10
    732a:	bf 92       	push	r11
    732c:	cf 92       	push	r12
    732e:	df 92       	push	r13
    7330:	ef 92       	push	r14
    7332:	ff 92       	push	r15
    7334:	0f 93       	push	r16
    7336:	1f 93       	push	r17
    7338:	cf 93       	push	r28
    733a:	df 93       	push	r29
    733c:	84 e0       	ldi	r24, 0x04	; 4
    733e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7346:	82 ff       	sbrs	r24, 2
    7348:	2b c2       	rjmp	.+1110   	; 0x77a0 <CDC_Task+0x484>
    734a:	28 98       	cbi	0x05, 0	; 5
    734c:	84 e6       	ldi	r24, 0x64	; 100
    734e:	90 e0       	ldi	r25, 0x00	; 0
    7350:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <RxLEDPulse+0x1>
    7354:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <RxLEDPulse>
    7358:	cf de       	rcall	.-610    	; 0x70f8 <FetchNextCommandByte>
    735a:	c8 2f       	mov	r28, r24
    735c:	85 34       	cpi	r24, 0x45	; 69
    735e:	81 f4       	brne	.+32     	; 0x7380 <CDC_Task+0x64>
    7360:	84 ef       	ldi	r24, 0xF4	; 244
    7362:	9f ef       	ldi	r25, 0xFF	; 255
    7364:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    7368:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    736c:	07 b6       	in	r0, 0x37	; 55
    736e:	00 fc       	sbrc	r0, 0
    7370:	fd cf       	rjmp	.-6      	; 0x736c <CDC_Task+0x50>
    7372:	f9 99       	sbic	0x1f, 1	; 31
    7374:	fe cf       	rjmp	.-4      	; 0x7372 <CDC_Task+0x56>
    7376:	81 e1       	ldi	r24, 0x11	; 17
    7378:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    737c:	e8 95       	spm
    737e:	03 c0       	rjmp	.+6      	; 0x7386 <CDC_Task+0x6a>
    7380:	84 35       	cpi	r24, 0x54	; 84
    7382:	21 f4       	brne	.+8      	; 0x738c <CDC_Task+0x70>
    7384:	b9 de       	rcall	.-654    	; 0x70f8 <FetchNextCommandByte>
    7386:	8d e0       	ldi	r24, 0x0D	; 13
    7388:	ce de       	rcall	.-612    	; 0x7126 <WriteNextResponseByte>
    738a:	e1 c1       	rjmp	.+962    	; 0x774e <CDC_Task+0x432>
    738c:	8c 34       	cpi	r24, 0x4C	; 76
    738e:	d9 f3       	breq	.-10     	; 0x7386 <CDC_Task+0x6a>
    7390:	80 35       	cpi	r24, 0x50	; 80
    7392:	c9 f3       	breq	.-14     	; 0x7386 <CDC_Task+0x6a>
    7394:	84 37       	cpi	r24, 0x74	; 116
    7396:	21 f4       	brne	.+8      	; 0x73a0 <CDC_Task+0x84>
    7398:	84 e4       	ldi	r24, 0x44	; 68
    739a:	c5 de       	rcall	.-630    	; 0x7126 <WriteNextResponseByte>
    739c:	80 e0       	ldi	r24, 0x00	; 0
    739e:	f4 cf       	rjmp	.-24     	; 0x7388 <CDC_Task+0x6c>
    73a0:	81 36       	cpi	r24, 0x61	; 97
    73a2:	11 f4       	brne	.+4      	; 0x73a8 <CDC_Task+0x8c>
    73a4:	89 e5       	ldi	r24, 0x59	; 89
    73a6:	f0 cf       	rjmp	.-32     	; 0x7388 <CDC_Task+0x6c>
    73a8:	81 34       	cpi	r24, 0x41	; 65
    73aa:	91 f4       	brne	.+36     	; 0x73d0 <CDC_Task+0xb4>
    73ac:	a5 de       	rcall	.-694    	; 0x70f8 <FetchNextCommandByte>
    73ae:	c8 2f       	mov	r28, r24
    73b0:	a3 de       	rcall	.-698    	; 0x70f8 <FetchNextCommandByte>
    73b2:	2c 2f       	mov	r18, r28
    73b4:	30 e0       	ldi	r19, 0x00	; 0
    73b6:	32 2f       	mov	r19, r18
    73b8:	22 27       	eor	r18, r18
    73ba:	33 0f       	add	r19, r19
    73bc:	90 e0       	ldi	r25, 0x00	; 0
    73be:	88 0f       	add	r24, r24
    73c0:	99 1f       	adc	r25, r25
    73c2:	82 2b       	or	r24, r18
    73c4:	93 2b       	or	r25, r19
    73c6:	09 2e       	mov	r0, r25
    73c8:	00 0c       	add	r0, r0
    73ca:	aa 0b       	sbc	r26, r26
    73cc:	bb 0b       	sbc	r27, r27
    73ce:	93 c1       	rjmp	.+806    	; 0x76f6 <CDC_Task+0x3da>
    73d0:	80 37       	cpi	r24, 0x70	; 112
    73d2:	11 f4       	brne	.+4      	; 0x73d8 <CDC_Task+0xbc>
    73d4:	83 e5       	ldi	r24, 0x53	; 83
    73d6:	d8 cf       	rjmp	.-80     	; 0x7388 <CDC_Task+0x6c>
    73d8:	83 35       	cpi	r24, 0x53	; 83
    73da:	49 f4       	brne	.+18     	; 0x73ee <CDC_Task+0xd2>
    73dc:	cb e8       	ldi	r28, 0x8B	; 139
    73de:	d1 e0       	ldi	r29, 0x01	; 1
    73e0:	89 91       	ld	r24, Y+
    73e2:	a1 de       	rcall	.-702    	; 0x7126 <WriteNextResponseByte>
    73e4:	21 e0       	ldi	r18, 0x01	; 1
    73e6:	c2 39       	cpi	r28, 0x92	; 146
    73e8:	d2 07       	cpc	r29, r18
    73ea:	d1 f7       	brne	.-12     	; 0x73e0 <CDC_Task+0xc4>
    73ec:	b0 c1       	rjmp	.+864    	; 0x774e <CDC_Task+0x432>
    73ee:	86 35       	cpi	r24, 0x56	; 86
    73f0:	21 f4       	brne	.+8      	; 0x73fa <CDC_Task+0xde>
    73f2:	81 e3       	ldi	r24, 0x31	; 49
    73f4:	98 de       	rcall	.-720    	; 0x7126 <WriteNextResponseByte>
    73f6:	80 e3       	ldi	r24, 0x30	; 48
    73f8:	c7 cf       	rjmp	.-114    	; 0x7388 <CDC_Task+0x6c>
    73fa:	83 37       	cpi	r24, 0x73	; 115
    73fc:	31 f4       	brne	.+12     	; 0x740a <CDC_Task+0xee>
    73fe:	87 e8       	ldi	r24, 0x87	; 135
    7400:	92 de       	rcall	.-732    	; 0x7126 <WriteNextResponseByte>
    7402:	85 e9       	ldi	r24, 0x95	; 149
    7404:	90 de       	rcall	.-736    	; 0x7126 <WriteNextResponseByte>
    7406:	8e e1       	ldi	r24, 0x1E	; 30
    7408:	bf cf       	rjmp	.-130    	; 0x7388 <CDC_Task+0x6c>
    740a:	85 36       	cpi	r24, 0x65	; 101
    740c:	b9 f4       	brne	.+46     	; 0x743c <CDC_Task+0x120>
    740e:	e0 e0       	ldi	r30, 0x00	; 0
    7410:	f0 e0       	ldi	r31, 0x00	; 0
    7412:	83 e0       	ldi	r24, 0x03	; 3
    7414:	95 e0       	ldi	r25, 0x05	; 5
    7416:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    741a:	e8 95       	spm
    741c:	07 b6       	in	r0, 0x37	; 55
    741e:	00 fc       	sbrc	r0, 0
    7420:	fd cf       	rjmp	.-6      	; 0x741c <CDC_Task+0x100>
    7422:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7426:	e8 95       	spm
    7428:	07 b6       	in	r0, 0x37	; 55
    742a:	00 fc       	sbrc	r0, 0
    742c:	fd cf       	rjmp	.-6      	; 0x7428 <CDC_Task+0x10c>
    742e:	e0 58       	subi	r30, 0x80	; 128
    7430:	ff 4f       	sbci	r31, 0xFF	; 255
    7432:	e1 15       	cp	r30, r1
    7434:	40 e7       	ldi	r20, 0x70	; 112
    7436:	f4 07       	cpc	r31, r20
    7438:	71 f7       	brne	.-36     	; 0x7416 <CDC_Task+0xfa>
    743a:	a5 cf       	rjmp	.-182    	; 0x7386 <CDC_Task+0x6a>
    743c:	82 37       	cpi	r24, 0x72	; 114
    743e:	19 f4       	brne	.+6      	; 0x7446 <CDC_Task+0x12a>
    7440:	e1 e0       	ldi	r30, 0x01	; 1
    7442:	f0 e0       	ldi	r31, 0x00	; 0
    7444:	0e c0       	rjmp	.+28     	; 0x7462 <CDC_Task+0x146>
    7446:	86 34       	cpi	r24, 0x46	; 70
    7448:	19 f4       	brne	.+6      	; 0x7450 <CDC_Task+0x134>
    744a:	e0 e0       	ldi	r30, 0x00	; 0
    744c:	f0 e0       	ldi	r31, 0x00	; 0
    744e:	09 c0       	rjmp	.+18     	; 0x7462 <CDC_Task+0x146>
    7450:	8e 34       	cpi	r24, 0x4E	; 78
    7452:	19 f4       	brne	.+6      	; 0x745a <CDC_Task+0x13e>
    7454:	e3 e0       	ldi	r30, 0x03	; 3
    7456:	f0 e0       	ldi	r31, 0x00	; 0
    7458:	04 c0       	rjmp	.+8      	; 0x7462 <CDC_Task+0x146>
    745a:	81 35       	cpi	r24, 0x51	; 81
    745c:	39 f4       	brne	.+14     	; 0x746c <CDC_Task+0x150>
    745e:	e2 e0       	ldi	r30, 0x02	; 2
    7460:	f0 e0       	ldi	r31, 0x00	; 0
    7462:	89 e0       	ldi	r24, 0x09	; 9
    7464:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7468:	84 91       	lpm	r24, Z
    746a:	8e cf       	rjmp	.-228    	; 0x7388 <CDC_Task+0x6c>
    746c:	82 36       	cpi	r24, 0x62	; 98
    746e:	31 f4       	brne	.+12     	; 0x747c <CDC_Task+0x160>
    7470:	89 e5       	ldi	r24, 0x59	; 89
    7472:	59 de       	rcall	.-846    	; 0x7126 <WriteNextResponseByte>
    7474:	80 e0       	ldi	r24, 0x00	; 0
    7476:	57 de       	rcall	.-850    	; 0x7126 <WriteNextResponseByte>
    7478:	80 e8       	ldi	r24, 0x80	; 128
    747a:	86 cf       	rjmp	.-244    	; 0x7388 <CDC_Task+0x6c>
    747c:	82 34       	cpi	r24, 0x42	; 66
    747e:	19 f0       	breq	.+6      	; 0x7486 <CDC_Task+0x16a>
    7480:	87 36       	cpi	r24, 0x67	; 103
    7482:	09 f0       	breq	.+2      	; 0x7486 <CDC_Task+0x16a>
    7484:	d0 c0       	rjmp	.+416    	; 0x7626 <CDC_Task+0x30a>
    7486:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
    748a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
    748e:	34 de       	rcall	.-920    	; 0x70f8 <FetchNextCommandByte>
    7490:	08 2f       	mov	r16, r24
    7492:	32 de       	rcall	.-924    	; 0x70f8 <FetchNextCommandByte>
    7494:	d8 2f       	mov	r29, r24
    7496:	30 de       	rcall	.-928    	; 0x70f8 <FetchNextCommandByte>
    7498:	18 2f       	mov	r17, r24
    749a:	8b eb       	ldi	r24, 0xBB	; 187
    749c:	81 0f       	add	r24, r17
    749e:	82 30       	cpi	r24, 0x02	; 2
    74a0:	10 f0       	brcs	.+4      	; 0x74a6 <CDC_Task+0x18a>
    74a2:	8f e3       	ldi	r24, 0x3F	; 63
    74a4:	71 cf       	rjmp	.-286    	; 0x7388 <CDC_Task+0x6c>
    74a6:	8d 2f       	mov	r24, r29
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	90 2b       	or	r25, r16
    74ac:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    74b0:	c7 36       	cpi	r28, 0x67	; 103
    74b2:	09 f0       	breq	.+2      	; 0x74b6 <CDC_Task+0x19a>
    74b4:	42 c0       	rjmp	.+132    	; 0x753a <CDC_Task+0x21e>
    74b6:	21 e1       	ldi	r18, 0x11	; 17
    74b8:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    74bc:	e8 95       	spm
    74be:	ec 01       	movw	r28, r24
    74c0:	b1 2c       	mov	r11, r1
    74c2:	01 e0       	ldi	r16, 0x01	; 1
    74c4:	20 97       	sbiw	r28, 0x00	; 0
    74c6:	09 f4       	brne	.+2      	; 0x74ca <CDC_Task+0x1ae>
    74c8:	aa c0       	rjmp	.+340    	; 0x761e <CDC_Task+0x302>
    74ca:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <CurrAddress>
    74ce:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <CurrAddress+0x1>
    74d2:	e0 90 9c 01 	lds	r14, 0x019C	; 0x80019c <CurrAddress+0x2>
    74d6:	f0 90 9d 01 	lds	r15, 0x019D	; 0x80019d <CurrAddress+0x3>
    74da:	16 34       	cpi	r17, 0x46	; 70
    74dc:	b9 f4       	brne	.+46     	; 0x750c <CDC_Task+0x1f0>
    74de:	eb 2d       	mov	r30, r11
    74e0:	f0 e0       	ldi	r31, 0x00	; 0
    74e2:	ec 29       	or	r30, r12
    74e4:	fd 29       	or	r31, r13
    74e6:	84 91       	lpm	r24, Z
    74e8:	1e de       	rcall	.-964    	; 0x7126 <WriteNextResponseByte>
    74ea:	bb 20       	and	r11, r11
    74ec:	69 f0       	breq	.+26     	; 0x7508 <CDC_Task+0x1ec>
    74ee:	52 e0       	ldi	r21, 0x02	; 2
    74f0:	c5 0e       	add	r12, r21
    74f2:	d1 1c       	adc	r13, r1
    74f4:	e1 1c       	adc	r14, r1
    74f6:	f1 1c       	adc	r15, r1
    74f8:	c0 92 9a 01 	sts	0x019A, r12	; 0x80019a <CurrAddress>
    74fc:	d0 92 9b 01 	sts	0x019B, r13	; 0x80019b <CurrAddress+0x1>
    7500:	e0 92 9c 01 	sts	0x019C, r14	; 0x80019c <CurrAddress+0x2>
    7504:	f0 92 9d 01 	sts	0x019D, r15	; 0x80019d <CurrAddress+0x3>
    7508:	b0 26       	eor	r11, r16
    750a:	15 c0       	rjmp	.+42     	; 0x7536 <CDC_Task+0x21a>
    750c:	d7 01       	movw	r26, r14
    750e:	c6 01       	movw	r24, r12
    7510:	b6 95       	lsr	r27
    7512:	a7 95       	ror	r26
    7514:	97 95       	ror	r25
    7516:	87 95       	ror	r24
    7518:	91 d4       	rcall	.+2338   	; 0x7e3c <eeprom_read_byte>
    751a:	05 de       	rcall	.-1014   	; 0x7126 <WriteNextResponseByte>
    751c:	82 e0       	ldi	r24, 0x02	; 2
    751e:	c8 0e       	add	r12, r24
    7520:	d1 1c       	adc	r13, r1
    7522:	e1 1c       	adc	r14, r1
    7524:	f1 1c       	adc	r15, r1
    7526:	c0 92 9a 01 	sts	0x019A, r12	; 0x80019a <CurrAddress>
    752a:	d0 92 9b 01 	sts	0x019B, r13	; 0x80019b <CurrAddress+0x1>
    752e:	e0 92 9c 01 	sts	0x019C, r14	; 0x80019c <CurrAddress+0x2>
    7532:	f0 92 9d 01 	sts	0x019D, r15	; 0x80019d <CurrAddress+0x3>
    7536:	21 97       	sbiw	r28, 0x01	; 1
    7538:	c5 cf       	rjmp	.-118    	; 0x74c4 <CDC_Task+0x1a8>
    753a:	80 90 9a 01 	lds	r8, 0x019A	; 0x80019a <CurrAddress>
    753e:	90 90 9b 01 	lds	r9, 0x019B	; 0x80019b <CurrAddress+0x1>
    7542:	a0 90 9c 01 	lds	r10, 0x019C	; 0x80019c <CurrAddress+0x2>
    7546:	b0 90 9d 01 	lds	r11, 0x019D	; 0x80019d <CurrAddress+0x3>
    754a:	16 34       	cpi	r17, 0x46	; 70
    754c:	41 f4       	brne	.+16     	; 0x755e <CDC_Task+0x242>
    754e:	23 e0       	ldi	r18, 0x03	; 3
    7550:	f4 01       	movw	r30, r8
    7552:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7556:	e8 95       	spm
    7558:	07 b6       	in	r0, 0x37	; 55
    755a:	00 fc       	sbrc	r0, 0
    755c:	fd cf       	rjmp	.-6      	; 0x7558 <CDC_Task+0x23c>
    755e:	e1 2c       	mov	r14, r1
    7560:	f1 2c       	mov	r15, r1
    7562:	ec 01       	movw	r28, r24
    7564:	01 e0       	ldi	r16, 0x01	; 1
    7566:	20 97       	sbiw	r28, 0x00	; 0
    7568:	09 f4       	brne	.+2      	; 0x756c <CDC_Task+0x250>
    756a:	4d c0       	rjmp	.+154    	; 0x7606 <CDC_Task+0x2ea>
    756c:	16 34       	cpi	r17, 0x46	; 70
    756e:	39 f5       	brne	.+78     	; 0x75be <CDC_Task+0x2a2>
    7570:	ff 20       	and	r15, r15
    7572:	09 f1       	breq	.+66     	; 0x75b6 <CDC_Task+0x29a>
    7574:	40 90 9a 01 	lds	r4, 0x019A	; 0x80019a <CurrAddress>
    7578:	50 90 9b 01 	lds	r5, 0x019B	; 0x80019b <CurrAddress+0x1>
    757c:	60 90 9c 01 	lds	r6, 0x019C	; 0x80019c <CurrAddress+0x2>
    7580:	70 90 9d 01 	lds	r7, 0x019D	; 0x80019d <CurrAddress+0x3>
    7584:	b9 dd       	rcall	.-1166   	; 0x70f8 <FetchNextCommandByte>
    7586:	2e 2d       	mov	r18, r14
    7588:	30 e0       	ldi	r19, 0x00	; 0
    758a:	a9 01       	movw	r20, r18
    758c:	58 2b       	or	r21, r24
    758e:	f2 01       	movw	r30, r4
    7590:	0a 01       	movw	r0, r20
    7592:	00 93 57 00 	sts	0x0057, r16	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7596:	e8 95       	spm
    7598:	11 24       	eor	r1, r1
    759a:	f2 e0       	ldi	r31, 0x02	; 2
    759c:	4f 0e       	add	r4, r31
    759e:	51 1c       	adc	r5, r1
    75a0:	61 1c       	adc	r6, r1
    75a2:	71 1c       	adc	r7, r1
    75a4:	40 92 9a 01 	sts	0x019A, r4	; 0x80019a <CurrAddress>
    75a8:	50 92 9b 01 	sts	0x019B, r5	; 0x80019b <CurrAddress+0x1>
    75ac:	60 92 9c 01 	sts	0x019C, r6	; 0x80019c <CurrAddress+0x2>
    75b0:	70 92 9d 01 	sts	0x019D, r7	; 0x80019d <CurrAddress+0x3>
    75b4:	02 c0       	rjmp	.+4      	; 0x75ba <CDC_Task+0x29e>
    75b6:	a0 dd       	rcall	.-1216   	; 0x70f8 <FetchNextCommandByte>
    75b8:	e8 2e       	mov	r14, r24
    75ba:	f0 26       	eor	r15, r16
    75bc:	22 c0       	rjmp	.+68     	; 0x7602 <CDC_Task+0x2e6>
    75be:	9c dd       	rcall	.-1224   	; 0x70f8 <FetchNextCommandByte>
    75c0:	68 2f       	mov	r22, r24
    75c2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CurrAddress>
    75c6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <CurrAddress+0x1>
    75ca:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <CurrAddress+0x2>
    75ce:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <CurrAddress+0x3>
    75d2:	b6 95       	lsr	r27
    75d4:	a7 95       	ror	r26
    75d6:	97 95       	ror	r25
    75d8:	87 95       	ror	r24
    75da:	38 d4       	rcall	.+2160   	; 0x7e4c <eeprom_write_byte>
    75dc:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CurrAddress>
    75e0:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <CurrAddress+0x1>
    75e4:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <CurrAddress+0x2>
    75e8:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <CurrAddress+0x3>
    75ec:	02 96       	adiw	r24, 0x02	; 2
    75ee:	a1 1d       	adc	r26, r1
    75f0:	b1 1d       	adc	r27, r1
    75f2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <CurrAddress>
    75f6:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <CurrAddress+0x1>
    75fa:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <CurrAddress+0x2>
    75fe:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <CurrAddress+0x3>
    7602:	21 97       	sbiw	r28, 0x01	; 1
    7604:	b0 cf       	rjmp	.-160    	; 0x7566 <CDC_Task+0x24a>
    7606:	16 34       	cpi	r17, 0x46	; 70
    7608:	41 f4       	brne	.+16     	; 0x761a <CDC_Task+0x2fe>
    760a:	85 e0       	ldi	r24, 0x05	; 5
    760c:	f4 01       	movw	r30, r8
    760e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7612:	e8 95       	spm
    7614:	07 b6       	in	r0, 0x37	; 55
    7616:	00 fc       	sbrc	r0, 0
    7618:	fd cf       	rjmp	.-6      	; 0x7614 <CDC_Task+0x2f8>
    761a:	8d e0       	ldi	r24, 0x0D	; 13
    761c:	84 dd       	rcall	.-1272   	; 0x7126 <WriteNextResponseByte>
    761e:	82 e0       	ldi	r24, 0x02	; 2
    7620:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    7624:	94 c0       	rjmp	.+296    	; 0x774e <CDC_Task+0x432>
    7626:	83 34       	cpi	r24, 0x43	; 67
    7628:	71 f4       	brne	.+28     	; 0x7646 <CDC_Task+0x32a>
    762a:	c0 91 9a 01 	lds	r28, 0x019A	; 0x80019a <CurrAddress>
    762e:	d0 91 9b 01 	lds	r29, 0x019B	; 0x80019b <CurrAddress+0x1>
    7632:	62 dd       	rcall	.-1340   	; 0x70f8 <FetchNextCommandByte>
    7634:	90 e0       	ldi	r25, 0x00	; 0
    7636:	21 e0       	ldi	r18, 0x01	; 1
    7638:	fe 01       	movw	r30, r28
    763a:	0c 01       	movw	r0, r24
    763c:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7640:	e8 95       	spm
    7642:	11 24       	eor	r1, r1
    7644:	a0 ce       	rjmp	.-704    	; 0x7386 <CDC_Task+0x6a>
    7646:	83 36       	cpi	r24, 0x63	; 99
    7648:	01 f5       	brne	.+64     	; 0x768a <CDC_Task+0x36e>
    764a:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <CurrAddress>
    764e:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <CurrAddress+0x1>
    7652:	e0 90 9c 01 	lds	r14, 0x019C	; 0x80019c <CurrAddress+0x2>
    7656:	f0 90 9d 01 	lds	r15, 0x019D	; 0x80019d <CurrAddress+0x3>
    765a:	4e dd       	rcall	.-1380   	; 0x70f8 <FetchNextCommandByte>
    765c:	f6 01       	movw	r30, r12
    765e:	e1 60       	ori	r30, 0x01	; 1
    7660:	90 e0       	ldi	r25, 0x00	; 0
    7662:	21 e0       	ldi	r18, 0x01	; 1
    7664:	0c 01       	movw	r0, r24
    7666:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    766a:	e8 95       	spm
    766c:	11 24       	eor	r1, r1
    766e:	f2 e0       	ldi	r31, 0x02	; 2
    7670:	cf 0e       	add	r12, r31
    7672:	d1 1c       	adc	r13, r1
    7674:	e1 1c       	adc	r14, r1
    7676:	f1 1c       	adc	r15, r1
    7678:	c0 92 9a 01 	sts	0x019A, r12	; 0x80019a <CurrAddress>
    767c:	d0 92 9b 01 	sts	0x019B, r13	; 0x80019b <CurrAddress+0x1>
    7680:	e0 92 9c 01 	sts	0x019C, r14	; 0x80019c <CurrAddress+0x2>
    7684:	f0 92 9d 01 	sts	0x019D, r15	; 0x80019d <CurrAddress+0x3>
    7688:	7e ce       	rjmp	.-772    	; 0x7386 <CDC_Task+0x6a>
    768a:	8d 36       	cpi	r24, 0x6D	; 109
    768c:	61 f4       	brne	.+24     	; 0x76a6 <CDC_Task+0x38a>
    768e:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <CurrAddress>
    7692:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <CurrAddress+0x1>
    7696:	85 e0       	ldi	r24, 0x05	; 5
    7698:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    769c:	e8 95       	spm
    769e:	07 b6       	in	r0, 0x37	; 55
    76a0:	00 fc       	sbrc	r0, 0
    76a2:	fd cf       	rjmp	.-6      	; 0x769e <CDC_Task+0x382>
    76a4:	70 ce       	rjmp	.-800    	; 0x7386 <CDC_Task+0x6a>
    76a6:	82 35       	cpi	r24, 0x52	; 82
    76a8:	51 f4       	brne	.+20     	; 0x76be <CDC_Task+0x3a2>
    76aa:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <CurrAddress>
    76ae:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <CurrAddress+0x1>
    76b2:	c5 91       	lpm	r28, Z+
    76b4:	d4 91       	lpm	r29, Z
    76b6:	8d 2f       	mov	r24, r29
    76b8:	36 dd       	rcall	.-1428   	; 0x7126 <WriteNextResponseByte>
    76ba:	8c 2f       	mov	r24, r28
    76bc:	65 ce       	rjmp	.-822    	; 0x7388 <CDC_Task+0x6c>
    76be:	84 34       	cpi	r24, 0x44	; 68
    76c0:	19 f5       	brne	.+70     	; 0x7708 <CDC_Task+0x3ec>
    76c2:	1a dd       	rcall	.-1484   	; 0x70f8 <FetchNextCommandByte>
    76c4:	68 2f       	mov	r22, r24
    76c6:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CurrAddress>
    76ca:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <CurrAddress+0x1>
    76ce:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <CurrAddress+0x2>
    76d2:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <CurrAddress+0x3>
    76d6:	b6 95       	lsr	r27
    76d8:	a7 95       	ror	r26
    76da:	97 95       	ror	r25
    76dc:	87 95       	ror	r24
    76de:	b6 d3       	rcall	.+1900   	; 0x7e4c <eeprom_write_byte>
    76e0:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CurrAddress>
    76e4:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <CurrAddress+0x1>
    76e8:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <CurrAddress+0x2>
    76ec:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <CurrAddress+0x3>
    76f0:	02 96       	adiw	r24, 0x02	; 2
    76f2:	a1 1d       	adc	r26, r1
    76f4:	b1 1d       	adc	r27, r1
    76f6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <CurrAddress>
    76fa:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <CurrAddress+0x1>
    76fe:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <CurrAddress+0x2>
    7702:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <CurrAddress+0x3>
    7706:	3f ce       	rjmp	.-898    	; 0x7386 <CDC_Task+0x6a>
    7708:	84 36       	cpi	r24, 0x64	; 100
    770a:	f1 f4       	brne	.+60     	; 0x7748 <CDC_Task+0x42c>
    770c:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <CurrAddress>
    7710:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <CurrAddress+0x1>
    7714:	e0 90 9c 01 	lds	r14, 0x019C	; 0x80019c <CurrAddress+0x2>
    7718:	f0 90 9d 01 	lds	r15, 0x019D	; 0x80019d <CurrAddress+0x3>
    771c:	d7 01       	movw	r26, r14
    771e:	c6 01       	movw	r24, r12
    7720:	b6 95       	lsr	r27
    7722:	a7 95       	ror	r26
    7724:	97 95       	ror	r25
    7726:	87 95       	ror	r24
    7728:	89 d3       	rcall	.+1810   	; 0x7e3c <eeprom_read_byte>
    772a:	fd dc       	rcall	.-1542   	; 0x7126 <WriteNextResponseByte>
    772c:	22 e0       	ldi	r18, 0x02	; 2
    772e:	c2 0e       	add	r12, r18
    7730:	d1 1c       	adc	r13, r1
    7732:	e1 1c       	adc	r14, r1
    7734:	f1 1c       	adc	r15, r1
    7736:	c0 92 9a 01 	sts	0x019A, r12	; 0x80019a <CurrAddress>
    773a:	d0 92 9b 01 	sts	0x019B, r13	; 0x80019b <CurrAddress+0x1>
    773e:	e0 92 9c 01 	sts	0x019C, r14	; 0x80019c <CurrAddress+0x2>
    7742:	f0 92 9d 01 	sts	0x019D, r15	; 0x80019d <CurrAddress+0x3>
    7746:	03 c0       	rjmp	.+6      	; 0x774e <CDC_Task+0x432>
    7748:	8b 31       	cpi	r24, 0x1B	; 27
    774a:	09 f0       	breq	.+2      	; 0x774e <CDC_Task+0x432>
    774c:	aa ce       	rjmp	.-684    	; 0x74a2 <CDC_Task+0x186>
    774e:	83 e0       	ldi	r24, 0x03	; 3
    7750:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7754:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7758:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    775c:	8e 77       	andi	r24, 0x7E	; 126
    775e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7762:	95 fd       	sbrc	r25, 5
    7764:	11 c0       	rjmp	.+34     	; 0x7788 <CDC_Task+0x46c>
    7766:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    776a:	80 fd       	sbrc	r24, 0
    776c:	04 c0       	rjmp	.+8      	; 0x7776 <CDC_Task+0x45a>
    776e:	8e b3       	in	r24, 0x1e	; 30
    7770:	81 11       	cpse	r24, r1
    7772:	f9 cf       	rjmp	.-14     	; 0x7766 <CDC_Task+0x44a>
    7774:	15 c0       	rjmp	.+42     	; 0x77a0 <CDC_Task+0x484>
    7776:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    777a:	8e 77       	andi	r24, 0x7E	; 126
    777c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7780:	03 c0       	rjmp	.+6      	; 0x7788 <CDC_Task+0x46c>
    7782:	8e b3       	in	r24, 0x1e	; 30
    7784:	88 23       	and	r24, r24
    7786:	61 f0       	breq	.+24     	; 0x77a0 <CDC_Task+0x484>
    7788:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    778c:	80 ff       	sbrs	r24, 0
    778e:	f9 cf       	rjmp	.-14     	; 0x7782 <CDC_Task+0x466>
    7790:	84 e0       	ldi	r24, 0x04	; 4
    7792:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7796:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    779a:	8b 77       	andi	r24, 0x7B	; 123
    779c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    77a0:	df 91       	pop	r29
    77a2:	cf 91       	pop	r28
    77a4:	1f 91       	pop	r17
    77a6:	0f 91       	pop	r16
    77a8:	ff 90       	pop	r15
    77aa:	ef 90       	pop	r14
    77ac:	df 90       	pop	r13
    77ae:	cf 90       	pop	r12
    77b0:	bf 90       	pop	r11
    77b2:	af 90       	pop	r10
    77b4:	9f 90       	pop	r9
    77b6:	8f 90       	pop	r8
    77b8:	7f 90       	pop	r7
    77ba:	6f 90       	pop	r6
    77bc:	5f 90       	pop	r5
    77be:	4f 90       	pop	r4
    77c0:	08 95       	ret

000077c2 <main>:
    77c2:	14 be       	out	0x34, r1	; 52
    77c4:	0f b6       	in	r0, 0x3f	; 63
    77c6:	f8 94       	cli
    77c8:	a8 95       	wdr
    77ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    77ce:	88 61       	ori	r24, 0x18	; 24
    77d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    77d4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    77d8:	0f be       	out	0x3f, r0	; 63
    77da:	6a 98       	cbi	0x0d, 2	; 13
    77dc:	72 9a       	sbi	0x0e, 2	; 14
    77de:	8f e1       	ldi	r24, 0x1F	; 31
    77e0:	9e e4       	ldi	r25, 0x4E	; 78
    77e2:	01 97       	sbiw	r24, 0x01	; 1
    77e4:	f1 f7       	brne	.-4      	; 0x77e2 <main+0x20>
    77e6:	00 c0       	rjmp	.+0      	; 0x77e8 <main+0x26>
    77e8:	00 00       	nop
    77ea:	62 9b       	sbis	0x0c, 2	; 12
    77ec:	06 c0       	rjmp	.+12     	; 0x77fa <main+0x38>
    77ee:	e0 e0       	ldi	r30, 0x00	; 0
    77f0:	f0 e0       	ldi	r31, 0x00	; 0
    77f2:	85 91       	lpm	r24, Z+
    77f4:	94 91       	lpm	r25, Z
    77f6:	01 96       	adiw	r24, 0x01	; 1
    77f8:	41 f4       	brne	.+16     	; 0x780a <main+0x48>
    77fa:	f9 dc       	rcall	.-1550   	; 0x71ee <SetupHardware>
    77fc:	78 94       	sei
    77fe:	62 99       	sbic	0x0c, 2	; 12
    7800:	04 c0       	rjmp	.+8      	; 0x780a <main+0x48>
    7802:	8c dd       	rcall	.-1256   	; 0x731c <CDC_Task>
    7804:	04 d3       	rcall	.+1544   	; 0x7e0e <USB_USBTask>
    7806:	da dc       	rcall	.-1612   	; 0x71bc <LEDPulse>
    7808:	fa cf       	rjmp	.-12     	; 0x77fe <main+0x3c>
    780a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    780e:	81 60       	ori	r24, 0x01	; 1
    7810:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    7814:	ca dc       	rcall	.-1644   	; 0x71aa <SetupCurrentLimit>
    7816:	a5 dc       	rcall	.-1718   	; 0x7162 <StartSketch>
    7818:	80 e0       	ldi	r24, 0x00	; 0
    781a:	90 e0       	ldi	r25, 0x00	; 0
    781c:	08 95       	ret

0000781e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    781e:	29 2f       	mov	r18, r25
    7820:	30 e0       	ldi	r19, 0x00	; 0
    7822:	22 30       	cpi	r18, 0x02	; 2
    7824:	31 05       	cpc	r19, r1
    7826:	59 f0       	breq	.+22     	; 0x783e <CALLBACK_USB_GetDescriptor+0x20>
    7828:	23 30       	cpi	r18, 0x03	; 3
    782a:	31 05       	cpc	r19, r1
    782c:	69 f0       	breq	.+26     	; 0x7848 <CALLBACK_USB_GetDescriptor+0x2a>
    782e:	21 30       	cpi	r18, 0x01	; 1
    7830:	31 05       	cpc	r19, r1
    7832:	f9 f4       	brne	.+62     	; 0x7872 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    7834:	82 e1       	ldi	r24, 0x12	; 18
    7836:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    7838:	29 e7       	ldi	r18, 0x79	; 121
    783a:	31 e0       	ldi	r19, 0x01	; 1
    783c:	1e c0       	rjmp	.+60     	; 0x787a <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    783e:	8e e3       	ldi	r24, 0x3E	; 62
    7840:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    7842:	2b e3       	ldi	r18, 0x3B	; 59
    7844:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    7846:	19 c0       	rjmp	.+50     	; 0x787a <CALLBACK_USB_GetDescriptor+0x5c>
		case DTYPE_String:
			if (!(DescriptorNumber))
    7848:	88 23       	and	r24, r24
    784a:	49 f0       	breq	.+18     	; 0x785e <CALLBACK_USB_GetDescriptor+0x40>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    784c:	81 30       	cpi	r24, 0x01	; 1
    784e:	61 f0       	breq	.+24     	; 0x7868 <CALLBACK_USB_GetDescriptor+0x4a>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    7850:	82 30       	cpi	r24, 0x02	; 2
    7852:	79 f4       	brne	.+30     	; 0x7872 <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &ManufNameString;
				Size	= ManufNameString.Header.Size;
    7854:	80 e1       	ldi	r24, 0x10	; 16
    7856:	90 e0       	ldi	r25, 0x00	; 0
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
    7858:	27 e0       	ldi	r18, 0x07	; 7
    785a:	31 e0       	ldi	r19, 0x01	; 1
    785c:	0e c0       	rjmp	.+28     	; 0x787a <CALLBACK_USB_GetDescriptor+0x5c>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    785e:	84 e0       	ldi	r24, 0x04	; 4
    7860:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    7862:	27 e3       	ldi	r18, 0x37	; 55
    7864:	31 e0       	ldi	r19, 0x01	; 1
    7866:	09 c0       	rjmp	.+18     	; 0x787a <CALLBACK_USB_GetDescriptor+0x5c>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    7868:	8c e1       	ldi	r24, 0x1C	; 28
    786a:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
    786c:	29 e1       	ldi	r18, 0x19	; 25
    786e:	31 e0       	ldi	r19, 0x01	; 1
    7870:	04 c0       	rjmp	.+8      	; 0x787a <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    7872:	80 e0       	ldi	r24, 0x00	; 0
    7874:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    7876:	20 e0       	ldi	r18, 0x00	; 0
    7878:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    787a:	fa 01       	movw	r30, r20
    787c:	31 83       	std	Z+1, r19	; 0x01
    787e:	20 83       	st	Z, r18
	return Size;
}
    7880:	08 95       	ret

00007882 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    7882:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7886:	eb ee       	ldi	r30, 0xEB	; 235
    7888:	f0 e0       	ldi	r31, 0x00	; 0
    788a:	80 81       	ld	r24, Z
    788c:	81 60       	ori	r24, 0x01	; 1
    788e:	80 83       	st	Z, r24
    7890:	ed ee       	ldi	r30, 0xED	; 237
    7892:	f0 e0       	ldi	r31, 0x00	; 0
    7894:	10 82       	st	Z, r1
    7896:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    789a:	40 83       	st	Z, r20
    789c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    78a0:	88 1f       	adc	r24, r24
    78a2:	88 27       	eor	r24, r24
    78a4:	88 1f       	adc	r24, r24
    78a6:	08 95       	ret

000078a8 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    78a8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USB_ControlRequest>
    78ac:	87 ff       	sbrs	r24, 7
    78ae:	0f c0       	rjmp	.+30     	; 0x78ce <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    78b4:	82 fd       	sbrc	r24, 2
    78b6:	04 c0       	rjmp	.+8      	; 0x78c0 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78b8:	8e b3       	in	r24, 0x1e	; 30
    78ba:	81 11       	cpse	r24, r1
    78bc:	f9 cf       	rjmp	.-14     	; 0x78b0 <Endpoint_ClearStatusStage+0x8>
    78be:	10 c0       	rjmp	.+32     	; 0x78e0 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    78c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    78c4:	8b 77       	andi	r24, 0x7B	; 123
    78c6:	0a c0       	rjmp	.+20     	; 0x78dc <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78c8:	8e b3       	in	r24, 0x1e	; 30
    78ca:	88 23       	and	r24, r24
    78cc:	49 f0       	breq	.+18     	; 0x78e0 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    78ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    78d2:	80 ff       	sbrs	r24, 0
    78d4:	f9 cf       	rjmp	.-14     	; 0x78c8 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    78da:	8e 77       	andi	r24, 0x7E	; 126
    78dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    78e0:	08 95       	ret

000078e2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    78e2:	0f 93       	push	r16
    78e4:	1f 93       	push	r17
    78e6:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    78e8:	df 93       	push	r29
    78ea:	41 d0       	rcall	.+130    	; 0x796e <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    78ec:	48 d0       	rcall	.+144    	; 0x797e <USB_INT_ClearAllInterrupts>
    78ee:	c8 ed       	ldi	r28, 0xD8	; 216
    78f0:	d0 e0       	ldi	r29, 0x00	; 0
    78f2:	88 81       	ld	r24, Y
    78f4:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
    78f6:	88 83       	st	Y, r24
    78f8:	88 81       	ld	r24, Y
    78fa:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    78fc:	88 83       	st	Y, r24
    78fe:	88 81       	ld	r24, Y
    7900:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7902:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    7904:	19 bc       	out	0x29, r1	; 41
	USB_Device_ConfigurationNumber  = 0;
    7906:	1e ba       	out	0x1e, r1	; 30
    7908:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <USB_Device_ConfigurationNumber>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    790c:	00 ee       	ldi	r16, 0xE0	; 224
    790e:	10 e0       	ldi	r17, 0x00	; 0
    7910:	f8 01       	movw	r30, r16
    7912:	80 81       	ld	r24, Z
    7914:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7916:	80 83       	st	Z, r24
    7918:	88 81       	ld	r24, Y
    791a:	81 60       	ori	r24, 0x01	; 1
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    791c:	88 83       	st	Y, r24
    791e:	42 e0       	ldi	r20, 0x02	; 2
    7920:	60 e0       	ldi	r22, 0x00	; 0
    7922:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7924:	ae df       	rcall	.-164    	; 0x7882 <Endpoint_ConfigureEndpoint_Prv>
    7926:	e1 ee       	ldi	r30, 0xE1	; 225
    7928:	f0 e0       	ldi	r31, 0x00	; 0
    792a:	80 81       	ld	r24, Z
    792c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    792e:	80 83       	st	Z, r24
    7930:	e2 ee       	ldi	r30, 0xE2	; 226
    7932:	f0 e0       	ldi	r31, 0x00	; 0
    7934:	80 81       	ld	r24, Z
    7936:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7938:	80 83       	st	Z, r24
    793a:	80 81       	ld	r24, Z
    793c:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    793e:	80 83       	st	Z, r24
    7940:	f8 01       	movw	r30, r16
    7942:	80 81       	ld	r24, Z
    7944:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    7946:	80 83       	st	Z, r24
    7948:	88 81       	ld	r24, Y
    794a:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    794c:	88 83       	st	Y, r24
    794e:	df 91       	pop	r29
    7950:	cf 91       	pop	r28
    7952:	1f 91       	pop	r17
    7954:	0f 91       	pop	r16
    7956:	08 95       	ret

00007958 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    7958:	e7 ed       	ldi	r30, 0xD7	; 215
    795a:	f0 e0       	ldi	r31, 0x00	; 0
    795c:	80 81       	ld	r24, Z
    795e:	81 60       	ori	r24, 0x01	; 1
    7960:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    7962:	8a e4       	ldi	r24, 0x4A	; 74
    7964:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7966:	81 e0       	ldi	r24, 0x01	; 1
    7968:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <USB_IsInitialized>
    796c:	ba cf       	rjmp	.-140    	; 0x78e2 <USB_ResetInterface>

0000796e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    796e:	e8 ed       	ldi	r30, 0xD8	; 216
    7970:	f0 e0       	ldi	r31, 0x00	; 0
    7972:	80 81       	ld	r24, Z
    7974:	8e 7f       	andi	r24, 0xFE	; 254
    7976:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7978:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    797c:	08 95       	ret

0000797e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    797e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7982:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7986:	08 95       	ret

00007988 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7988:	1f 92       	push	r1
    798a:	0f 92       	push	r0
    798c:	0f b6       	in	r0, 0x3f	; 63
    798e:	0f 92       	push	r0
    7990:	11 24       	eor	r1, r1
    7992:	2f 93       	push	r18
    7994:	3f 93       	push	r19
    7996:	4f 93       	push	r20
    7998:	5f 93       	push	r21
    799a:	6f 93       	push	r22
    799c:	7f 93       	push	r23
    799e:	8f 93       	push	r24
    79a0:	9f 93       	push	r25
    79a2:	af 93       	push	r26
    79a4:	bf 93       	push	r27
    79a6:	ef 93       	push	r30
    79a8:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    79aa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    79ae:	80 ff       	sbrs	r24, 0
    79b0:	19 c0       	rjmp	.+50     	; 0x79e4 <__vector_10+0x5c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    79b2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    79b6:	80 ff       	sbrs	r24, 0
    79b8:	15 c0       	rjmp	.+42     	; 0x79e4 <__vector_10+0x5c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    79ba:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    79be:	8e 7f       	andi	r24, 0xFE	; 254
    79c0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    79c4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    79c8:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    79ca:	80 ff       	sbrs	r24, 0
    79cc:	09 c0       	rjmp	.+18     	; 0x79e0 <__vector_10+0x58>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    79ce:	82 e0       	ldi	r24, 0x02	; 2
    79d0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    79d2:	09 b4       	in	r0, 0x29	; 41
    79d4:	00 fe       	sbrs	r0, 0
    79d6:	fd cf       	rjmp	.-6      	; 0x79d2 <__vector_10+0x4a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    79d8:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
    79da:	8e bb       	out	0x1e, r24	; 30
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
    79dc:	17 d2       	rcall	.+1070   	; 0x7e0c <USB_Event_Stub>
    79de:	02 c0       	rjmp	.+4      	; 0x79e4 <__vector_10+0x5c>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    79e0:	1e ba       	out	0x1e, r1	; 30
    79e2:	14 d2       	rcall	.+1064   	; 0x7e0c <USB_Event_Stub>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    79e4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    79e8:	80 ff       	sbrs	r24, 0
    79ea:	17 c0       	rjmp	.+46     	; 0x7a1a <__vector_10+0x92>
    79ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    79f0:	80 ff       	sbrs	r24, 0
    79f2:	13 c0       	rjmp	.+38     	; 0x7a1a <__vector_10+0x92>
    79f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79f8:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    79fa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a02:	80 61       	ori	r24, 0x10	; 16
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7a04:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a08:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a0c:	80 62       	ori	r24, 0x20	; 32

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7a0e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		EVENT_USB_Device_Suspend();
    7a12:	19 bc       	out	0x29, r1	; 41
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7a14:	85 e0       	ldi	r24, 0x05	; 5
    7a16:	8e bb       	out	0x1e, r24	; 30
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7a18:	f9 d1       	rcall	.+1010   	; 0x7e0c <USB_Event_Stub>
    7a1a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7a1e:	84 ff       	sbrs	r24, 4
    7a20:	2b c0       	rjmp	.+86     	; 0x7a78 <__vector_10+0xf0>
    7a22:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a26:	84 ff       	sbrs	r24, 4
    7a28:	27 c0       	rjmp	.+78     	; 0x7a78 <__vector_10+0xf0>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7a2a:	19 bc       	out	0x29, r1	; 41
    7a2c:	82 e0       	ldi	r24, 0x02	; 2
    7a2e:	89 bd       	out	0x29, r24	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7a30:	09 b4       	in	r0, 0x29	; 41
    7a32:	00 fe       	sbrs	r0, 0
    7a34:	fd cf       	rjmp	.-6      	; 0x7a30 <__vector_10+0xa8>
    7a36:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7a3a:	8f 7d       	andi	r24, 0xDF	; 223
    7a3c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7a40:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7a44:	8f 7e       	andi	r24, 0xEF	; 239
    7a46:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a4e:	8f 7e       	andi	r24, 0xEF	; 239
    7a50:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a54:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7a58:	81 60       	ori	r24, 0x01	; 1
    7a5a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a5e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_Device_ConfigurationNumber>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7a62:	81 11       	cpse	r24, r1
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a64:	06 c0       	rjmp	.+12     	; 0x7a72 <__vector_10+0xea>
    7a66:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7a6a:	87 fd       	sbrc	r24, 7
    7a6c:	02 c0       	rjmp	.+4      	; 0x7a72 <__vector_10+0xea>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7a6e:	81 e0       	ldi	r24, 0x01	; 1
    7a70:	01 c0       	rjmp	.+2      	; 0x7a74 <__vector_10+0xec>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7a72:	84 e0       	ldi	r24, 0x04	; 4
    7a74:	8e bb       	out	0x1e, r24	; 30
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7a76:	ca d1       	rcall	.+916    	; 0x7e0c <USB_Event_Stub>
    7a78:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7a7c:	83 ff       	sbrs	r24, 3
    7a7e:	21 c0       	rjmp	.+66     	; 0x7ac2 <__vector_10+0x13a>
    7a80:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7a84:	83 ff       	sbrs	r24, 3
    7a86:	1d c0       	rjmp	.+58     	; 0x7ac2 <__vector_10+0x13a>
    7a88:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7a8c:	87 7f       	andi	r24, 0xF7	; 247
    7a8e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		USB_Device_ConfigurationNumber = 0;
    7a92:	82 e0       	ldi	r24, 0x02	; 2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7a94:	8e bb       	out	0x1e, r24	; 30
    7a96:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <USB_Device_ConfigurationNumber>
    7a9a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7a9e:	8e 7f       	andi	r24, 0xFE	; 254
    7aa0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7aa4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7aa8:	8e 7f       	andi	r24, 0xFE	; 254
    7aaa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7aae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7ab2:	80 61       	ori	r24, 0x10	; 16
    7ab4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7ab8:	42 e0       	ldi	r20, 0x02	; 2
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7aba:	60 e0       	ldi	r22, 0x00	; 0
    7abc:	80 e0       	ldi	r24, 0x00	; 0
    7abe:	e1 de       	rcall	.-574    	; 0x7882 <Endpoint_ConfigureEndpoint_Prv>
    7ac0:	a5 d1       	rcall	.+842    	; 0x7e0c <USB_Event_Stub>
    7ac2:	ff 91       	pop	r31
    7ac4:	ef 91       	pop	r30
    7ac6:	bf 91       	pop	r27
    7ac8:	af 91       	pop	r26
    7aca:	9f 91       	pop	r25
    7acc:	8f 91       	pop	r24
    7ace:	7f 91       	pop	r23
    7ad0:	6f 91       	pop	r22
    7ad2:	5f 91       	pop	r21
    7ad4:	4f 91       	pop	r20
    7ad6:	3f 91       	pop	r19
    7ad8:	2f 91       	pop	r18
    7ada:	0f 90       	pop	r0
    7adc:	0f be       	out	0x3f, r0	; 63
    7ade:	0f 90       	pop	r0
    7ae0:	1f 90       	pop	r1
    7ae2:	18 95       	reti

00007ae4 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7ae4:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x6>
    7ae8:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <USB_ControlRequest+0x7>
    7aec:	26 17       	cp	r18, r22
    7aee:	37 07       	cpc	r19, r23
    7af0:	48 f0       	brcs	.+18     	; 0x7b04 <Endpoint_Write_Control_Stream_LE+0x20>
    7af2:	61 15       	cp	r22, r1
    7af4:	71 05       	cpc	r23, r1
    7af6:	39 f4       	brne	.+14     	; 0x7b06 <Endpoint_Write_Control_Stream_LE+0x22>
    7af8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7afc:	2e 77       	andi	r18, 0x7E	; 126
    7afe:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b02:	01 c0       	rjmp	.+2      	; 0x7b06 <Endpoint_Write_Control_Stream_LE+0x22>
    7b04:	b9 01       	movw	r22, r18
    7b06:	fc 01       	movw	r30, r24
    7b08:	20 e0       	ldi	r18, 0x00	; 0
    7b0a:	61 15       	cp	r22, r1
    7b0c:	71 05       	cpc	r23, r1
    7b0e:	71 f1       	breq	.+92     	; 0x7b6c <Endpoint_Write_Control_Stream_LE+0x88>
    7b10:	8e b3       	in	r24, 0x1e	; 30
    7b12:	88 23       	and	r24, r24
    7b14:	d9 f1       	breq	.+118    	; 0x7b8c <Endpoint_Write_Control_Stream_LE+0xa8>
    7b16:	85 30       	cpi	r24, 0x05	; 5
    7b18:	d9 f1       	breq	.+118    	; 0x7b90 <Endpoint_Write_Control_Stream_LE+0xac>
    7b1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b1e:	83 fd       	sbrc	r24, 3
    7b20:	33 c0       	rjmp	.+102    	; 0x7b88 <Endpoint_Write_Control_Stream_LE+0xa4>
    7b22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b26:	82 fd       	sbrc	r24, 2
    7b28:	29 c0       	rjmp	.+82     	; 0x7b7c <Endpoint_Write_Control_Stream_LE+0x98>
    7b2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b2e:	80 ff       	sbrs	r24, 0
    7b30:	ec cf       	rjmp	.-40     	; 0x7b0a <Endpoint_Write_Control_Stream_LE+0x26>
    7b32:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7b36:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    7b3a:	90 e0       	ldi	r25, 0x00	; 0
    7b3c:	92 2b       	or	r25, r18
    7b3e:	61 15       	cp	r22, r1
    7b40:	71 05       	cpc	r23, r1
    7b42:	51 f0       	breq	.+20     	; 0x7b58 <Endpoint_Write_Control_Stream_LE+0x74>
    7b44:	88 30       	cpi	r24, 0x08	; 8
    7b46:	91 05       	cpc	r25, r1
    7b48:	38 f4       	brcc	.+14     	; 0x7b58 <Endpoint_Write_Control_Stream_LE+0x74>
    7b4a:	21 91       	ld	r18, Z+
    7b4c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7b50:	61 50       	subi	r22, 0x01	; 1
    7b52:	71 09       	sbc	r23, r1
    7b54:	01 96       	adiw	r24, 0x01	; 1
    7b56:	f3 cf       	rjmp	.-26     	; 0x7b3e <Endpoint_Write_Control_Stream_LE+0x5a>
    7b58:	21 e0       	ldi	r18, 0x01	; 1
    7b5a:	08 97       	sbiw	r24, 0x08	; 8
    7b5c:	09 f0       	breq	.+2      	; 0x7b60 <Endpoint_Write_Control_Stream_LE+0x7c>
    7b5e:	20 e0       	ldi	r18, 0x00	; 0
    7b60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b64:	8e 77       	andi	r24, 0x7E	; 126
    7b66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b6a:	cf cf       	rjmp	.-98     	; 0x7b0a <Endpoint_Write_Control_Stream_LE+0x26>
    7b6c:	21 11       	cpse	r18, r1
    7b6e:	d0 cf       	rjmp	.-96     	; 0x7b10 <Endpoint_Write_Control_Stream_LE+0x2c>
    7b70:	05 c0       	rjmp	.+10     	; 0x7b7c <Endpoint_Write_Control_Stream_LE+0x98>
    7b72:	8e b3       	in	r24, 0x1e	; 30
    7b74:	88 23       	and	r24, r24
    7b76:	51 f0       	breq	.+20     	; 0x7b8c <Endpoint_Write_Control_Stream_LE+0xa8>
    7b78:	85 30       	cpi	r24, 0x05	; 5
    7b7a:	51 f0       	breq	.+20     	; 0x7b90 <Endpoint_Write_Control_Stream_LE+0xac>
    7b7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b80:	82 ff       	sbrs	r24, 2
    7b82:	f7 cf       	rjmp	.-18     	; 0x7b72 <Endpoint_Write_Control_Stream_LE+0x8e>
    7b84:	80 e0       	ldi	r24, 0x00	; 0
    7b86:	08 95       	ret
    7b88:	81 e0       	ldi	r24, 0x01	; 1
    7b8a:	08 95       	ret
    7b8c:	82 e0       	ldi	r24, 0x02	; 2
    7b8e:	08 95       	ret
    7b90:	83 e0       	ldi	r24, 0x03	; 3
    7b92:	08 95       	ret

00007b94 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7b94:	61 15       	cp	r22, r1
    7b96:	71 05       	cpc	r23, r1
    7b98:	29 f4       	brne	.+10     	; 0x7ba4 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7b9a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b9e:	2b 77       	andi	r18, 0x7B	; 123
    7ba0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7ba4:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7ba6:	61 15       	cp	r22, r1
    7ba8:	71 05       	cpc	r23, r1
    7baa:	31 f1       	breq	.+76     	; 0x7bf8 <Endpoint_Read_Control_Stream_LE+0x64>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bac:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bae:	88 23       	and	r24, r24
    7bb0:	59 f1       	breq	.+86     	; 0x7c08 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bb2:	85 30       	cpi	r24, 0x05	; 5
    7bb4:	59 f1       	breq	.+86     	; 0x7c0c <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7bba:	83 fd       	sbrc	r24, 3
    7bbc:	23 c0       	rjmp	.+70     	; 0x7c04 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7bbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7bc2:	82 ff       	sbrs	r24, 2
    7bc4:	f0 cf       	rjmp	.-32     	; 0x7ba6 <Endpoint_Read_Control_Stream_LE+0x12>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7bc6:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7bca:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		{
			while (Length && Endpoint_BytesInEndpoint())
    7bce:	90 e0       	ldi	r25, 0x00	; 0
    7bd0:	92 2b       	or	r25, r18
    7bd2:	89 2b       	or	r24, r25
    7bd4:	31 f0       	breq	.+12     	; 0x7be2 <Endpoint_Read_Control_Stream_LE+0x4e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7bd6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7bda:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7bdc:	61 50       	subi	r22, 0x01	; 1
    7bde:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7be0:	91 f7       	brne	.-28     	; 0x7bc6 <Endpoint_Read_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7be2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7be6:	8b 77       	andi	r24, 0x7B	; 123
    7be8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7bec:	dc cf       	rjmp	.-72     	; 0x7ba6 <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bee:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bf0:	88 23       	and	r24, r24
    7bf2:	51 f0       	breq	.+20     	; 0x7c08 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bf4:	85 30       	cpi	r24, 0x05	; 5
    7bf6:	51 f0       	breq	.+20     	; 0x7c0c <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7bf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7bfc:	80 ff       	sbrs	r24, 0
    7bfe:	f7 cf       	rjmp	.-18     	; 0x7bee <Endpoint_Read_Control_Stream_LE+0x5a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7c00:	80 e0       	ldi	r24, 0x00	; 0
    7c02:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7c04:	81 e0       	ldi	r24, 0x01	; 1
    7c06:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7c08:	82 e0       	ldi	r24, 0x02	; 2
    7c0a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c0c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7c0e:	08 95       	ret

00007c10 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c10:	0f 93       	push	r16
    7c12:	1f 93       	push	r17
    7c14:	cf 93       	push	r28
    7c16:	df 93       	push	r29
    7c18:	00 d0       	rcall	.+0      	; 0x7c1a <USB_Device_ProcessControlRequest+0xa>
    7c1a:	cd b7       	in	r28, 0x3d	; 61
    7c1c:	de b7       	in	r29, 0x3e	; 62
    7c1e:	e2 ea       	ldi	r30, 0xA2	; 162
    7c20:	f1 e0       	ldi	r31, 0x01	; 1
    7c22:	8a ea       	ldi	r24, 0xAA	; 170
    7c24:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c26:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c2a:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c2c:	8e 17       	cp	r24, r30
    7c2e:	9f 07       	cpc	r25, r31
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7c30:	d1 f7       	brne	.-12     	; 0x7c26 <USB_Device_ProcessControlRequest+0x16>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c32:	46 db       	rcall	.-2420   	; 0x72c0 <EVENT_USB_Device_ControlRequest>
    7c34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    7c38:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c3a:	d3 c0       	rjmp	.+422    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7c3c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7c40:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <USB_ControlRequest+0x1>
    7c44:	49 2f       	mov	r20, r25
    7c46:	50 e0       	ldi	r21, 0x00	; 0
    7c48:	4a 30       	cpi	r20, 0x0A	; 10
    7c4a:	51 05       	cpc	r21, r1
    7c4c:	08 f0       	brcs	.+2      	; 0x7c50 <USB_Device_ProcessControlRequest+0x40>
    7c4e:	c9 c0       	rjmp	.+402    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7c50:	fa 01       	movw	r30, r20
    7c52:	ea 5a       	subi	r30, 0xAA	; 170
    7c54:	f7 4c       	sbci	r31, 0xC7	; 199
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c56:	ec c0       	rjmp	.+472    	; 0x7e30 <__tablejump2__>
    7c58:	82 38       	cpi	r24, 0x82	; 130
    7c5a:	09 f0       	breq	.+2      	; 0x7c5e <USB_Device_ProcessControlRequest+0x4e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c5c:	c2 c0       	rjmp	.+388    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7c5e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c62:	87 70       	andi	r24, 0x07	; 7
    7c64:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c68:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c6c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c70:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c74:	97 7f       	andi	r25, 0xF7	; 247
    7c76:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7c7a:	85 fb       	bst	r24, 5
    7c7c:	88 27       	eor	r24, r24
    7c7e:	80 f9       	bld	r24, 0
    7c80:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    7c84:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c88:	85 c0       	rjmp	.+266    	; 0x7d94 <USB_Device_ProcessControlRequest+0x184>
    7c8a:	28 2f       	mov	r18, r24
    7c8c:	2d 7f       	andi	r18, 0xFD	; 253
    7c8e:	09 f0       	breq	.+2      	; 0x7c92 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7c90:	a8 c0       	rjmp	.+336    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7c92:	82 30       	cpi	r24, 0x02	; 2
    7c94:	09 f0       	breq	.+2      	; 0x7c98 <USB_Device_ProcessControlRequest+0x88>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7c96:	a5 c0       	rjmp	.+330    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7c98:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x2>
    7c9c:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c9e:	27 c0       	rjmp	.+78     	; 0x7cee <USB_Device_ProcessControlRequest+0xde>
    7ca0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7ca4:	87 70       	andi	r24, 0x07	; 7
    7ca6:	09 f4       	brne	.+2      	; 0x7caa <USB_Device_ProcessControlRequest+0x9a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ca8:	9c c0       	rjmp	.+312    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7caa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7cae:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7cb2:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7cb4:	1c c0       	rjmp	.+56     	; 0x7cee <USB_Device_ProcessControlRequest+0xde>
    7cb6:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7cb8:	21 f4       	brne	.+8      	; 0x7cc2 <USB_Device_ProcessControlRequest+0xb2>
    7cba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7cbe:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7cc0:	14 c0       	rjmp	.+40     	; 0x7cea <USB_Device_ProcessControlRequest+0xda>
    7cc2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7cc6:	90 61       	ori	r25, 0x10	; 16
    7cc8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7ccc:	21 e0       	ldi	r18, 0x01	; 1
    7cce:	30 e0       	ldi	r19, 0x00	; 0
    7cd0:	a9 01       	movw	r20, r18
    7cd2:	02 c0       	rjmp	.+4      	; 0x7cd8 <USB_Device_ProcessControlRequest+0xc8>
    7cd4:	44 0f       	add	r20, r20
    7cd6:	55 1f       	adc	r21, r21
    7cd8:	8a 95       	dec	r24
    7cda:	e2 f7       	brpl	.-8      	; 0x7cd4 <USB_Device_ProcessControlRequest+0xc4>
    7cdc:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    7ce0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7ce4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7ce8:	88 60       	ori	r24, 0x08	; 8
    7cea:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7cee:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cf2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7cf6:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7cf8:	50 c0       	rjmp	.+160    	; 0x7d9a <USB_Device_ProcessControlRequest+0x18a>
    7cfa:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7cfc:	72 c0       	rjmp	.+228    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7cfe:	10 91 a4 01 	lds	r17, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x2>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7d02:	1f 77       	andi	r17, 0x7F	; 127
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7d04:	0f b7       	in	r16, 0x3f	; 63
    7d06:	f8 94       	cli
    7d08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d0c:	87 7f       	andi	r24, 0xF7	; 247
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d12:	ca dd       	rcall	.-1132   	; 0x78a8 <Endpoint_ClearStatusStage>
    7d14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    7d18:	80 ff       	sbrs	r24, 0
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d1a:	fc cf       	rjmp	.-8      	; 0x7d14 <USB_Device_ProcessControlRequest+0x104>
    7d1c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7d20:	80 78       	andi	r24, 0x80	; 128

				UDADDR = Temp;
    7d22:	81 2b       	or	r24, r17
    7d24:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    7d28:	80 68       	ori	r24, 0x80	; 128
    7d2a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d2e:	11 11       	cpse	r17, r1
    7d30:	02 c0       	rjmp	.+4      	; 0x7d36 <USB_Device_ProcessControlRequest+0x126>
    7d32:	82 e0       	ldi	r24, 0x02	; 2
    7d34:	01 c0       	rjmp	.+2      	; 0x7d38 <USB_Device_ProcessControlRequest+0x128>
    7d36:	83 e0       	ldi	r24, 0x03	; 3
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7d38:	8e bb       	out	0x1e, r24	; 30
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    7d3a:	0f bf       	out	0x3f, r16	; 63
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d3c:	52 c0       	rjmp	.+164    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7d3e:	80 58       	subi	r24, 0x80	; 128
    7d40:	82 30       	cpi	r24, 0x02	; 2
    7d42:	08 f0       	brcs	.+2      	; 0x7d46 <USB_Device_ProcessControlRequest+0x136>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7d44:	4e c0       	rjmp	.+156    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7d46:	ae 01       	movw	r20, r28
    7d48:	4f 5f       	subi	r20, 0xFF	; 255
    7d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d4c:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <USB_ControlRequest+0x4>
    7d50:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x2>
    7d54:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <USB_ControlRequest+0x3>
    7d58:	62 dd       	rcall	.-1340   	; 0x781e <CALLBACK_USB_GetDescriptor>
    7d5a:	bc 01       	movw	r22, r24
    7d5c:	89 2b       	or	r24, r25
    7d5e:	09 f4       	brne	.+2      	; 0x7d62 <USB_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d60:	40 c0       	rjmp	.+128    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7d62:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d66:	97 7f       	andi	r25, 0xF7	; 247
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7d68:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d6c:	89 81       	ldd	r24, Y+1	; 0x01
    7d6e:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7d70:	b9 de       	rcall	.-654    	; 0x7ae4 <Endpoint_Write_Control_Stream_LE>
    7d72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d76:	8b 77       	andi	r24, 0x7B	; 123
    7d78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7d7c:	32 c0       	rjmp	.+100    	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7d7e:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d80:	81 f5       	brne	.+96     	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7d82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d86:	87 7f       	andi	r24, 0xF7	; 247
    7d88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7d8c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_Device_ConfigurationNumber>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7d90:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7d94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7d98:	8e 77       	andi	r24, 0x7E	; 126
    7d9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d9e:	84 dd       	rcall	.-1272   	; 0x78a8 <Endpoint_ClearStatusStage>
    7da0:	20 c0       	rjmp	.+64     	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7da2:	81 11       	cpse	r24, r1
    7da4:	1e c0       	rjmp	.+60     	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7da6:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x2>
    7daa:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <USB_ControlRequest+0x3>
    7dae:	99 27       	eor	r25, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7db0:	02 97       	sbiw	r24, 0x02	; 2
    7db2:	bc f4       	brge	.+46     	; 0x7de2 <USB_Device_ProcessControlRequest+0x1d2>
    7db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7db8:	87 7f       	andi	r24, 0xF7	; 247
    7dba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7dbe:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
    7dc2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
    7dc6:	70 dd       	rcall	.-1312   	; 0x78a8 <Endpoint_ClearStatusStage>
    7dc8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_Device_ConfigurationNumber>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7dcc:	81 11       	cpse	r24, r1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7dce:	06 c0       	rjmp	.+12     	; 0x7ddc <USB_Device_ProcessControlRequest+0x1cc>
    7dd0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7dd4:	87 fd       	sbrc	r24, 7
    7dd6:	02 c0       	rjmp	.+4      	; 0x7ddc <USB_Device_ProcessControlRequest+0x1cc>
    7dd8:	81 e0       	ldi	r24, 0x01	; 1

	EVENT_USB_Device_ConfigurationChanged();
    7dda:	01 c0       	rjmp	.+2      	; 0x7dde <USB_Device_ProcessControlRequest+0x1ce>
    7ddc:	84 e0       	ldi	r24, 0x04	; 4
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7dde:	8e bb       	out	0x1e, r24	; 30
    7de0:	63 da       	rcall	.-2874   	; 0x72a8 <EVENT_USB_Device_ConfigurationChanged>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7de2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7de6:	83 ff       	sbrs	r24, 3
    7de8:	0a c0       	rjmp	.+20     	; 0x7dfe <USB_Device_ProcessControlRequest+0x1ee>
    7dea:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7dee:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7df0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7df4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7df8:	87 7f       	andi	r24, 0xF7	; 247
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    7dfa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7dfe:	0f 90       	pop	r0
    7e00:	0f 90       	pop	r0
    7e02:	df 91       	pop	r29
    7e04:	cf 91       	pop	r28
    7e06:	1f 91       	pop	r17
    7e08:	0f 91       	pop	r16
    7e0a:	08 95       	ret

00007e0c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7e0c:	08 95       	ret

00007e0e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e0e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7e10:	8e b3       	in	r24, 0x1e	; 30
    7e12:	88 23       	and	r24, r24
    7e14:	59 f0       	breq	.+22     	; 0x7e2c <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7e16:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7e1a:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e1c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
		  USB_Device_ProcessControlRequest();
    7e24:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e26:	f4 de       	rcall	.-536    	; 0x7c10 <USB_Device_ProcessControlRequest>
    7e28:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7e2c:	cf 91       	pop	r28
    7e2e:	08 95       	ret

00007e30 <__tablejump2__>:
    7e30:	ee 0f       	add	r30, r30
    7e32:	ff 1f       	adc	r31, r31
    7e34:	05 90       	lpm	r0, Z+
    7e36:	f4 91       	lpm	r31, Z
    7e38:	e0 2d       	mov	r30, r0
    7e3a:	09 94       	ijmp

00007e3c <eeprom_read_byte>:
    7e3c:	f9 99       	sbic	0x1f, 1	; 31
    7e3e:	fe cf       	rjmp	.-4      	; 0x7e3c <eeprom_read_byte>
    7e40:	92 bd       	out	0x22, r25	; 34
    7e42:	81 bd       	out	0x21, r24	; 33
    7e44:	f8 9a       	sbi	0x1f, 0	; 31
    7e46:	99 27       	eor	r25, r25
    7e48:	80 b5       	in	r24, 0x20	; 32
    7e4a:	08 95       	ret

00007e4c <eeprom_write_byte>:
    7e4c:	26 2f       	mov	r18, r22

00007e4e <eeprom_write_r18>:
    7e4e:	f9 99       	sbic	0x1f, 1	; 31
    7e50:	fe cf       	rjmp	.-4      	; 0x7e4e <eeprom_write_r18>
    7e52:	1f ba       	out	0x1f, r1	; 31
    7e54:	92 bd       	out	0x22, r25	; 34
    7e56:	81 bd       	out	0x21, r24	; 33
    7e58:	20 bd       	out	0x20, r18	; 32
    7e5a:	0f b6       	in	r0, 0x3f	; 63
    7e5c:	f8 94       	cli
    7e5e:	fa 9a       	sbi	0x1f, 2	; 31
    7e60:	f9 9a       	sbi	0x1f, 1	; 31
    7e62:	0f be       	out	0x3f, r0	; 63
    7e64:	01 96       	adiw	r24, 0x01	; 1
    7e66:	08 95       	ret

00007e68 <_exit>:
    7e68:	f8 94       	cli

00007e6a <__stop_program>:
    7e6a:	ff cf       	rjmp	.-2      	; 0x7e6a <__stop_program>
