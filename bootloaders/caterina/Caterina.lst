   1               		.file	"Caterina.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.FetchNextCommandByte,"ax",@progbits
  12               	FetchNextCommandByte:
  13               	.LFB110:
  14               		.file 1 "Caterina.c"
   1:Caterina.c    **** /*
   2:Caterina.c    ****              LUFA Library
   3:Caterina.c    ****      Copyright (C) Dean Camera, 2011.
   4:Caterina.c    **** 
   5:Caterina.c    ****   dean [at] fourwalledcubicle [dot] com
   6:Caterina.c    ****            www.lufa-lib.org
   7:Caterina.c    **** */
   8:Caterina.c    **** 
   9:Caterina.c    **** /*
  10:Caterina.c    ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Caterina.c    **** 
  12:Caterina.c    ****   Permission to use, copy, modify, distribute, and sell this
  13:Caterina.c    ****   software and its documentation for any purpose is hereby granted
  14:Caterina.c    ****   without fee, provided that the above copyright notice appear in
  15:Caterina.c    ****   all copies and that both that the copyright notice and this
  16:Caterina.c    ****   permission notice and warranty disclaimer appear in supporting
  17:Caterina.c    ****   documentation, and that the name of the author not be used in
  18:Caterina.c    ****   advertising or publicity pertaining to distribution of the
  19:Caterina.c    ****   software without specific, written prior permission.
  20:Caterina.c    **** 
  21:Caterina.c    ****   The author disclaim all warranties with regard to this
  22:Caterina.c    ****   software, including all implied warranties of merchantability
  23:Caterina.c    ****   and fitness.  In no event shall the author be liable for any
  24:Caterina.c    ****   special, indirect or consequential damages or any damages
  25:Caterina.c    ****   whatsoever resulting from loss of use, data or profits, whether
  26:Caterina.c    ****   in an action of contract, negligence or other tortious action,
  27:Caterina.c    ****   arising out of or in connection with the use or performance of
  28:Caterina.c    ****   this software.
  29:Caterina.c    **** */
  30:Caterina.c    **** 
  31:Caterina.c    **** /*
  32:Caterina.c    **** Copyright (c) 2014 Pololu Corporation.  For more information, see
  33:Caterina.c    **** 
  34:Caterina.c    **** 
  35:Caterina.c    **** http://www.pololu.com/
  36:Caterina.c    **** http://forum.pololu.com/
  37:Caterina.c    **** 
  38:Caterina.c    **** Permission is hereby granted, free of charge, to any person
  39:Caterina.c    **** obtaining a copy of this software and associated documentation
  40:Caterina.c    **** files (the "Software"), to deal in the Software without
  41:Caterina.c    **** restriction, including without limitation the rights to use,
  42:Caterina.c    **** copy, modify, merge, publish, distribute, sublicense, and/or sell
  43:Caterina.c    **** copies of the Software, and to permit persons to whom the
  44:Caterina.c    **** Software is furnished to do so, subject to the following
  45:Caterina.c    **** conditions:
  46:Caterina.c    **** 
  47:Caterina.c    **** The above copyright notice and this permission notice shall be
  48:Caterina.c    **** included in all copies or substantial portions of the Software.
  49:Caterina.c    **** 
  50:Caterina.c    **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  51:Caterina.c    **** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  52:Caterina.c    **** OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  53:Caterina.c    **** NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  54:Caterina.c    **** HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  55:Caterina.c    **** WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  56:Caterina.c    **** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  57:Caterina.c    **** OTHER DEALINGS IN THE SOFTWARE.
  58:Caterina.c    **** */
  59:Caterina.c    **** 
  60:Caterina.c    **** /*
  61:Caterina.c    **** File modified by Jaap de Dood to remain in Bootloader while 3DoT power switch is in "Program" Posit
  62:Caterina.c    **** Current limit is set using TWI.
  63:Caterina.c    **** */
  64:Caterina.c    **** 
  65:Caterina.c    **** /** \file
  66:Caterina.c    ****  *
  67:Caterina.c    ****  *  Main source file for the CDC class bootloader. This file contains the complete bootloader logic
  68:Caterina.c    ****  */
  69:Caterina.c    **** 
  70:Caterina.c    **** #define  INCLUDE_FROM_CATERINA_C
  71:Caterina.c    **** #include "Caterina.h"
  72:Caterina.c    **** #include <util/delay.h> // for _delay_ms()
  73:Caterina.c    **** 
  74:Caterina.c    **** /** Contains the current baud rate and other settings of the first virtual serial port. This must b
  75:Caterina.c    ****  *  operating systems will not open the port unless the settings can be set successfully.
  76:Caterina.c    ****  */
  77:Caterina.c    **** static CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 0,
  78:Caterina.c    ****                                            .CharFormat  = CDC_LINEENCODING_OneStopBit,
  79:Caterina.c    ****                                            .ParityType  = CDC_PARITY_None,
  80:Caterina.c    ****                                            .DataBits    = 8                            };
  81:Caterina.c    **** 
  82:Caterina.c    **** /** Current address counter. This stores the current address of the FLASH or EEPROM as set by the h
  83:Caterina.c    ****  *  and is used when reading or writing to the AVRs memory (either FLASH or EEPROM depending on the
  84:Caterina.c    ****  *  command.)
  85:Caterina.c    ****  */
  86:Caterina.c    **** static uint32_t CurrAddress;
  87:Caterina.c    **** 
  88:Caterina.c    **** /** Flag to indicate if the bootloader should be running, or should exit and allow the application 
  89:Caterina.c    ****  *  via a watchdog reset. When cleared the bootloader will exit, starting the watchdog and entering
  90:Caterina.c    ****  *  loop until the AVR restarts and the application runs.
  91:Caterina.c    ****  */
  92:Caterina.c    **** //static bool RunBootloader = true;
  93:Caterina.c    **** 
  94:Caterina.c    **** /* Pulse generation counters to keep track of the time remaining for each pulse type */
  95:Caterina.c    **** #define TX_RX_LED_PULSE_PERIOD 100
  96:Caterina.c    **** uint16_t TxLEDPulse = 0; // time remaining for Tx LED pulse
  97:Caterina.c    **** uint16_t RxLEDPulse = 0; // time remaining for Rx LED pulse
  98:Caterina.c    **** 
  99:Caterina.c    **** /* Bootloader timeout timer */
 100:Caterina.c    **** #define TIMEOUT_PERIOD	488
 101:Caterina.c    **** uint16_t Timeout = 0;
 102:Caterina.c    **** 
 103:Caterina.c    **** /* MCP4017 current limit R = 100k(POT_STEPS/128), see TPS2553 datasheet for R/Ilim graph */
 104:Caterina.c    **** #define POT_STEPS 0x73 // ~250mA
 105:Caterina.c    **** #define SLA_W 0x5E // SLA = 0x2F, MSB transmitted first, W = 0
 106:Caterina.c    **** 
 107:Caterina.c    **** void StartSketch(void)
 108:Caterina.c    **** {
 109:Caterina.c    ****     cli();
 110:Caterina.c    **** 
 111:Caterina.c    ****     /* Undo TIMER1 setup and clear the count before running the sketch */
 112:Caterina.c    ****     TIMSK1 = 0;
 113:Caterina.c    ****     TCCR1B = 0;
 114:Caterina.c    ****     TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 115:Caterina.c    ****     TCNT1L = 0;
 116:Caterina.c    **** 
 117:Caterina.c    ****     /* Relocate the interrupt vector table to the application section */
 118:Caterina.c    ****     MCUCR = (1 << IVCE);
 119:Caterina.c    ****     MCUCR = 0;
 120:Caterina.c    **** 
 121:Caterina.c    ****     L_LED_OFF();
 122:Caterina.c    ****     TX_LED_OFF();
 123:Caterina.c    ****     RX_LED_OFF();
 124:Caterina.c    **** 
 125:Caterina.c    ****     /* jump to beginning of application space */
 126:Caterina.c    ****     __asm__ volatile("jmp 0x0000");
 127:Caterina.c    **** }
 128:Caterina.c    **** 
 129:Caterina.c    **** void TWIInit(void)
 130:Caterina.c    **** {
 131:Caterina.c    ****     /* Set SCL frequency to ~200kHz */
 132:Caterina.c    ****     TWSR = 0x00;
 133:Caterina.c    ****     TWBR = 0x0C;
 134:Caterina.c    **** 
 135:Caterina.c    ****     /* Enable TWI */
 136:Caterina.c    ****     TWCR = (1<<TWEN);
 137:Caterina.c    **** }
 138:Caterina.c    **** 
 139:Caterina.c    **** void TWIStart(void)
 140:Caterina.c    **** {
 141:Caterina.c    ****     /* Send START condition */
 142:Caterina.c    **** 
 143:Caterina.c    ****     /* Wait for TWINT Flag set. This indicates that the START condition has been transmitted */
 144:Caterina.c    ****     while(!(TWCR & (1<<TWINT)));
 145:Caterina.c    **** }
 146:Caterina.c    **** 
 147:Caterina.c    **** void TWIStop(void)
 148:Caterina.c    **** {
 149:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 150:Caterina.c    **** }
 151:Caterina.c    **** 
 152:Caterina.c    **** void TWIWrite(uint8_t u8data)
 153:Caterina.c    **** {
 154:Caterina.c    ****     /* Load data into TWDR Register. Clear TWINT bit in TWCR to start transmission */
 155:Caterina.c    ****     TWDR = u8data;
 156:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN);
 157:Caterina.c    ****     /* Wait for TWINT Flag set. This indicates that the data has been transmitted, and ACK/NACK has
 158:Caterina.c    ****     while(!(TWCR & (1<<TWINT)));
 159:Caterina.c    **** }
 160:Caterina.c    **** 
 161:Caterina.c    **** void SetupCurrentLimit(void)
 162:Caterina.c    **** {
 163:Caterina.c    ****     /* Initialize I2C */
 164:Caterina.c    ****     TWIStart();
 165:Caterina.c    **** 
 166:Caterina.c    ****     /* Write slave address (MCP4017) + Write bit */
 167:Caterina.c    ****     TWIWrite(SLA_W);
 168:Caterina.c    **** 
 169:Caterina.c    ****     /* Write resistance value */
 170:Caterina.c    ****     TWIWrite(POT_STEPS);
 171:Caterina.c    **** 
 172:Caterina.c    ****     TWIStop();
 173:Caterina.c    **** }
 174:Caterina.c    **** 
 175:Caterina.c    **** uint16_t ReadBatteryVoltage(void)
 176:Caterina.c    **** {
 177:Caterina.c    ****     /* Set PINF0 to Input */
 178:Caterina.c    ****     DDRF &= ~(1 << PF0);
 179:Caterina.c    ****     PORTF |= (1 << PF0);
 180:Caterina.c    **** 
 181:Caterina.c    ****     uint8_t low, high;
 182:Caterina.c    **** 
 183:Caterina.c    ****     /* Set the analog reference to Internal 2.56V */
 184:Caterina.c    ****     ADMUX |= (1 << REFS1) | (1 << REFS0);
 185:Caterina.c    ****     /* Set ADC Mux to ADC0 */
 186:Caterina.c    ****     ADMUX &= ~0b00011111;
 187:Caterina.c    ****     _delay_ms(1); // Just to be safe
 188:Caterina.c    **** 
 189:Caterina.c    ****     /* Start Conversion */
 190:Caterina.c    ****     ADCSRA |= (1<<ADSC);
 191:Caterina.c    **** 
 192:Caterina.c    ****     /* Wait for Conversion to finish. ADSC is cleared when the conversion finishes */
 193:Caterina.c    ****     while (bit_is_set(ADCSRA, ADSC));
 194:Caterina.c    **** 
 195:Caterina.c    ****     /* we read ADCL first; doing so locks both ADCL
 196:Caterina.c    ****      * and ADCH until ADCH is read. reading ADCL second would
 197:Caterina.c    ****      * cause the results of each conversion to be discarded,
 198:Caterina.c    ****      * as ADCL and ADCH would be locked when it completed. */
 199:Caterina.c    ****     low = ADCL;
 200:Caterina.c    ****     high = ADCH;
 201:Caterina.c    **** 
 202:Caterina.c    ****     // combine the two bytes
 203:Caterina.c    ****     return (high << 8) | low;
 204:Caterina.c    **** }
 205:Caterina.c    **** 
 206:Caterina.c    **** void AlertFatalError(void)
 207:Caterina.c    **** {
 208:Caterina.c    ****     /* Blink like mad */
 209:Caterina.c    ****     while(1)
 210:Caterina.c    ****     {
 211:Caterina.c    ****         TX_LED_ON();
 212:Caterina.c    ****         RX_LED_ON();
 213:Caterina.c    ****         L_LED_ON();
 214:Caterina.c    ****         _delay_ms(100);
 215:Caterina.c    ****         TX_LED_OFF();
 216:Caterina.c    ****         RX_LED_OFF();
 217:Caterina.c    ****         L_LED_OFF();
 218:Caterina.c    ****         _delay_ms(100);
 219:Caterina.c    ****     }
 220:Caterina.c    **** }
 221:Caterina.c    **** 
 222:Caterina.c    **** /*	Breathing animation on L LED indicates bootloader is running */
 223:Caterina.c    **** uint16_t LLEDPulse;
 224:Caterina.c    **** void LEDPulse(void)
 225:Caterina.c    **** {
 226:Caterina.c    ****     LLEDPulse++;
 227:Caterina.c    ****     uint8_t p = LLEDPulse >> 8;
 228:Caterina.c    ****     if (p > 127)
 229:Caterina.c    ****         p = 254-p;
 230:Caterina.c    ****     p += p;
 231:Caterina.c    ****     if (((uint8_t)LLEDPulse) > p)
 232:Caterina.c    ****         L_LED_OFF();
 233:Caterina.c    ****     else
 234:Caterina.c    ****         L_LED_ON();
 235:Caterina.c    **** }
 236:Caterina.c    **** 
 237:Caterina.c    **** /** Main program entry point. This routine configures the hardware required by the bootloader, then
 238:Caterina.c    ****  *  runs the bootloader processing routine until it times out or is instructed to exit.
 239:Caterina.c    ****  */
 240:Caterina.c    **** int main(void)
 241:Caterina.c    **** {
 242:Caterina.c    ****     /* Clear all reset flags - some may be used by sketch */
 243:Caterina.c    ****     MCUSR = 0;
 244:Caterina.c    ****     /* Watchdog may be configured with a 15 ms period so must disable it before going any further *
 245:Caterina.c    ****     wdt_disable();
 246:Caterina.c    **** 
 247:Caterina.c    ****     /* Initialize BootMode switch pin*/
 248:Caterina.c    ****     BootMode_Init();
 249:Caterina.c    ****     _delay_ms(10);    // allow time for caps to charge
 250:Caterina.c    **** 
 251:Caterina.c    ****     if ((isBootMode() || (pgm_read_word(0) == 0xFFFF)))
 252:Caterina.c    ****     {
 253:Caterina.c    ****         // Switch is in Boot mode position or there is no sketch
 254:Caterina.c    **** 
 255:Caterina.c    ****         /* Setup hardware required for the bootloader */
 256:Caterina.c    ****         SetupHardware();
 257:Caterina.c    **** 
 258:Caterina.c    ****         /* Enable global interrupts so that the USB stack can function */
 259:Caterina.c    ****         sei();
 260:Caterina.c    **** 
 261:Caterina.c    ****         while(isBootMode()){
 262:Caterina.c    ****             CDC_Task();
 263:Caterina.c    ****             USB_USBTask();
 264:Caterina.c    **** 
 265:Caterina.c    ****             LEDPulse();
 266:Caterina.c    ****         }
 267:Caterina.c    ****     }
 268:Caterina.c    ****     /* Disconnect from the host - USB interface will be reset later along with the AVR */
 269:Caterina.c    ****     USB_Detach();
 270:Caterina.c    **** 
 271:Caterina.c    ****     SetupCurrentLimit();
 272:Caterina.c    **** 
 273:Caterina.c    ****     /* Check battery voltage is above 3.3V */
 274:Caterina.c    ****     if(ReadBatteryVoltage < 745) {
 275:Caterina.c    ****         AlertFatalError();
 276:Caterina.c    ****     }
 277:Caterina.c    **** 
 278:Caterina.c    ****     /* Jump to beginning of application space to run the sketch - do not reset */
 279:Caterina.c    ****     StartSketch();
 280:Caterina.c    **** }
 281:Caterina.c    **** 
 282:Caterina.c    **** /** Configures all hardware re
 283:Caterina.c    ****     quired for the bootloader. */
 284:Caterina.c    **** void SetupHardware(void)
 285:Caterina.c    **** {
 286:Caterina.c    ****     /* Disable clock division */
 287:Caterina.c    ****     //clock_prescale_set(clock_div_1); // redundant
 288:Caterina.c    ****     CPU_PRESCALE(0);
 289:Caterina.c    **** 
 290:Caterina.c    ****     /* Relocate the interrupt vector table to the bootloader section */
 291:Caterina.c    ****     MCUCR = (1 << IVCE);
 292:Caterina.c    ****     MCUCR = (1 << IVSEL);
 293:Caterina.c    **** 
 294:Caterina.c    ****     LED_SETUP();
 295:Caterina.c    ****     L_LED_OFF();
 296:Caterina.c    ****     TX_LED_OFF();
 297:Caterina.c    ****     RX_LED_OFF();
 298:Caterina.c    **** 
 299:Caterina.c    ****     /* Initialize TIMER1 to handle bootloader timeout and LED tasks.
 300:Caterina.c    ****      * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
 301:Caterina.c    ****      * Our chosen compare match generates an interrupt every 1 ms.
 302:Caterina.c    ****      * This interrupt is disabled selectively when doing memory reading, erasing,
 303:Caterina.c    ****      * or writing since SPM has tight timing requirements.
 304:Caterina.c    ****      */
 305:Caterina.c    ****     OCR1AH = 0;
 306:Caterina.c    ****     OCR1AL = 250;
 307:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 308:Caterina.c    ****     TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 309:Caterina.c    **** 
 310:Caterina.c    ****     /* Initialize USB Subsystem */
 311:Caterina.c    ****     USB_Init();
 312:Caterina.c    **** }
 313:Caterina.c    **** 
 314:Caterina.c    **** //uint16_t ctr = 0;
 315:Caterina.c    **** ISR(TIMER1_COMPA_vect, ISR_BLOCK)
 316:Caterina.c    **** {
 317:Caterina.c    ****     /* Reset counter */
 318:Caterina.c    ****     TCNT1H = 0;
 319:Caterina.c    ****     TCNT1L = 0;
 320:Caterina.c    **** 
 321:Caterina.c    ****     /* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
 322:Caterina.c    ****     if (TxLEDPulse && !(--TxLEDPulse))
 323:Caterina.c    ****         TX_LED_OFF();
 324:Caterina.c    ****     if (RxLEDPulse && !(--RxLEDPulse))
 325:Caterina.c    ****         RX_LED_OFF();
 326:Caterina.c    **** 
 327:Caterina.c    ****     if (pgm_read_word(0) != 0xFFFF)
 328:Caterina.c    ****         Timeout++;
 329:Caterina.c    **** }
 330:Caterina.c    **** 
 331:Caterina.c    **** /** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints re
 332:Caterina.c    ****  *  to relay data to and from the attached USB host.
 333:Caterina.c    ****  */
 334:Caterina.c    **** void EVENT_USB_Device_ConfigurationChanged(void)
 335:Caterina.c    **** {
 336:Caterina.c    ****     /* Setup CDC Notification, Rx and Tx Endpoints */
 337:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
 338:Caterina.c    ****                                ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
 339:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 340:Caterina.c    **** 
 341:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
 342:Caterina.c    ****                                ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
 343:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 344:Caterina.c    **** 
 345:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
 346:Caterina.c    ****                                ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
 347:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 348:Caterina.c    **** }
 349:Caterina.c    **** 
 350:Caterina.c    **** /** Event handler for the USB_ControlRequest event. This is used to catch and process control reque
 351:Caterina.c    ****  *  the device from the USB host before passing along unhandled control requests to the library for
 352:Caterina.c    ****  *  internally.
 353:Caterina.c    ****  */
 354:Caterina.c    **** void EVENT_USB_Device_ControlRequest(void)
 355:Caterina.c    **** {
 356:Caterina.c    ****     /* Ignore any requests that aren't directed to the CDC interface */
 357:Caterina.c    ****     if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 358:Caterina.c    ****         (REQTYPE_CLASS | REQREC_INTERFACE))
 359:Caterina.c    ****     {
 360:Caterina.c    ****         return;
 361:Caterina.c    ****     }
 362:Caterina.c    **** 
 363:Caterina.c    ****     /* Process CDC specific control requests */
 364:Caterina.c    ****     switch (USB_ControlRequest.bRequest)
 365:Caterina.c    ****     {
 366:Caterina.c    ****         case CDC_REQ_GetLineEncoding:
 367:Caterina.c    ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 368:Caterina.c    ****             {
 369:Caterina.c    ****                 Endpoint_ClearSETUP();
 370:Caterina.c    **** 
 371:Caterina.c    ****                 /* Write the line coding data to the control endpoint */
 372:Caterina.c    ****                 Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 373:Caterina.c    ****                 Endpoint_ClearOUT();
 374:Caterina.c    ****             }
 375:Caterina.c    **** 
 376:Caterina.c    ****             break;
 377:Caterina.c    ****         case CDC_REQ_SetLineEncoding:
 378:Caterina.c    ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 379:Caterina.c    ****             {
 380:Caterina.c    ****                 Endpoint_ClearSETUP();
 381:Caterina.c    **** 
 382:Caterina.c    ****                 /* Read the line coding data in from the host into the global struct */
 383:Caterina.c    ****                 Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 384:Caterina.c    ****                 Endpoint_ClearIN();
 385:Caterina.c    ****             }
 386:Caterina.c    **** 
 387:Caterina.c    ****             break;
 388:Caterina.c    ****     }
 389:Caterina.c    **** }
 390:Caterina.c    **** 
 391:Caterina.c    **** #if !defined(NO_BLOCK_SUPPORT)
 392:Caterina.c    **** /** Reads or writes a block of EEPROM or FLASH memory to or from the appropriate CDC data endpoint,
 393:Caterina.c    ****  *  on the AVR910 protocol command issued.
 394:Caterina.c    ****  *
 395:Caterina.c    ****  *  \param[in] Command  Single character AVR910 protocol command indicating what memory operation t
 396:Caterina.c    ****  */
 397:Caterina.c    **** static void ReadWriteMemoryBlock(const uint8_t Command)
 398:Caterina.c    **** {
 399:Caterina.c    ****     uint16_t BlockSize;
 400:Caterina.c    ****     char     MemoryType;
 401:Caterina.c    **** 
 402:Caterina.c    ****     bool     HighByte = false;
 403:Caterina.c    ****     uint8_t  LowByte  = 0;
 404:Caterina.c    **** 
 405:Caterina.c    ****     BlockSize  = (FetchNextCommandByte() << 8);
 406:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 407:Caterina.c    **** 
 408:Caterina.c    ****     MemoryType =  FetchNextCommandByte();
 409:Caterina.c    **** 
 410:Caterina.c    ****     if ((MemoryType != 'E') && (MemoryType != 'F'))
 411:Caterina.c    ****     {
 412:Caterina.c    ****         /* Send error byte back to the host */
 413:Caterina.c    ****         WriteNextResponseByte('?');
 414:Caterina.c    **** 
 415:Caterina.c    ****         return;
 416:Caterina.c    ****     }
 417:Caterina.c    **** 
 418:Caterina.c    ****     /* Disable timer 1 interrupt - can't afford to process nonessential interrupts
 419:Caterina.c    ****      * while doing SPM tasks */
 420:Caterina.c    ****     TIMSK1 = 0;
 421:Caterina.c    **** 
 422:Caterina.c    ****     /* Check if command is to read memory */
 423:Caterina.c    ****     if (Command == 'g')
 424:Caterina.c    ****     {
 425:Caterina.c    ****         /* Re-enable RWW section */
 426:Caterina.c    ****         boot_rww_enable();
 427:Caterina.c    **** 
 428:Caterina.c    ****         while (BlockSize--)
 429:Caterina.c    ****         {
 430:Caterina.c    ****             if (MemoryType == 'F')
 431:Caterina.c    ****             {
 432:Caterina.c    ****                 /* Read the next FLASH byte from the current FLASH page */
 433:Caterina.c    ****                 #if (FLASHEND > 0xFFFF)
 434:Caterina.c    ****                 WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
 435:Caterina.c    ****                 #else
 436:Caterina.c    ****                 WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 437:Caterina.c    ****                 #endif
 438:Caterina.c    **** 
 439:Caterina.c    ****                 /* If both bytes in current word have been read, increment the address counter */
 440:Caterina.c    ****                 if (HighByte)
 441:Caterina.c    ****                   CurrAddress += 2;
 442:Caterina.c    **** 
 443:Caterina.c    ****                 HighByte = !HighByte;
 444:Caterina.c    ****             }
 445:Caterina.c    ****             else
 446:Caterina.c    ****             {
 447:Caterina.c    ****                 /* Read the next EEPROM byte into the endpoint */
 448:Caterina.c    ****                 WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 449:Caterina.c    **** 
 450:Caterina.c    ****                 /* Increment the address counter after use */
 451:Caterina.c    ****                 CurrAddress += 2;
 452:Caterina.c    ****             }
 453:Caterina.c    ****         }
 454:Caterina.c    ****     }
 455:Caterina.c    ****     else
 456:Caterina.c    ****     {
 457:Caterina.c    ****         uint32_t PageStartAddress = CurrAddress;
 458:Caterina.c    **** 
 459:Caterina.c    ****         if (MemoryType == 'F')
 460:Caterina.c    ****         {
 461:Caterina.c    ****             boot_page_erase(PageStartAddress);
 462:Caterina.c    ****             boot_spm_busy_wait();
 463:Caterina.c    ****         }
 464:Caterina.c    **** 
 465:Caterina.c    ****         while (BlockSize--)
 466:Caterina.c    ****         {
 467:Caterina.c    ****             if (MemoryType == 'F')
 468:Caterina.c    ****             {
 469:Caterina.c    ****                 /* If both bytes in current word have been written, increment the address counter *
 470:Caterina.c    ****                 if (HighByte)
 471:Caterina.c    ****                 {
 472:Caterina.c    ****                     /* Write the next FLASH word to the current FLASH page */
 473:Caterina.c    ****                     boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 474:Caterina.c    **** 
 475:Caterina.c    ****                     /* Increment the address counter after use */
 476:Caterina.c    ****                     CurrAddress += 2;
 477:Caterina.c    ****                 }
 478:Caterina.c    ****                 else
 479:Caterina.c    ****                 {
 480:Caterina.c    ****                     LowByte = FetchNextCommandByte();
 481:Caterina.c    ****                 }
 482:Caterina.c    **** 
 483:Caterina.c    ****                 HighByte = !HighByte;
 484:Caterina.c    ****             }
 485:Caterina.c    ****             else
 486:Caterina.c    ****             {
 487:Caterina.c    ****                 /* Write the next EEPROM byte from the endpoint */
 488:Caterina.c    ****                 eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte())
 489:Caterina.c    **** 
 490:Caterina.c    ****                 /* Increment the address counter after use */
 491:Caterina.c    ****                 CurrAddress += 2;
 492:Caterina.c    ****             }
 493:Caterina.c    ****         }
 494:Caterina.c    **** 
 495:Caterina.c    ****         /* If in FLASH programming mode, commit the page after writing */
 496:Caterina.c    ****         if (MemoryType == 'F')
 497:Caterina.c    ****         {
 498:Caterina.c    ****             /* Commit the flash page to memory */
 499:Caterina.c    ****             boot_page_write(PageStartAddress);
 500:Caterina.c    **** 
 501:Caterina.c    ****             /* Wait until write operation has completed */
 502:Caterina.c    ****             boot_spm_busy_wait();
 503:Caterina.c    ****         }
 504:Caterina.c    **** 
 505:Caterina.c    ****         /* Send response byte back to the host */
 506:Caterina.c    ****         WriteNextResponseByte('\r');
 507:Caterina.c    ****     }
 508:Caterina.c    **** 
 509:Caterina.c    ****     /* Re-enable timer 1 interrupt disabled earlier in this routine */
 510:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);
 511:Caterina.c    **** }
 512:Caterina.c    **** #endif
 513:Caterina.c    **** 
 514:Caterina.c    **** /** Retrieves the next byte from the host in the CDC data OUT endpoint, and clears the endpoint ban
 515:Caterina.c    ****  *  to allow reception of the next data packet from the host.
 516:Caterina.c    ****  *
 517:Caterina.c    ****  *  \return Next received byte from the host in the CDC data OUT endpoint
 518:Caterina.c    ****  */
 519:Caterina.c    **** static uint8_t FetchNextCommandByte(void)
 520:Caterina.c    **** {
  15               		.loc 1 520 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.LBB83:
  23               	.LBB84:
  24               		.file 2 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  25               		.loc 2 330 0
  26 0000 84E0      		ldi r24,lo8(4)
  27 0002 8093 E900 		sts 233,r24
  28               	.L2:
  29               	.LBE84:
  30               	.LBE83:
  31               	.LBB85:
  32               	.LBB86:
 331:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  33               		.loc 2 420 0 discriminator 1
  34 0006 8091 E800 		lds r24,232
  35               	.LBE86:
  36               	.LBE85:
 521:Caterina.c    ****     /* Select the OUT endpoint so that the next data byte can be read */
 522:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 523:Caterina.c    **** 
 524:Caterina.c    ****     /* If OUT endpoint empty, clear it and wait for the next packet from the host */
 525:Caterina.c    ****     while (!(Endpoint_IsReadWriteAllowed()))
  37               		.loc 1 525 0 discriminator 1
  38 000a 85FD      		sbrc r24,5
  39 000c 00C0      		rjmp .L9
  40               	.LBB87:
  41               	.LBB88:
 421:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  42               		.loc 2 531 0
  43 000e 8091 E800 		lds r24,232
  44 0012 8B77      		andi r24,lo8(123)
  45 0014 8093 E800 		sts 232,r24
  46               	.L3:
  47               	.LBE88:
  48               	.LBE87:
  49               	.LBB89:
  50               	.LBB90:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
  51               		.loc 2 479 0 discriminator 1
  52 0018 8091 E800 		lds r24,232
  53               	.LBE90:
  54               	.LBE89:
 526:Caterina.c    ****     {
 527:Caterina.c    ****         Endpoint_ClearOUT();
 528:Caterina.c    **** 
 529:Caterina.c    ****         while (!(Endpoint_IsOUTReceived()))
  55               		.loc 1 529 0 discriminator 1
  56 001c 82FD      		sbrc r24,2
  57 001e 00C0      		rjmp .L2
 530:Caterina.c    ****         {
 531:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
  58               		.loc 1 531 0
  59 0020 8EB3      		in r24,0x1e
  60 0022 8111      		cpse r24,__zero_reg__
  61 0024 00C0      		rjmp .L3
 532:Caterina.c    ****               return 0;
  62               		.loc 1 532 0
  63 0026 80E0      		ldi r24,0
 533:Caterina.c    ****         }
 534:Caterina.c    ****     }
 535:Caterina.c    **** 
 536:Caterina.c    ****     /* Fetch the next byte from the OUT endpoint */
 537:Caterina.c    ****     return Endpoint_Read_8();
 538:Caterina.c    **** }
  64               		.loc 1 538 0
  65 0028 0895      		ret
  66               	.L9:
  67               	.LBB91:
  68               	.LBB92:
 532:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  69               		.loc 2 612 0
  70 002a 8091 F100 		lds r24,241
  71               	.LBE92:
  72               	.LBE91:
 537:Caterina.c    ****     return Endpoint_Read_8();
  73               		.loc 1 537 0
  74 002e 0895      		ret
  75               		.cfi_endproc
  76               	.LFE110:
  78               		.section	.text.WriteNextResponseByte,"ax",@progbits
  80               	WriteNextResponseByte:
  81               	.LFB111:
 539:Caterina.c    **** 
 540:Caterina.c    **** /** Writes the next response byte to the CDC data IN endpoint, and sends the endpoint back if neede
 541:Caterina.c    ****  *  bank when full ready for the next byte in the packet to the host.
 542:Caterina.c    ****  *
 543:Caterina.c    ****  *  \param[in] Response  Next response byte to send to the host
 544:Caterina.c    ****  */
 545:Caterina.c    **** static void WriteNextResponseByte(const uint8_t Response)
 546:Caterina.c    **** {
  82               		.loc 1 546 0
  83               		.cfi_startproc
  84               	.LVL1:
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
  89               	.LBB93:
  90               	.LBB94:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  91               		.loc 2 330 0
  92 0000 93E0      		ldi r25,lo8(3)
  93 0002 9093 E900 		sts 233,r25
  94               	.LBE94:
  95               	.LBE93:
  96               	.LBB95:
  97               	.LBB96:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  98               		.loc 2 420 0
  99 0006 9091 E800 		lds r25,232
 100               	.LBE96:
 101               	.LBE95:
 547:Caterina.c    ****     /* Select the IN endpoint so that the next data byte can be written */
 548:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 549:Caterina.c    **** 
 550:Caterina.c    ****     /* If IN endpoint full, clear it and wait until ready for the next packet to the host */
 551:Caterina.c    ****     if (!(Endpoint_IsReadWriteAllowed()))
 102               		.loc 1 551 0
 103 000a 95FF      		sbrs r25,5
 104 000c 00C0      		rjmp .L11
 105               	.L15:
 106               	.LVL2:
 107               	.LBB97:
 108               	.LBB98:
 613:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 109               		.loc 2 624 0
 110 000e 8093 F100 		sts 241,r24
 111               	.LBE98:
 112               	.LBE97:
 552:Caterina.c    ****     {
 553:Caterina.c    ****         Endpoint_ClearIN();
 554:Caterina.c    **** 
 555:Caterina.c    ****         while (!(Endpoint_IsINReady()))
 556:Caterina.c    ****         {
 557:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
 558:Caterina.c    ****               return;
 559:Caterina.c    ****         }
 560:Caterina.c    ****     }
 561:Caterina.c    **** 
 562:Caterina.c    ****     /* Write the next byte to the IN endpoint */
 563:Caterina.c    ****     Endpoint_Write_8(Response);
 564:Caterina.c    **** 
 565:Caterina.c    ****     TX_LED_ON();
 113               		.loc 1 565 0
 114 0012 5D98      		cbi 0xb,5
 566:Caterina.c    ****     TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 115               		.loc 1 566 0
 116 0014 84E6      		ldi r24,lo8(100)
 117 0016 90E0      		ldi r25,0
 118               	.LVL3:
 119 0018 9093 0000 		sts TxLEDPulse+1,r25
 120 001c 8093 0000 		sts TxLEDPulse,r24
 121               	.LVL4:
 122 0020 0895      		ret
 123               	.LVL5:
 124               	.L11:
 125               	.LBB99:
 126               	.LBB100:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 127               		.loc 2 516 0
 128 0022 9091 E800 		lds r25,232
 129 0026 9E77      		andi r25,lo8(126)
 130 0028 9093 E800 		sts 232,r25
 131               	.L13:
 132               	.LBE100:
 133               	.LBE99:
 134               	.LBB101:
 135               	.LBB102:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 136               		.loc 2 467 0 discriminator 1
 137 002c 9091 E800 		lds r25,232
 138               	.LBE102:
 139               	.LBE101:
 555:Caterina.c    ****         while (!(Endpoint_IsINReady()))
 140               		.loc 1 555 0 discriminator 1
 141 0030 90FD      		sbrc r25,0
 142 0032 00C0      		rjmp .L15
 557:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
 143               		.loc 1 557 0
 144 0034 9EB3      		in r25,0x1e
 145 0036 9111      		cpse r25,__zero_reg__
 146 0038 00C0      		rjmp .L13
 147 003a 0895      		ret
 148               		.cfi_endproc
 149               	.LFE111:
 151               		.section	.text.ReadBatteryVoltage,"ax",@progbits
 152               	.global	ReadBatteryVoltage
 154               	ReadBatteryVoltage:
 155               	.LFB101:
 176:Caterina.c    **** {
 156               		.loc 1 176 0
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 178:Caterina.c    ****     DDRF &= ~(1 << PF0);
 162               		.loc 1 178 0
 163 0000 8098      		cbi 0x10,0
 179:Caterina.c    ****     PORTF |= (1 << PF0);
 164               		.loc 1 179 0
 165 0002 889A      		sbi 0x11,0
 184:Caterina.c    ****     ADMUX |= (1 << REFS1) | (1 << REFS0);
 166               		.loc 1 184 0
 167 0004 8091 7C00 		lds r24,124
 168 0008 806C      		ori r24,lo8(-64)
 169 000a 8093 7C00 		sts 124,r24
 186:Caterina.c    ****     ADMUX &= ~0b00011111;
 170               		.loc 1 186 0
 171 000e 8091 7C00 		lds r24,124
 172 0012 807E      		andi r24,lo8(-32)
 173 0014 8093 7C00 		sts 124,r24
 174               	.LVL6:
 175               	.LBB103:
 176               	.LBB104:
 177               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 178               		.loc 3 163 0
 179 0018 8FEC      		ldi r24,lo8(1999)
 180 001a 97E0      		ldi r25,hi8(1999)
 181 001c 0197      		1: sbiw r24,1
 182 001e 01F4      		brne 1b
 183 0020 00C0      		rjmp .
 184 0022 0000      		nop
 185               	.LBE104:
 186               	.LBE103:
 190:Caterina.c    ****     ADCSRA |= (1<<ADSC);
 187               		.loc 1 190 0
 188 0024 8091 7A00 		lds r24,122
 189 0028 8064      		ori r24,lo8(64)
 190 002a 8093 7A00 		sts 122,r24
 191               	.L21:
 193:Caterina.c    ****     while (bit_is_set(ADCSRA, ADSC));
 192               		.loc 1 193 0 discriminator 1
 193 002e 8091 7A00 		lds r24,122
 194 0032 86FD      		sbrc r24,6
 195 0034 00C0      		rjmp .L21
 199:Caterina.c    ****     low = ADCL;
 196               		.loc 1 199 0
 197 0036 8091 7800 		lds r24,120
 198               	.LVL7:
 200:Caterina.c    ****     high = ADCH;
 199               		.loc 1 200 0
 200 003a 2091 7900 		lds r18,121
 201               	.LVL8:
 203:Caterina.c    ****     return (high << 8) | low;
 202               		.loc 1 203 0
 203 003e 90E0      		ldi r25,0
 204:Caterina.c    **** }
 204               		.loc 1 204 0
 205 0040 922B      		or r25,r18
 206 0042 0895      		ret
 207               		.cfi_endproc
 208               	.LFE101:
 210               		.section	.text.StartSketch,"ax",@progbits
 211               	.global	StartSketch
 213               	StartSketch:
 214               	.LFB95:
 108:Caterina.c    **** {
 215               		.loc 1 108 0
 216               		.cfi_startproc
 217               	/* prologue: function */
 218               	/* frame size = 0 */
 219               	/* stack size = 0 */
 220               	.L__stack_usage = 0
 109:Caterina.c    ****     cli();
 221               		.loc 1 109 0
 222               	/* #APP */
 223               	 ;  109 "Caterina.c" 1
 224 0000 F894      		cli
 225               	 ;  0 "" 2
 112:Caterina.c    ****     TIMSK1 = 0;
 226               		.loc 1 112 0
 227               	/* #NOAPP */
 228 0002 1092 6F00 		sts 111,__zero_reg__
 113:Caterina.c    ****     TCCR1B = 0;
 229               		.loc 1 113 0
 230 0006 1092 8100 		sts 129,__zero_reg__
 114:Caterina.c    ****     TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 231               		.loc 1 114 0
 232 000a 1092 8500 		sts 133,__zero_reg__
 115:Caterina.c    ****     TCNT1L = 0;
 233               		.loc 1 115 0
 234 000e 1092 8400 		sts 132,__zero_reg__
 118:Caterina.c    ****     MCUCR = (1 << IVCE);
 235               		.loc 1 118 0
 236 0012 81E0      		ldi r24,lo8(1)
 237 0014 85BF      		out 0x35,r24
 119:Caterina.c    ****     MCUCR = 0;
 238               		.loc 1 119 0
 239 0016 15BE      		out 0x35,__zero_reg__
 121:Caterina.c    ****     L_LED_OFF();
 240               		.loc 1 121 0
 241 0018 4798      		cbi 0x8,7
 122:Caterina.c    ****     TX_LED_OFF();
 242               		.loc 1 122 0
 243 001a 5D9A      		sbi 0xb,5
 123:Caterina.c    ****     RX_LED_OFF();
 244               		.loc 1 123 0
 245 001c 289A      		sbi 0x5,0
 126:Caterina.c    ****     __asm__ volatile("jmp 0x0000");
 246               		.loc 1 126 0
 247               	/* #APP */
 248               	 ;  126 "Caterina.c" 1
 249 001e 0C94 0000 		jmp 0x0000
 250               	 ;  0 "" 2
 251               	/* #NOAPP */
 252 0022 0895      		ret
 253               		.cfi_endproc
 254               	.LFE95:
 256               		.section	.text.TWIInit,"ax",@progbits
 257               	.global	TWIInit
 259               	TWIInit:
 260               	.LFB96:
 130:Caterina.c    **** {
 261               		.loc 1 130 0
 262               		.cfi_startproc
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 0 */
 266               	.L__stack_usage = 0
 132:Caterina.c    ****     TWSR = 0x00;
 267               		.loc 1 132 0
 268 0000 1092 B900 		sts 185,__zero_reg__
 133:Caterina.c    ****     TWBR = 0x0C;
 269               		.loc 1 133 0
 270 0004 8CE0      		ldi r24,lo8(12)
 271 0006 8093 B800 		sts 184,r24
 136:Caterina.c    ****     TWCR = (1<<TWEN);
 272               		.loc 1 136 0
 273 000a 84E0      		ldi r24,lo8(4)
 274 000c 8093 BC00 		sts 188,r24
 275 0010 0895      		ret
 276               		.cfi_endproc
 277               	.LFE96:
 279               		.section	.text.TWIStart,"ax",@progbits
 280               	.global	TWIStart
 282               	TWIStart:
 283               	.LFB97:
 140:Caterina.c    **** {
 284               		.loc 1 140 0
 285               		.cfi_startproc
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
 290               	.L26:
 144:Caterina.c    ****     while(!(TWCR & (1<<TWINT)));
 291               		.loc 1 144 0 discriminator 1
 292 0000 8091 BC00 		lds r24,188
 293 0004 87FF      		sbrs r24,7
 294 0006 00C0      		rjmp .L26
 295               	/* epilogue start */
 145:Caterina.c    **** }
 296               		.loc 1 145 0
 297 0008 0895      		ret
 298               		.cfi_endproc
 299               	.LFE97:
 301               		.section	.text.TWIStop,"ax",@progbits
 302               	.global	TWIStop
 304               	TWIStop:
 305               	.LFB98:
 148:Caterina.c    **** {
 306               		.loc 1 148 0
 307               		.cfi_startproc
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 0 */
 311               	.L__stack_usage = 0
 149:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 312               		.loc 1 149 0
 313 0000 84E9      		ldi r24,lo8(-108)
 314 0002 8093 BC00 		sts 188,r24
 315 0006 0895      		ret
 316               		.cfi_endproc
 317               	.LFE98:
 319               		.section	.text.TWIWrite,"ax",@progbits
 320               	.global	TWIWrite
 322               	TWIWrite:
 323               	.LFB99:
 153:Caterina.c    **** {
 324               		.loc 1 153 0
 325               		.cfi_startproc
 326               	.LVL9:
 327               	/* prologue: function */
 328               	/* frame size = 0 */
 329               	/* stack size = 0 */
 330               	.L__stack_usage = 0
 155:Caterina.c    ****     TWDR = u8data;
 331               		.loc 1 155 0
 332 0000 8093 BB00 		sts 187,r24
 156:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN);
 333               		.loc 1 156 0
 334 0004 84E8      		ldi r24,lo8(-124)
 335               	.LVL10:
 336 0006 8093 BC00 		sts 188,r24
 337               	.LVL11:
 338               	.L30:
 158:Caterina.c    ****     while(!(TWCR & (1<<TWINT)));
 339               		.loc 1 158 0 discriminator 1
 340 000a 8091 BC00 		lds r24,188
 341 000e 87FF      		sbrs r24,7
 342 0010 00C0      		rjmp .L30
 343               	/* epilogue start */
 159:Caterina.c    **** }
 344               		.loc 1 159 0
 345 0012 0895      		ret
 346               		.cfi_endproc
 347               	.LFE99:
 349               		.section	.text.SetupCurrentLimit,"ax",@progbits
 350               	.global	SetupCurrentLimit
 352               	SetupCurrentLimit:
 353               	.LFB100:
 162:Caterina.c    **** {
 354               		.loc 1 162 0
 355               		.cfi_startproc
 356               	/* prologue: function */
 357               	/* frame size = 0 */
 358               	/* stack size = 0 */
 359               	.L__stack_usage = 0
 164:Caterina.c    ****     TWIStart();
 360               		.loc 1 164 0
 361 0000 0E94 0000 		call TWIStart
 362               	.LVL12:
 167:Caterina.c    ****     TWIWrite(SLA_W);
 363               		.loc 1 167 0
 364 0004 8EE5      		ldi r24,lo8(94)
 365 0006 0E94 0000 		call TWIWrite
 366               	.LVL13:
 170:Caterina.c    ****     TWIWrite(POT_STEPS);
 367               		.loc 1 170 0
 368 000a 83E7      		ldi r24,lo8(115)
 369 000c 0E94 0000 		call TWIWrite
 370               	.LVL14:
 371               	.LBB107:
 372               	.LBB108:
 149:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 373               		.loc 1 149 0
 374 0010 84E9      		ldi r24,lo8(-108)
 375 0012 8093 BC00 		sts 188,r24
 376 0016 0895      		ret
 377               	.LBE108:
 378               	.LBE107:
 379               		.cfi_endproc
 380               	.LFE100:
 382               		.section	.text.AlertFatalError,"ax",@progbits
 383               	.global	AlertFatalError
 385               	AlertFatalError:
 386               	.LFB102:
 207:Caterina.c    **** {
 387               		.loc 1 207 0
 388               		.cfi_startproc
 389               	/* prologue: function */
 390               	/* frame size = 0 */
 391               	/* stack size = 0 */
 392               	.L__stack_usage = 0
 393               	.L33:
 211:Caterina.c    ****         TX_LED_ON();
 394               		.loc 1 211 0 discriminator 1
 395 0000 5D98      		cbi 0xb,5
 212:Caterina.c    ****         RX_LED_ON();
 396               		.loc 1 212 0 discriminator 1
 397 0002 2898      		cbi 0x5,0
 213:Caterina.c    ****         L_LED_ON();
 398               		.loc 1 213 0 discriminator 1
 399 0004 479A      		sbi 0x8,7
 400               	.LVL15:
 401               	.LBB109:
 402               	.LBB110:
 403               		.loc 3 163 0 discriminator 1
 404 0006 2FEF      		ldi r18,lo8(159999)
 405 0008 80E7      		ldi r24,hi8(159999)
 406 000a 92E0      		ldi r25,hlo8(159999)
 407 000c 2150      		1: subi r18,1
 408 000e 8040      		sbci r24,0
 409 0010 9040      		sbci r25,0
 410 0012 01F4      		brne 1b
 411 0014 00C0      		rjmp .
 412 0016 0000      		nop
 413               	.LBE110:
 414               	.LBE109:
 215:Caterina.c    ****         TX_LED_OFF();
 415               		.loc 1 215 0 discriminator 1
 416 0018 5D9A      		sbi 0xb,5
 216:Caterina.c    ****         RX_LED_OFF();
 417               		.loc 1 216 0 discriminator 1
 418 001a 289A      		sbi 0x5,0
 217:Caterina.c    ****         L_LED_OFF();
 419               		.loc 1 217 0 discriminator 1
 420 001c 4798      		cbi 0x8,7
 421               	.LVL16:
 422               	.LBB111:
 423               	.LBB112:
 424               		.loc 3 163 0 discriminator 1
 425 001e 2FEF      		ldi r18,lo8(159999)
 426 0020 80E7      		ldi r24,hi8(159999)
 427 0022 92E0      		ldi r25,hlo8(159999)
 428 0024 2150      		1: subi r18,1
 429 0026 8040      		sbci r24,0
 430 0028 9040      		sbci r25,0
 431 002a 01F4      		brne 1b
 432 002c 00C0      		rjmp .
 433 002e 0000      		nop
 434 0030 00C0      		rjmp .L33
 435               	.LBE112:
 436               	.LBE111:
 437               		.cfi_endproc
 438               	.LFE102:
 440               		.section	.text.LEDPulse,"ax",@progbits
 441               	.global	LEDPulse
 443               	LEDPulse:
 444               	.LFB103:
 225:Caterina.c    **** {
 445               		.loc 1 225 0
 446               		.cfi_startproc
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
 226:Caterina.c    ****     LLEDPulse++;
 451               		.loc 1 226 0
 452 0000 8091 0000 		lds r24,LLEDPulse
 453 0004 9091 0000 		lds r25,LLEDPulse+1
 454 0008 0196      		adiw r24,1
 455 000a 9093 0000 		sts LLEDPulse+1,r25
 456 000e 8093 0000 		sts LLEDPulse,r24
 227:Caterina.c    ****     uint8_t p = LLEDPulse >> 8;
 457               		.loc 1 227 0
 458 0012 292F      		mov r18,r25
 459               	.LVL17:
 228:Caterina.c    ****     if (p > 127)
 460               		.loc 1 228 0
 461 0014 97FF      		sbrs r25,7
 462 0016 00C0      		rjmp .L35
 229:Caterina.c    ****         p = 254-p;
 463               		.loc 1 229 0
 464 0018 2EEF      		ldi r18,lo8(-2)
 465 001a 291B      		sub r18,r25
 466               	.LVL18:
 467               	.L35:
 230:Caterina.c    ****     p += p;
 468               		.loc 1 230 0
 469 001c 220F      		lsl r18
 470               	.LVL19:
 231:Caterina.c    ****     if (((uint8_t)LLEDPulse) > p)
 471               		.loc 1 231 0
 472 001e 2817      		cp r18,r24
 473 0020 00F4      		brsh .L36
 232:Caterina.c    ****         L_LED_OFF();
 474               		.loc 1 232 0
 475 0022 4798      		cbi 0x8,7
 476 0024 0895      		ret
 477               	.L36:
 234:Caterina.c    ****         L_LED_ON();
 478               		.loc 1 234 0
 479 0026 479A      		sbi 0x8,7
 480 0028 0895      		ret
 481               		.cfi_endproc
 482               	.LFE103:
 484               		.section	.text.SetupHardware,"ax",@progbits
 485               	.global	SetupHardware
 487               	SetupHardware:
 488               	.LFB105:
 285:Caterina.c    **** {
 489               		.loc 1 285 0
 490               		.cfi_startproc
 491               	/* prologue: function */
 492               	/* frame size = 0 */
 493               	/* stack size = 0 */
 494               	.L__stack_usage = 0
 288:Caterina.c    ****     CPU_PRESCALE(0);
 495               		.loc 1 288 0
 496 0000 E1E6      		ldi r30,lo8(97)
 497 0002 F0E0      		ldi r31,0
 498 0004 80E8      		ldi r24,lo8(-128)
 499 0006 8083      		st Z,r24
 500 0008 1082      		st Z,__zero_reg__
 291:Caterina.c    ****     MCUCR = (1 << IVCE);
 501               		.loc 1 291 0
 502 000a 81E0      		ldi r24,lo8(1)
 503 000c 85BF      		out 0x35,r24
 292:Caterina.c    ****     MCUCR = (1 << IVSEL);
 504               		.loc 1 292 0
 505 000e 82E0      		ldi r24,lo8(2)
 506 0010 85BF      		out 0x35,r24
 294:Caterina.c    ****     LED_SETUP();
 507               		.loc 1 294 0
 508 0012 3F9A      		sbi 0x7,7
 509 0014 209A      		sbi 0x4,0
 510 0016 559A      		sbi 0xa,5
 295:Caterina.c    ****     L_LED_OFF();
 511               		.loc 1 295 0
 512 0018 4798      		cbi 0x8,7
 296:Caterina.c    ****     TX_LED_OFF();
 513               		.loc 1 296 0
 514 001a 5D9A      		sbi 0xb,5
 297:Caterina.c    ****     RX_LED_OFF();
 515               		.loc 1 297 0
 516 001c 289A      		sbi 0x5,0
 305:Caterina.c    ****     OCR1AH = 0;
 517               		.loc 1 305 0
 518 001e 1092 8900 		sts 137,__zero_reg__
 306:Caterina.c    ****     OCR1AL = 250;
 519               		.loc 1 306 0
 520 0022 9AEF      		ldi r25,lo8(-6)
 521 0024 9093 8800 		sts 136,r25
 307:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 522               		.loc 1 307 0
 523 0028 8093 6F00 		sts 111,r24
 308:Caterina.c    ****     TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 524               		.loc 1 308 0
 525 002c 83E0      		ldi r24,lo8(3)
 526 002e 8093 8100 		sts 129,r24
 311:Caterina.c    ****     USB_Init();
 527               		.loc 1 311 0
 528 0032 0C94 0000 		jmp USB_Init
 529               	.LVL20:
 530               		.cfi_endproc
 531               	.LFE105:
 533               		.section	.text.__vector_17,"ax",@progbits
 534               	.global	__vector_17
 536               	__vector_17:
 537               	.LFB106:
 316:Caterina.c    **** {
 538               		.loc 1 316 0
 539               		.cfi_startproc
 540 0000 1F92      		push r1
 541               	.LCFI0:
 542               		.cfi_def_cfa_offset 3
 543               		.cfi_offset 1, -2
 544 0002 0F92      		push r0
 545               	.LCFI1:
 546               		.cfi_def_cfa_offset 4
 547               		.cfi_offset 0, -3
 548 0004 0FB6      		in r0,__SREG__
 549 0006 0F92      		push r0
 550 0008 1124      		clr __zero_reg__
 551 000a 2F93      		push r18
 552               	.LCFI2:
 553               		.cfi_def_cfa_offset 5
 554               		.cfi_offset 18, -4
 555 000c 8F93      		push r24
 556               	.LCFI3:
 557               		.cfi_def_cfa_offset 6
 558               		.cfi_offset 24, -5
 559 000e 9F93      		push r25
 560               	.LCFI4:
 561               		.cfi_def_cfa_offset 7
 562               		.cfi_offset 25, -6
 563 0010 EF93      		push r30
 564               	.LCFI5:
 565               		.cfi_def_cfa_offset 8
 566               		.cfi_offset 30, -7
 567 0012 FF93      		push r31
 568               	.LCFI6:
 569               		.cfi_def_cfa_offset 9
 570               		.cfi_offset 31, -8
 571               	/* prologue: Signal */
 572               	/* frame size = 0 */
 573               	/* stack size = 8 */
 574               	.L__stack_usage = 8
 318:Caterina.c    ****     TCNT1H = 0;
 575               		.loc 1 318 0
 576 0014 1092 8500 		sts 133,__zero_reg__
 319:Caterina.c    ****     TCNT1L = 0;
 577               		.loc 1 319 0
 578 0018 1092 8400 		sts 132,__zero_reg__
 322:Caterina.c    ****     if (TxLEDPulse && !(--TxLEDPulse))
 579               		.loc 1 322 0
 580 001c 8091 0000 		lds r24,TxLEDPulse
 581 0020 9091 0000 		lds r25,TxLEDPulse+1
 582 0024 0097      		sbiw r24,0
 583 0026 01F0      		breq .L41
 322:Caterina.c    ****     if (TxLEDPulse && !(--TxLEDPulse))
 584               		.loc 1 322 0 is_stmt 0 discriminator 1
 585 0028 0197      		sbiw r24,1
 586 002a 9093 0000 		sts TxLEDPulse+1,r25
 587 002e 8093 0000 		sts TxLEDPulse,r24
 588 0032 892B      		or r24,r25
 589 0034 01F4      		brne .L41
 323:Caterina.c    ****         TX_LED_OFF();
 590               		.loc 1 323 0 is_stmt 1
 591 0036 5D9A      		sbi 0xb,5
 592               	.L41:
 324:Caterina.c    ****     if (RxLEDPulse && !(--RxLEDPulse))
 593               		.loc 1 324 0
 594 0038 8091 0000 		lds r24,RxLEDPulse
 595 003c 9091 0000 		lds r25,RxLEDPulse+1
 596 0040 0097      		sbiw r24,0
 597 0042 01F0      		breq .L44
 324:Caterina.c    ****     if (RxLEDPulse && !(--RxLEDPulse))
 598               		.loc 1 324 0 is_stmt 0 discriminator 1
 599 0044 0197      		sbiw r24,1
 600 0046 9093 0000 		sts RxLEDPulse+1,r25
 601 004a 8093 0000 		sts RxLEDPulse,r24
 602 004e 892B      		or r24,r25
 603 0050 01F4      		brne .L44
 325:Caterina.c    ****         RX_LED_OFF();
 604               		.loc 1 325 0 is_stmt 1
 605 0052 289A      		sbi 0x5,0
 606               	.L44:
 607               	.LVL21:
 608               	.LBB113:
 327:Caterina.c    ****     if (pgm_read_word(0) != 0xFFFF)
 609               		.loc 1 327 0
 610 0054 E0E0      		ldi r30,0
 611 0056 F0E0      		ldi r31,0
 612               	/* #APP */
 613               	 ;  327 "Caterina.c" 1
 614 0058 8591      		lpm r24, Z+
 615 005a 9491      		lpm r25, Z
 616               		
 617               	 ;  0 "" 2
 618               	.LVL22:
 619               	/* #NOAPP */
 620               	.LBE113:
 621 005c 0196      		adiw r24,1
 622 005e 01F0      		breq .L39
 328:Caterina.c    ****         Timeout++;
 623               		.loc 1 328 0
 624 0060 8091 0000 		lds r24,Timeout
 625 0064 9091 0000 		lds r25,Timeout+1
 626               	.LVL23:
 627 0068 0196      		adiw r24,1
 628 006a 9093 0000 		sts Timeout+1,r25
 629 006e 8093 0000 		sts Timeout,r24
 630               	.L39:
 631               	/* epilogue start */
 329:Caterina.c    **** }
 632               		.loc 1 329 0
 633 0072 FF91      		pop r31
 634 0074 EF91      		pop r30
 635 0076 9F91      		pop r25
 636 0078 8F91      		pop r24
 637 007a 2F91      		pop r18
 638 007c 0F90      		pop r0
 639 007e 0FBE      		out __SREG__,r0
 640 0080 0F90      		pop r0
 641 0082 1F90      		pop r1
 642 0084 1895      		reti
 643               		.cfi_endproc
 644               	.LFE106:
 646               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 647               	.global	EVENT_USB_Device_ConfigurationChanged
 649               	EVENT_USB_Device_ConfigurationChanged:
 650               	.LFB107:
 335:Caterina.c    **** {
 651               		.loc 1 335 0
 652               		.cfi_startproc
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 0 */
 656               	.L__stack_usage = 0
 657               	.LVL24:
 658               	.LBB114:
 659               	.LBB115:
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 660               		.loc 2 276 0
 661 0000 42E0      		ldi r20,lo8(2)
 662 0002 61EC      		ldi r22,lo8(-63)
 663 0004 82E0      		ldi r24,lo8(2)
 664 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 665               	.LVL25:
 666               	.LBE115:
 667               	.LBE114:
 668               	.LBB116:
 669               	.LBB117:
 670 000a 42E1      		ldi r20,lo8(18)
 671 000c 61E8      		ldi r22,lo8(-127)
 672 000e 83E0      		ldi r24,lo8(3)
 673 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 674               	.LVL26:
 675               	.LBE117:
 676               	.LBE116:
 677               	.LBB118:
 678               	.LBB119:
 679 0014 42E1      		ldi r20,lo8(18)
 680 0016 60E8      		ldi r22,lo8(-128)
 681 0018 84E0      		ldi r24,lo8(4)
 682 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 683               	.LVL27:
 684               	.LBE119:
 685               	.LBE118:
 686               		.cfi_endproc
 687               	.LFE107:
 689               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 690               	.global	EVENT_USB_Device_ControlRequest
 692               	EVENT_USB_Device_ControlRequest:
 693               	.LFB108:
 355:Caterina.c    **** {
 694               		.loc 1 355 0
 695               		.cfi_startproc
 696               	/* prologue: function */
 697               	/* frame size = 0 */
 698               	/* stack size = 0 */
 699               	.L__stack_usage = 0
 357:Caterina.c    ****     if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 700               		.loc 1 357 0
 701 0000 8091 0000 		lds r24,USB_ControlRequest
 702 0004 982F      		mov r25,r24
 703 0006 9F77      		andi r25,lo8(127)
 704 0008 9132      		cpi r25,lo8(33)
 705 000a 01F4      		brne .L51
 364:Caterina.c    ****     switch (USB_ControlRequest.bRequest)
 706               		.loc 1 364 0
 707 000c 9091 0000 		lds r25,USB_ControlRequest+1
 708 0010 9032      		cpi r25,lo8(32)
 709 0012 01F0      		breq .L53
 710 0014 9132      		cpi r25,lo8(33)
 711 0016 01F4      		brne .L51
 367:Caterina.c    ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 712               		.loc 1 367 0
 713 0018 813A      		cpi r24,lo8(-95)
 714 001a 01F4      		brne .L51
 715               	.LBB120:
 716               	.LBB121:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 717               		.loc 2 504 0
 718 001c 8091 E800 		lds r24,232
 719 0020 877F      		andi r24,lo8(-9)
 720 0022 8093 E800 		sts 232,r24
 721               	.LBE121:
 722               	.LBE120:
 372:Caterina.c    ****                 Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 723               		.loc 1 372 0
 724 0026 67E0      		ldi r22,lo8(7)
 725 0028 70E0      		ldi r23,0
 726 002a 80E0      		ldi r24,lo8(LineEncoding)
 727 002c 90E0      		ldi r25,hi8(LineEncoding)
 728 002e 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 729               	.LVL28:
 730               	.LBB122:
 731               	.LBB123:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 732               		.loc 2 531 0
 733 0032 8091 E800 		lds r24,232
 734 0036 8B77      		andi r24,lo8(123)
 735 0038 00C0      		rjmp .L55
 736               	.L53:
 737               	.LBE123:
 738               	.LBE122:
 378:Caterina.c    ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 739               		.loc 1 378 0
 740 003a 8132      		cpi r24,lo8(33)
 741 003c 01F4      		brne .L51
 742               	.LBB124:
 743               	.LBB125:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 744               		.loc 2 504 0
 745 003e 8091 E800 		lds r24,232
 746 0042 877F      		andi r24,lo8(-9)
 747 0044 8093 E800 		sts 232,r24
 748               	.LBE125:
 749               	.LBE124:
 383:Caterina.c    ****                 Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 750               		.loc 1 383 0
 751 0048 67E0      		ldi r22,lo8(7)
 752 004a 70E0      		ldi r23,0
 753 004c 80E0      		ldi r24,lo8(LineEncoding)
 754 004e 90E0      		ldi r25,hi8(LineEncoding)
 755 0050 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 756               	.LVL29:
 757               	.LBB126:
 758               	.LBB127:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 759               		.loc 2 516 0
 760 0054 8091 E800 		lds r24,232
 761 0058 8E77      		andi r24,lo8(126)
 762               	.L55:
 763 005a 8093 E800 		sts 232,r24
 764               	.L51:
 765 005e 0895      		ret
 766               	.LBE127:
 767               	.LBE126:
 768               		.cfi_endproc
 769               	.LFE108:
 771               		.section	.rodata.str1.1,"aMS",@progbits,1
 772               	.LC0:
 773 0000 4341 5445 		.string	"CATERINA"
 773      5249 4E41 
 773      00
 774               		.section	.text.CDC_Task,"ax",@progbits
 775               	.global	CDC_Task
 777               	CDC_Task:
 778               	.LFB112:
 567:Caterina.c    **** }
 568:Caterina.c    **** 
 569:Caterina.c    **** #define STK_OK              0x10
 570:Caterina.c    **** #define STK_INSYNC          0x14  // ' '
 571:Caterina.c    **** #define CRC_EOP             0x20  // 'SPACE'
 572:Caterina.c    **** #define STK_GET_SYNC        0x30  // '0'
 573:Caterina.c    **** 
 574:Caterina.c    **** #define STK_GET_PARAMETER   0x41  // 'A'
 575:Caterina.c    **** #define STK_SET_DEVICE      0x42  // 'B'
 576:Caterina.c    **** #define STK_SET_DEVICE_EXT  0x45  // 'E'
 577:Caterina.c    **** #define STK_LOAD_ADDRESS    0x55  // 'U'
 578:Caterina.c    **** #define STK_UNIVERSAL       0x56  // 'V'
 579:Caterina.c    **** #define STK_PROG_PAGE       0x64  // 'd'
 580:Caterina.c    **** #define STK_READ_PAGE       0x74  // 't'
 581:Caterina.c    **** #define STK_READ_SIGN       0x75  // 'u'
 582:Caterina.c    **** 
 583:Caterina.c    **** /** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the requi
 584:Caterina.c    ****  *  and send the appropriate response back to the host.
 585:Caterina.c    ****  */
 586:Caterina.c    **** void CDC_Task(void)
 587:Caterina.c    **** {
 779               		.loc 1 587 0
 780               		.cfi_startproc
 781 0000 4F92      		push r4
 782               	.LCFI7:
 783               		.cfi_def_cfa_offset 3
 784               		.cfi_offset 4, -2
 785 0002 5F92      		push r5
 786               	.LCFI8:
 787               		.cfi_def_cfa_offset 4
 788               		.cfi_offset 5, -3
 789 0004 6F92      		push r6
 790               	.LCFI9:
 791               		.cfi_def_cfa_offset 5
 792               		.cfi_offset 6, -4
 793 0006 7F92      		push r7
 794               	.LCFI10:
 795               		.cfi_def_cfa_offset 6
 796               		.cfi_offset 7, -5
 797 0008 8F92      		push r8
 798               	.LCFI11:
 799               		.cfi_def_cfa_offset 7
 800               		.cfi_offset 8, -6
 801 000a 9F92      		push r9
 802               	.LCFI12:
 803               		.cfi_def_cfa_offset 8
 804               		.cfi_offset 9, -7
 805 000c AF92      		push r10
 806               	.LCFI13:
 807               		.cfi_def_cfa_offset 9
 808               		.cfi_offset 10, -8
 809 000e BF92      		push r11
 810               	.LCFI14:
 811               		.cfi_def_cfa_offset 10
 812               		.cfi_offset 11, -9
 813 0010 CF92      		push r12
 814               	.LCFI15:
 815               		.cfi_def_cfa_offset 11
 816               		.cfi_offset 12, -10
 817 0012 DF92      		push r13
 818               	.LCFI16:
 819               		.cfi_def_cfa_offset 12
 820               		.cfi_offset 13, -11
 821 0014 EF92      		push r14
 822               	.LCFI17:
 823               		.cfi_def_cfa_offset 13
 824               		.cfi_offset 14, -12
 825 0016 FF92      		push r15
 826               	.LCFI18:
 827               		.cfi_def_cfa_offset 14
 828               		.cfi_offset 15, -13
 829 0018 CF93      		push r28
 830               	.LCFI19:
 831               		.cfi_def_cfa_offset 15
 832               		.cfi_offset 28, -14
 833 001a DF93      		push r29
 834               	.LCFI20:
 835               		.cfi_def_cfa_offset 16
 836               		.cfi_offset 29, -15
 837               	/* prologue: function */
 838               	/* frame size = 0 */
 839               	/* stack size = 14 */
 840               	.L__stack_usage = 14
 841               	.LVL30:
 842               	.LBB160:
 843               	.LBB161:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 844               		.loc 2 330 0
 845 001c 84E0      		ldi r24,lo8(4)
 846 001e 8093 E900 		sts 233,r24
 847               	.LBE161:
 848               	.LBE160:
 849               	.LBB162:
 850               	.LBB163:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 851               		.loc 2 479 0
 852 0022 8091 E800 		lds r24,232
 853               	.LBE163:
 854               	.LBE162:
 588:Caterina.c    ****     /* Select the OUT endpoint */
 589:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 590:Caterina.c    **** 
 591:Caterina.c    ****     /* Check if endpoint has a command in it sent from the host */
 592:Caterina.c    ****     if (!(Endpoint_IsOUTReceived()))
 855               		.loc 1 592 0
 856 0026 82FF      		sbrs r24,2
 857 0028 00C0      		rjmp .L56
 593:Caterina.c    ****       return;
 594:Caterina.c    **** 
 595:Caterina.c    ****     RX_LED_ON();
 858               		.loc 1 595 0
 859 002a 2898      		cbi 0x5,0
 596:Caterina.c    ****     RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 860               		.loc 1 596 0
 861 002c 84E6      		ldi r24,lo8(100)
 862 002e 90E0      		ldi r25,0
 863 0030 9093 0000 		sts RxLEDPulse+1,r25
 864 0034 8093 0000 		sts RxLEDPulse,r24
 597:Caterina.c    **** 
 598:Caterina.c    ****     /* Read in the bootloader command (first byte sent from host) */
 599:Caterina.c    ****     uint8_t Command = FetchNextCommandByte();
 865               		.loc 1 599 0
 866 0038 0E94 0000 		call FetchNextCommandByte
 867               	.LVL31:
 868 003c D82F      		mov r29,r24
 869               	.LVL32:
 600:Caterina.c    **** 
 601:Caterina.c    ****     if (Command == 'E')
 870               		.loc 1 601 0
 871 003e 8534      		cpi r24,lo8(69)
 872 0040 01F4      		brne .L59
 602:Caterina.c    ****     {
 603:Caterina.c    ****         /* We nearly run out the bootloader timeout clock,
 604:Caterina.c    ****         * leaving just a few hundred milliseconds so the
 605:Caterina.c    ****         * bootloder has time to respond and service any
 606:Caterina.c    ****         * subsequent requests */
 607:Caterina.c    ****         Timeout = TIMEOUT_PERIOD - 500;
 873               		.loc 1 607 0
 874 0042 84EF      		ldi r24,lo8(-12)
 875 0044 9FEF      		ldi r25,lo8(-1)
 876               	.LVL33:
 877 0046 9093 0000 		sts Timeout+1,r25
 878 004a 8093 0000 		sts Timeout,r24
 879               	.L61:
 608:Caterina.c    **** 
 609:Caterina.c    ****         /* Re-enable RWW section - must be done here in case
 610:Caterina.c    ****          * user has disabled verification on upload.  */
 611:Caterina.c    ****         boot_rww_enable_safe();
 880               		.loc 1 611 0 discriminator 1
 881 004e 07B6      		in __tmp_reg__,0x37
 882 0050 00FC      		sbrc __tmp_reg__,0
 883 0052 00C0      		rjmp .L61
 884               	.L63:
 885               		.loc 1 611 0 is_stmt 0
 886 0054 F999      		sbic 0x1f,1
 887 0056 00C0      		rjmp .L63
 888               		.loc 1 611 0 discriminator 3
 889 0058 81E1      		ldi r24,lo8(17)
 890               	/* #APP */
 891               	 ;  611 "Caterina.c" 1
 892 005a 8093 5700 		sts 87, r24
 893 005e E895      		spm
 894               		
 895               	 ;  0 "" 2
 896               	/* #NOAPP */
 897 0060 00C0      		rjmp .L152
 898               	.LVL34:
 899               	.L59:
 612:Caterina.c    **** 
 613:Caterina.c    ****         // Send confirmation byte back to the host
 614:Caterina.c    ****         WriteNextResponseByte('\r');
 615:Caterina.c    ****     }
 616:Caterina.c    ****     else if (Command == 'T')
 900               		.loc 1 616 0 is_stmt 1
 901 0062 8435      		cpi r24,lo8(84)
 902 0064 01F4      		brne .L65
 617:Caterina.c    ****     {
 618:Caterina.c    ****         FetchNextCommandByte();
 903               		.loc 1 618 0
 904 0066 0E94 0000 		call FetchNextCommandByte
 905               	.LVL35:
 906               	.L152:
 619:Caterina.c    **** 
 620:Caterina.c    ****         // Send confirmation byte back to the host
 621:Caterina.c    ****         WriteNextResponseByte('\r');
 907               		.loc 1 621 0
 908 006a 8DE0      		ldi r24,lo8(13)
 909               	.L153:
 910 006c 0E94 0000 		call WriteNextResponseByte
 911               	.LVL36:
 912 0070 00C0      		rjmp .L64
 913               	.LVL37:
 914               	.L65:
 622:Caterina.c    ****     }
 623:Caterina.c    ****     else if ((Command == 'L') || (Command == 'P'))
 915               		.loc 1 623 0
 916 0072 8C34      		cpi r24,lo8(76)
 917 0074 01F0      		breq .L152
 918               		.loc 1 623 0 is_stmt 0 discriminator 1
 919 0076 8035      		cpi r24,lo8(80)
 920 0078 01F0      		breq .L152
 624:Caterina.c    ****     {
 625:Caterina.c    ****         // Send confirmation byte back to the host
 626:Caterina.c    ****         WriteNextResponseByte('\r');
 627:Caterina.c    ****     }
 628:Caterina.c    ****     else if (Command == 't')
 921               		.loc 1 628 0 is_stmt 1
 922 007a 8437      		cpi r24,lo8(116)
 923 007c 01F4      		brne .L68
 629:Caterina.c    ****     {
 630:Caterina.c    ****         // Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader
 631:Caterina.c    ****         WriteNextResponseByte(0x44);
 924               		.loc 1 631 0
 925 007e 84E4      		ldi r24,lo8(68)
 926               	.LVL38:
 927 0080 0E94 0000 		call WriteNextResponseByte
 928               	.LVL39:
 632:Caterina.c    ****         WriteNextResponseByte(0x00);
 929               		.loc 1 632 0
 930 0084 80E0      		ldi r24,0
 931 0086 00C0      		rjmp .L153
 932               	.LVL40:
 933               	.L68:
 633:Caterina.c    ****     }
 634:Caterina.c    ****     else if (Command == 'a')
 934               		.loc 1 634 0
 935 0088 8136      		cpi r24,lo8(97)
 936 008a 01F4      		brne .L69
 635:Caterina.c    ****     {
 636:Caterina.c    ****         // Indicate auto-address increment is supported
 637:Caterina.c    ****         WriteNextResponseByte('Y');
 937               		.loc 1 637 0
 938 008c 89E5      		ldi r24,lo8(89)
 939               	.LVL41:
 940 008e 00C0      		rjmp .L153
 941               	.LVL42:
 942               	.L69:
 638:Caterina.c    ****     }
 639:Caterina.c    ****     else if (Command == 'A')
 943               		.loc 1 639 0
 944 0090 8134      		cpi r24,lo8(65)
 945 0092 01F4      		brne .L70
 640:Caterina.c    ****     {
 641:Caterina.c    ****         // Set the current address to that given by the host
 642:Caterina.c    ****         CurrAddress   = (FetchNextCommandByte() << 9);
 946               		.loc 1 642 0
 947 0094 0E94 0000 		call FetchNextCommandByte
 948               	.LVL43:
 949 0098 C82F      		mov r28,r24
 643:Caterina.c    ****         CurrAddress  |= (FetchNextCommandByte() << 1);
 950               		.loc 1 643 0
 951 009a 0E94 0000 		call FetchNextCommandByte
 952               	.LVL44:
 953 009e 90E0      		ldi r25,0
 954 00a0 880F      		lsl r24
 955 00a2 991F      		rol r25
 642:Caterina.c    ****         CurrAddress   = (FetchNextCommandByte() << 9);
 956               		.loc 1 642 0
 957 00a4 2C2F      		mov r18,r28
 958 00a6 30E0      		ldi r19,0
 959 00a8 322F      		mov r19,r18
 960 00aa 2227      		clr r18
 961 00ac 330F      		lsl r19
 962               		.loc 1 643 0
 963 00ae 822B      		or r24,r18
 964 00b0 932B      		or r25,r19
 965 00b2 AA27      		clr r26
 966 00b4 97FD      		sbrc r25,7
 967 00b6 A095      		com r26
 968 00b8 BA2F      		mov r27,r26
 969 00ba 00C0      		rjmp .L154
 970               	.LVL45:
 971               	.L70:
 644:Caterina.c    **** 
 645:Caterina.c    ****         // Send confirmation byte back to the host
 646:Caterina.c    ****         WriteNextResponseByte('\r');
 647:Caterina.c    ****     }
 648:Caterina.c    ****     else if (Command == 'p')
 972               		.loc 1 648 0
 973 00bc 8037      		cpi r24,lo8(112)
 974 00be 01F4      		brne .L71
 649:Caterina.c    ****     {
 650:Caterina.c    ****         // Indicate serial programmer back to the host
 651:Caterina.c    ****         WriteNextResponseByte('S');
 975               		.loc 1 651 0
 976 00c0 83E5      		ldi r24,lo8(83)
 977               	.LVL46:
 978 00c2 00C0      		rjmp .L153
 979               	.LVL47:
 980               	.L71:
 652:Caterina.c    ****     }
 653:Caterina.c    ****     else if (Command == 'S')
 981               		.loc 1 653 0
 982 00c4 8335      		cpi r24,lo8(83)
 983 00c6 01F4      		brne .L72
 984 00c8 C0E0      		ldi r28,lo8(.LC0)
 985 00ca D0E0      		ldi r29,hi8(.LC0)
 986               	.LVL48:
 987               	.L74:
 988               	.LBB164:
 654:Caterina.c    ****     {
 655:Caterina.c    ****         // Write the 7-byte software identifier to the endpoint
 656:Caterina.c    ****         for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 657:Caterina.c    ****           WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 989               		.loc 1 657 0 discriminator 2
 990 00cc 8991      		ld r24,Y+
 991               	.LVL49:
 992 00ce 0E94 0000 		call WriteNextResponseByte
 993               	.LVL50:
 656:Caterina.c    ****         for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 994               		.loc 1 656 0 discriminator 2
 995 00d2 20E0      		ldi r18,hi8(.LC0+7)
 996 00d4 C030      		cpi r28,lo8(.LC0+7)
 997 00d6 D207      		cpc r29,r18
 998 00d8 01F4      		brne .L74
 999 00da 00C0      		rjmp .L64
 1000               	.LVL51:
 1001               	.L72:
 1002               	.LBE164:
 658:Caterina.c    ****     }
 659:Caterina.c    ****     else if (Command == 'V')
 1003               		.loc 1 659 0
 1004 00dc 8635      		cpi r24,lo8(86)
 1005 00de 01F4      		brne .L75
 660:Caterina.c    ****     {
 661:Caterina.c    ****         WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
 1006               		.loc 1 661 0
 1007 00e0 81E3      		ldi r24,lo8(49)
 1008               	.LVL52:
 1009 00e2 0E94 0000 		call WriteNextResponseByte
 1010               	.LVL53:
 662:Caterina.c    ****         WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
 1011               		.loc 1 662 0
 1012 00e6 80E3      		ldi r24,lo8(48)
 1013 00e8 00C0      		rjmp .L153
 1014               	.LVL54:
 1015               	.L75:
 663:Caterina.c    ****     }
 664:Caterina.c    ****     else if (Command == 's')
 1016               		.loc 1 664 0
 1017 00ea 8337      		cpi r24,lo8(115)
 1018 00ec 01F4      		brne .L76
 665:Caterina.c    ****     {
 666:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_3);
 1019               		.loc 1 666 0
 1020 00ee 87E8      		ldi r24,lo8(-121)
 1021               	.LVL55:
 1022 00f0 0E94 0000 		call WriteNextResponseByte
 1023               	.LVL56:
 667:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_2);
 1024               		.loc 1 667 0
 1025 00f4 85E9      		ldi r24,lo8(-107)
 1026 00f6 0E94 0000 		call WriteNextResponseByte
 1027               	.LVL57:
 668:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_1);
 1028               		.loc 1 668 0
 1029 00fa 8EE1      		ldi r24,lo8(30)
 1030 00fc 00C0      		rjmp .L153
 1031               	.LVL58:
 1032               	.L76:
 669:Caterina.c    ****     }
 670:Caterina.c    ****     else if (Command == 'e')
 1033               		.loc 1 670 0
 1034 00fe 8536      		cpi r24,lo8(101)
 1035 0100 01F4      		brne .L77
 1036 0102 E0E0      		ldi r30,0
 1037 0104 F0E0      		ldi r31,0
 1038               	.LBB165:
 671:Caterina.c    ****     {
 672:Caterina.c    ****         // Clear the application section of flash
 673:Caterina.c    ****         for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress +=
 674:Caterina.c    ****         {
 675:Caterina.c    ****             boot_page_erase(CurrFlashAddress);
 1039               		.loc 1 675 0
 1040 0106 83E0      		ldi r24,lo8(3)
 1041               	.LVL59:
 676:Caterina.c    ****             boot_spm_busy_wait();
 677:Caterina.c    ****             boot_page_write(CurrFlashAddress);
 1042               		.loc 1 677 0
 1043 0108 95E0      		ldi r25,lo8(5)
 1044               	.L82:
 675:Caterina.c    ****             boot_page_erase(CurrFlashAddress);
 1045               		.loc 1 675 0
 1046               	/* #APP */
 1047               	 ;  675 "Caterina.c" 1
 1048 010a 8093 5700 		sts 87, r24
 1049 010e E895      		spm
 1050               		
 1051               	 ;  0 "" 2
 1052               	/* #NOAPP */
 1053               	.L79:
 676:Caterina.c    ****             boot_spm_busy_wait();
 1054               		.loc 1 676 0 discriminator 1
 1055 0110 07B6      		in __tmp_reg__,0x37
 1056 0112 00FC      		sbrc __tmp_reg__,0
 1057 0114 00C0      		rjmp .L79
 1058               		.loc 1 677 0
 1059               	/* #APP */
 1060               	 ;  677 "Caterina.c" 1
 1061 0116 9093 5700 		sts 87, r25
 1062 011a E895      		spm
 1063               		
 1064               	 ;  0 "" 2
 1065               	/* #NOAPP */
 1066               	.L81:
 678:Caterina.c    ****             boot_spm_busy_wait();
 1067               		.loc 1 678 0 discriminator 1
 1068 011c 07B6      		in __tmp_reg__,0x37
 1069 011e 00FC      		sbrc __tmp_reg__,0
 1070 0120 00C0      		rjmp .L81
 1071               	.LVL60:
 1072 0122 E058      		subi r30,-128
 1073 0124 FF4F      		sbci r31,-1
 673:Caterina.c    ****         for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress +=
 1074               		.loc 1 673 0
 1075 0126 E115      		cp r30,__zero_reg__
 1076 0128 20E7      		ldi r18,112
 1077 012a F207      		cpc r31,r18
 1078 012c 01F4      		brne .L82
 1079 012e 00C0      		rjmp .L152
 1080               	.LVL61:
 1081               	.L77:
 1082               	.LBE165:
 679:Caterina.c    ****         }
 680:Caterina.c    **** 
 681:Caterina.c    ****         // Send confirmation byte back to the host
 682:Caterina.c    ****         WriteNextResponseByte('\r');
 683:Caterina.c    ****     }
 684:Caterina.c    ****     #if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
 685:Caterina.c    ****     else if (Command == 'l')
 686:Caterina.c    ****     {
 687:Caterina.c    ****         // Set the lock bits to those given by the host
 688:Caterina.c    ****         boot_lock_bits_set(FetchNextCommandByte());
 689:Caterina.c    **** 
 690:Caterina.c    ****         // Send confirmation byte back to the host
 691:Caterina.c    ****         WriteNextResponseByte('\r');
 692:Caterina.c    ****     }
 693:Caterina.c    ****     #endif
 694:Caterina.c    ****     else if (Command == 'r')
 1083               		.loc 1 694 0
 1084 0130 8237      		cpi r24,lo8(114)
 1085 0132 01F4      		brne .L83
 1086               	.LBB166:
 695:Caterina.c    ****     {
 696:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
 1087               		.loc 1 696 0
 1088 0134 E1E0      		ldi r30,lo8(1)
 1089 0136 F0E0      		ldi r31,0
 1090 0138 00C0      		rjmp .L155
 1091               	.L83:
 1092               	.LBE166:
 697:Caterina.c    ****     }
 698:Caterina.c    ****     else if (Command == 'F')
 1093               		.loc 1 698 0
 1094 013a 8634      		cpi r24,lo8(70)
 1095 013c 01F4      		brne .L84
 1096               	.LBB167:
 699:Caterina.c    ****     {
 700:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
 1097               		.loc 1 700 0
 1098 013e E0E0      		ldi r30,0
 1099 0140 F0E0      		ldi r31,0
 1100 0142 00C0      		rjmp .L155
 1101               	.L84:
 1102               	.LBE167:
 701:Caterina.c    ****     }
 702:Caterina.c    ****     else if (Command == 'N')
 1103               		.loc 1 702 0
 1104 0144 8E34      		cpi r24,lo8(78)
 1105 0146 01F4      		brne .L85
 1106               	.LBB168:
 703:Caterina.c    ****     {
 704:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
 1107               		.loc 1 704 0
 1108 0148 E3E0      		ldi r30,lo8(3)
 1109 014a F0E0      		ldi r31,0
 1110 014c 00C0      		rjmp .L155
 1111               	.L85:
 1112               	.LBE168:
 705:Caterina.c    ****     }
 706:Caterina.c    ****     else if (Command == 'Q')
 1113               		.loc 1 706 0
 1114 014e 8135      		cpi r24,lo8(81)
 1115 0150 01F4      		brne .L86
 1116               	.LBB169:
 707:Caterina.c    ****     {
 708:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
 1117               		.loc 1 708 0
 1118 0152 E2E0      		ldi r30,lo8(2)
 1119 0154 F0E0      		ldi r31,0
 1120               	.L155:
 1121 0156 89E0      		ldi r24,lo8(9)
 1122               	.LVL62:
 1123               	/* #APP */
 1124               	 ;  708 "Caterina.c" 1
 1125 0158 8093 5700 		sts 87, r24
 1126 015c 8491      		lpm r24, Z
 1127               		
 1128               	 ;  0 "" 2
 1129               	.LVL63:
 1130               	/* #NOAPP */
 1131 015e 00C0      		rjmp .L153
 1132               	.LVL64:
 1133               	.L86:
 1134               	.LBE169:
 709:Caterina.c    ****     }
 710:Caterina.c    ****     #if !defined(NO_BLOCK_SUPPORT)
 711:Caterina.c    ****     else if (Command == 'b')
 1135               		.loc 1 711 0
 1136 0160 8236      		cpi r24,lo8(98)
 1137 0162 01F4      		brne .L87
 712:Caterina.c    ****     {
 713:Caterina.c    ****         WriteNextResponseByte('Y');
 1138               		.loc 1 713 0
 1139 0164 89E5      		ldi r24,lo8(89)
 1140               	.LVL65:
 1141 0166 0E94 0000 		call WriteNextResponseByte
 1142               	.LVL66:
 714:Caterina.c    **** 
 715:Caterina.c    ****         // Send block size to the host
 716:Caterina.c    ****         WriteNextResponseByte(SPM_PAGESIZE >> 8);
 1143               		.loc 1 716 0
 1144 016a 80E0      		ldi r24,0
 1145 016c 0E94 0000 		call WriteNextResponseByte
 1146               	.LVL67:
 717:Caterina.c    ****         WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
 1147               		.loc 1 717 0
 1148 0170 80E8      		ldi r24,lo8(-128)
 1149 0172 00C0      		rjmp .L153
 1150               	.LVL68:
 1151               	.L87:
 718:Caterina.c    ****     }
 719:Caterina.c    ****     else if ((Command == 'B') || (Command == 'g'))
 1152               		.loc 1 719 0
 1153 0174 8234      		cpi r24,lo8(66)
 1154 0176 01F0      		breq .L88
 1155               		.loc 1 719 0 is_stmt 0 discriminator 1
 1156 0178 8736      		cpi r24,lo8(103)
 1157 017a 01F0      		breq .+2
 1158 017c 00C0      		rjmp .L89
 1159               	.L88:
 720:Caterina.c    ****     {
 721:Caterina.c    ****         // Keep resetting the timeout counter if we're receiving self-programming instructions
 722:Caterina.c    ****         Timeout = 0;
 1160               		.loc 1 722 0 is_stmt 1
 1161 017e 1092 0000 		sts Timeout+1,__zero_reg__
 1162 0182 1092 0000 		sts Timeout,__zero_reg__
 1163               	.LVL69:
 1164               	.LBB170:
 1165               	.LBB171:
 405:Caterina.c    ****     BlockSize  = (FetchNextCommandByte() << 8);
 1166               		.loc 1 405 0
 1167 0186 0E94 0000 		call FetchNextCommandByte
 1168               	.LVL70:
 1169 018a D82E      		mov r13,r24
 1170               	.LVL71:
 406:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 1171               		.loc 1 406 0
 1172 018c 0E94 0000 		call FetchNextCommandByte
 1173               	.LVL72:
 1174 0190 E82E      		mov r14,r24
 1175               	.LVL73:
 408:Caterina.c    ****     MemoryType =  FetchNextCommandByte();
 1176               		.loc 1 408 0
 1177 0192 0E94 0000 		call FetchNextCommandByte
 1178               	.LVL74:
 1179 0196 C82F      		mov r28,r24
 1180               	.LVL75:
 410:Caterina.c    ****     if ((MemoryType != 'E') && (MemoryType != 'F'))
 1181               		.loc 1 410 0
 1182 0198 8BEB      		ldi r24,lo8(-69)
 1183               	.LVL76:
 1184 019a 8C0F      		add r24,r28
 1185 019c 8230      		cpi r24,lo8(2)
 1186 019e 00F0      		brlo .L90
 1187               	.LVL77:
 1188               	.L116:
 413:Caterina.c    ****         WriteNextResponseByte('?');
 1189               		.loc 1 413 0
 1190 01a0 8FE3      		ldi r24,lo8(63)
 1191 01a2 00C0      		rjmp .L153
 1192               	.LVL78:
 1193               	.L90:
 405:Caterina.c    ****     BlockSize  = (FetchNextCommandByte() << 8);
 1194               		.loc 1 405 0
 1195 01a4 F12C      		mov r15,__zero_reg__
 406:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 1196               		.loc 1 406 0
 1197 01a6 FD28      		or r15,r13
 420:Caterina.c    ****     TIMSK1 = 0;
 1198               		.loc 1 420 0
 1199 01a8 1092 6F00 		sts 111,__zero_reg__
 423:Caterina.c    ****     if (Command == 'g')
 1200               		.loc 1 423 0
 1201 01ac D736      		cpi r29,lo8(103)
 1202 01ae 01F0      		breq .+2
 1203 01b0 00C0      		rjmp .L91
 426:Caterina.c    ****         boot_rww_enable();
 1204               		.loc 1 426 0
 1205 01b2 81E1      		ldi r24,lo8(17)
 1206               	/* #APP */
 1207               	 ;  426 "Caterina.c" 1
 1208 01b4 8093 5700 		sts 87, r24
 1209 01b8 E895      		spm
 1210               		
 1211               	 ;  0 "" 2
 1212               	/* #NOAPP */
 1213 01ba 5701      		movw r10,r14
 402:Caterina.c    ****     bool     HighByte = false;
 1214               		.loc 1 402 0
 1215 01bc 912C      		mov r9,__zero_reg__
 443:Caterina.c    ****                 HighByte = !HighByte;
 1216               		.loc 1 443 0
 1217 01be D1E0      		ldi r29,lo8(1)
 1218               	.LVL79:
 1219               	.L92:
 428:Caterina.c    ****         while (BlockSize--)
 1220               		.loc 1 428 0
 1221 01c0 A114      		cp r10,__zero_reg__
 1222 01c2 B104      		cpc r11,__zero_reg__
 1223 01c4 01F4      		brne .+2
 1224 01c6 00C0      		rjmp .L97
 1225 01c8 C090 0000 		lds r12,CurrAddress
 1226 01cc D090 0000 		lds r13,CurrAddress+1
 1227 01d0 E090 0000 		lds r14,CurrAddress+2
 1228 01d4 F090 0000 		lds r15,CurrAddress+3
 430:Caterina.c    ****             if (MemoryType == 'F')
 1229               		.loc 1 430 0
 1230 01d8 C634      		cpi r28,lo8(70)
 1231 01da 01F4      		brne .L93
 1232               	.LVL80:
 1233               	.LBB172:
 436:Caterina.c    ****                 WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 1234               		.loc 1 436 0
 1235 01dc E92D      		mov r30,r9
 1236 01de F0E0      		ldi r31,0
 1237 01e0 EC29      		or r30,r12
 1238 01e2 FD29      		or r31,r13
 1239               	/* #APP */
 1240               	 ;  436 "Caterina.c" 1
 1241 01e4 8491      		lpm r24, Z
 1242               		
 1243               	 ;  0 "" 2
 1244               	.LVL81:
 1245               	/* #NOAPP */
 1246               	.LBE172:
 1247 01e6 0E94 0000 		call WriteNextResponseByte
 1248               	.LVL82:
 440:Caterina.c    ****                 if (HighByte)
 1249               		.loc 1 440 0
 1250 01ea 9920      		tst r9
 1251 01ec 01F0      		breq .L94
 441:Caterina.c    ****                   CurrAddress += 2;
 1252               		.loc 1 441 0
 1253 01ee 82E0      		ldi r24,2
 1254 01f0 C80E      		add r12,r24
 1255 01f2 D11C      		adc r13,__zero_reg__
 1256 01f4 E11C      		adc r14,__zero_reg__
 1257 01f6 F11C      		adc r15,__zero_reg__
 1258               	.LVL83:
 1259 01f8 C092 0000 		sts CurrAddress,r12
 1260 01fc D092 0000 		sts CurrAddress+1,r13
 1261 0200 E092 0000 		sts CurrAddress+2,r14
 1262 0204 F092 0000 		sts CurrAddress+3,r15
 1263               	.LVL84:
 1264               	.L94:
 443:Caterina.c    ****                 HighByte = !HighByte;
 1265               		.loc 1 443 0
 1266 0208 9D26      		eor r9,r29
 1267               	.LVL85:
 1268 020a 00C0      		rjmp .L95
 1269               	.L93:
 448:Caterina.c    ****                 WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 1270               		.loc 1 448 0
 1271 020c D701      		movw r26,r14
 1272 020e C601      		movw r24,r12
 1273 0210 B695      		lsr r27
 1274 0212 A795      		ror r26
 1275 0214 9795      		ror r25
 1276 0216 8795      		ror r24
 1277 0218 0E94 0000 		call __eerd_byte_m32u4
 1278               	.LVL86:
 1279 021c 0E94 0000 		call WriteNextResponseByte
 1280               	.LVL87:
 451:Caterina.c    ****                 CurrAddress += 2;
 1281               		.loc 1 451 0
 1282 0220 E2E0      		ldi r30,2
 1283 0222 CE0E      		add r12,r30
 1284 0224 D11C      		adc r13,__zero_reg__
 1285 0226 E11C      		adc r14,__zero_reg__
 1286 0228 F11C      		adc r15,__zero_reg__
 1287 022a C092 0000 		sts CurrAddress,r12
 1288 022e D092 0000 		sts CurrAddress+1,r13
 1289 0232 E092 0000 		sts CurrAddress+2,r14
 1290 0236 F092 0000 		sts CurrAddress+3,r15
 1291               	.L95:
 1292 023a F1E0      		ldi r31,1
 1293 023c AF1A      		sub r10,r31
 1294 023e B108      		sbc r11,__zero_reg__
 1295               	.LVL88:
 1296 0240 00C0      		rjmp .L92
 1297               	.LVL89:
 1298               	.L91:
 1299               	.LBB173:
 457:Caterina.c    ****         uint32_t PageStartAddress = CurrAddress;
 1300               		.loc 1 457 0
 1301 0242 8090 0000 		lds r8,CurrAddress
 1302 0246 9090 0000 		lds r9,CurrAddress+1
 1303 024a A090 0000 		lds r10,CurrAddress+2
 1304 024e B090 0000 		lds r11,CurrAddress+3
 459:Caterina.c    ****         if (MemoryType == 'F')
 1305               		.loc 1 459 0
 1306 0252 C634      		cpi r28,lo8(70)
 1307 0254 01F0      		breq .L98
 1308               	.L100:
 1309               	.LBE173:
 402:Caterina.c    ****     bool     HighByte = false;
 1310               		.loc 1 402 0
 1311 0256 C12C      		mov r12,__zero_reg__
 1312 0258 D12C      		mov r13,__zero_reg__
 1313               	.LVL90:
 1314               	.LBB174:
 483:Caterina.c    ****                 HighByte = !HighByte;
 1315               		.loc 1 483 0
 1316 025a D1E0      		ldi r29,lo8(1)
 1317               	.LVL91:
 1318 025c 00C0      		rjmp .L99
 1319               	.LVL92:
 1320               	.L98:
 461:Caterina.c    ****             boot_page_erase(PageStartAddress);
 1321               		.loc 1 461 0
 1322 025e 83E0      		ldi r24,lo8(3)
 1323 0260 F401      		movw r30,r8
 1324               	/* #APP */
 1325               	 ;  461 "Caterina.c" 1
 1326 0262 8093 5700 		sts 87, r24
 1327 0266 E895      		spm
 1328               		
 1329               	 ;  0 "" 2
 1330               	/* #NOAPP */
 1331               	.L101:
 462:Caterina.c    ****             boot_spm_busy_wait();
 1332               		.loc 1 462 0
 1333 0268 07B6      		in __tmp_reg__,0x37
 1334 026a 00FC      		sbrc __tmp_reg__,0
 1335 026c 00C0      		rjmp .L101
 1336 026e 00C0      		rjmp .L100
 1337               	.LVL93:
 1338               	.L106:
 467:Caterina.c    ****             if (MemoryType == 'F')
 1339               		.loc 1 467 0
 1340 0270 C634      		cpi r28,lo8(70)
 1341 0272 01F4      		brne .L102
 470:Caterina.c    ****                 if (HighByte)
 1342               		.loc 1 470 0
 1343 0274 DD20      		tst r13
 1344 0276 01F0      		breq .L103
 473:Caterina.c    ****                     boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 1345               		.loc 1 473 0
 1346 0278 4090 0000 		lds r4,CurrAddress
 1347 027c 5090 0000 		lds r5,CurrAddress+1
 1348 0280 6090 0000 		lds r6,CurrAddress+2
 1349 0284 7090 0000 		lds r7,CurrAddress+3
 1350 0288 0E94 0000 		call FetchNextCommandByte
 1351               	.LVL94:
 1352 028c 2C2D      		mov r18,r12
 1353 028e 30E0      		ldi r19,0
 1354 0290 382B      		or r19,r24
 1355 0292 F201      		movw r30,r4
 1356               	/* #APP */
 1357               	 ;  473 "Caterina.c" 1
 1358 0294 0901      		movw  r0, r18
 1359 0296 D093 5700 		sts 87, r29
 1360 029a E895      		spm
 1361 029c 1124      		clr  r1
 1362               		
 1363               	 ;  0 "" 2
 476:Caterina.c    ****                     CurrAddress += 2;
 1364               		.loc 1 476 0
 1365               	/* #NOAPP */
 1366 029e F2E0      		ldi r31,2
 1367 02a0 4F0E      		add r4,r31
 1368 02a2 511C      		adc r5,__zero_reg__
 1369 02a4 611C      		adc r6,__zero_reg__
 1370 02a6 711C      		adc r7,__zero_reg__
 1371 02a8 4092 0000 		sts CurrAddress,r4
 1372 02ac 5092 0000 		sts CurrAddress+1,r5
 1373 02b0 6092 0000 		sts CurrAddress+2,r6
 1374 02b4 7092 0000 		sts CurrAddress+3,r7
 1375               	.L104:
 483:Caterina.c    ****                 HighByte = !HighByte;
 1376               		.loc 1 483 0
 1377 02b8 DD26      		eor r13,r29
 1378               	.LVL95:
 1379               	.L105:
 1380 02ba 21E0      		ldi r18,1
 1381 02bc E21A      		sub r14,r18
 1382 02be F108      		sbc r15,__zero_reg__
 1383               	.LVL96:
 1384               	.L99:
 465:Caterina.c    ****         while (BlockSize--)
 1385               		.loc 1 465 0
 1386 02c0 E114      		cp r14,__zero_reg__
 1387 02c2 F104      		cpc r15,__zero_reg__
 1388 02c4 01F4      		brne .L106
 1389 02c6 00C0      		rjmp .L156
 1390               	.L103:
 480:Caterina.c    ****                     LowByte = FetchNextCommandByte();
 1391               		.loc 1 480 0
 1392 02c8 0E94 0000 		call FetchNextCommandByte
 1393               	.LVL97:
 1394 02cc C82E      		mov r12,r24
 1395               	.LVL98:
 1396 02ce 00C0      		rjmp .L104
 1397               	.L102:
 488:Caterina.c    ****                 eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte())
 1398               		.loc 1 488 0
 1399 02d0 0E94 0000 		call FetchNextCommandByte
 1400               	.LVL99:
 1401 02d4 682F      		mov r22,r24
 1402 02d6 8091 0000 		lds r24,CurrAddress
 1403 02da 9091 0000 		lds r25,CurrAddress+1
 1404 02de A091 0000 		lds r26,CurrAddress+2
 1405 02e2 B091 0000 		lds r27,CurrAddress+3
 1406 02e6 B695      		lsr r27
 1407 02e8 A795      		ror r26
 1408 02ea 9795      		ror r25
 1409 02ec 8795      		ror r24
 1410 02ee 0E94 0000 		call __eewr_byte_m32u4
 1411               	.LVL100:
 491:Caterina.c    ****                 CurrAddress += 2;
 1412               		.loc 1 491 0
 1413 02f2 4091 0000 		lds r20,CurrAddress
 1414 02f6 5091 0000 		lds r21,CurrAddress+1
 1415 02fa 6091 0000 		lds r22,CurrAddress+2
 1416 02fe 7091 0000 		lds r23,CurrAddress+3
 1417 0302 4E5F      		subi r20,-2
 1418 0304 5F4F      		sbci r21,-1
 1419 0306 6F4F      		sbci r22,-1
 1420 0308 7F4F      		sbci r23,-1
 1421 030a 4093 0000 		sts CurrAddress,r20
 1422 030e 5093 0000 		sts CurrAddress+1,r21
 1423 0312 6093 0000 		sts CurrAddress+2,r22
 1424 0316 7093 0000 		sts CurrAddress+3,r23
 1425 031a 00C0      		rjmp .L105
 1426               	.L156:
 496:Caterina.c    ****         if (MemoryType == 'F')
 1427               		.loc 1 496 0
 1428 031c C634      		cpi r28,lo8(70)
 1429 031e 01F4      		brne .L107
 499:Caterina.c    ****             boot_page_write(PageStartAddress);
 1430               		.loc 1 499 0
 1431 0320 85E0      		ldi r24,lo8(5)
 1432 0322 F401      		movw r30,r8
 1433               	/* #APP */
 1434               	 ;  499 "Caterina.c" 1
 1435 0324 8093 5700 		sts 87, r24
 1436 0328 E895      		spm
 1437               		
 1438               	 ;  0 "" 2
 1439               	/* #NOAPP */
 1440               	.L108:
 502:Caterina.c    ****             boot_spm_busy_wait();
 1441               		.loc 1 502 0
 1442 032a 07B6      		in __tmp_reg__,0x37
 1443 032c 00FC      		sbrc __tmp_reg__,0
 1444 032e 00C0      		rjmp .L108
 1445               	.L107:
 506:Caterina.c    ****         WriteNextResponseByte('\r');
 1446               		.loc 1 506 0
 1447 0330 8DE0      		ldi r24,lo8(13)
 1448 0332 0E94 0000 		call WriteNextResponseByte
 1449               	.LVL101:
 1450               	.L97:
 1451               	.LBE174:
 510:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);
 1452               		.loc 1 510 0
 1453 0336 82E0      		ldi r24,lo8(2)
 1454 0338 8093 6F00 		sts 111,r24
 1455 033c 00C0      		rjmp .L64
 1456               	.LVL102:
 1457               	.L89:
 1458               	.LBE171:
 1459               	.LBE170:
 723:Caterina.c    ****         // Delegate the block write/read to a separate function for clarity
 724:Caterina.c    ****         ReadWriteMemoryBlock(Command);
 725:Caterina.c    ****     }
 726:Caterina.c    ****     #endif
 727:Caterina.c    ****     #if !defined(NO_FLASH_BYTE_SUPPORT)
 728:Caterina.c    ****     else if (Command == 'C')
 1460               		.loc 1 728 0
 1461 033e 8334      		cpi r24,lo8(67)
 1462 0340 01F4      		brne .L109
 729:Caterina.c    ****     {
 730:Caterina.c    ****         // Write the high byte to the current flash page
 731:Caterina.c    ****         boot_page_fill(CurrAddress, FetchNextCommandByte());
 1463               		.loc 1 731 0
 1464 0342 C091 0000 		lds r28,CurrAddress
 1465 0346 D091 0000 		lds r29,CurrAddress+1
 1466 034a 0E94 0000 		call FetchNextCommandByte
 1467               	.LVL103:
 1468 034e 90E0      		ldi r25,0
 1469 0350 21E0      		ldi r18,lo8(1)
 1470 0352 FE01      		movw r30,r28
 1471               	/* #APP */
 1472               	 ;  731 "Caterina.c" 1
 1473 0354 0C01      		movw  r0, r24
 1474 0356 2093 5700 		sts 87, r18
 1475 035a E895      		spm
 1476 035c 1124      		clr  r1
 1477               		
 1478               	 ;  0 "" 2
 1479               	/* #NOAPP */
 1480 035e 00C0      		rjmp .L152
 1481               	.LVL104:
 1482               	.L109:
 732:Caterina.c    **** 
 733:Caterina.c    ****         // Send confirmation byte back to the host
 734:Caterina.c    ****         WriteNextResponseByte('\r');
 735:Caterina.c    ****     }
 736:Caterina.c    ****     else if (Command == 'c')
 1483               		.loc 1 736 0
 1484 0360 8336      		cpi r24,lo8(99)
 1485 0362 01F4      		brne .L110
 737:Caterina.c    ****     {
 738:Caterina.c    ****         // Write the low byte to the current flash page
 739:Caterina.c    ****         boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
 1486               		.loc 1 739 0
 1487 0364 C090 0000 		lds r12,CurrAddress
 1488 0368 D090 0000 		lds r13,CurrAddress+1
 1489 036c E090 0000 		lds r14,CurrAddress+2
 1490 0370 F090 0000 		lds r15,CurrAddress+3
 1491 0374 0E94 0000 		call FetchNextCommandByte
 1492               	.LVL105:
 1493 0378 F601      		movw r30,r12
 1494 037a E160      		ori r30,1
 1495 037c 90E0      		ldi r25,0
 1496 037e 21E0      		ldi r18,lo8(1)
 1497               	/* #APP */
 1498               	 ;  739 "Caterina.c" 1
 1499 0380 0C01      		movw  r0, r24
 1500 0382 2093 5700 		sts 87, r18
 1501 0386 E895      		spm
 1502 0388 1124      		clr  r1
 1503               		
 1504               	 ;  0 "" 2
 740:Caterina.c    **** 
 741:Caterina.c    ****         // Increment the address
 742:Caterina.c    ****         CurrAddress += 2;
 1505               		.loc 1 742 0
 1506               	/* #NOAPP */
 1507 038a F2E0      		ldi r31,2
 1508 038c CF0E      		add r12,r31
 1509 038e D11C      		adc r13,__zero_reg__
 1510 0390 E11C      		adc r14,__zero_reg__
 1511 0392 F11C      		adc r15,__zero_reg__
 1512 0394 C092 0000 		sts CurrAddress,r12
 1513 0398 D092 0000 		sts CurrAddress+1,r13
 1514 039c E092 0000 		sts CurrAddress+2,r14
 1515 03a0 F092 0000 		sts CurrAddress+3,r15
 1516 03a4 00C0      		rjmp .L152
 1517               	.LVL106:
 1518               	.L110:
 743:Caterina.c    **** 
 744:Caterina.c    ****         // Send confirmation byte back to the host
 745:Caterina.c    ****         WriteNextResponseByte('\r');
 746:Caterina.c    ****     }
 747:Caterina.c    ****     else if (Command == 'm')
 1519               		.loc 1 747 0
 1520 03a6 8D36      		cpi r24,lo8(109)
 1521 03a8 01F4      		brne .L111
 748:Caterina.c    ****     {
 749:Caterina.c    ****         // Commit the flash page to memory
 750:Caterina.c    ****         boot_page_write(CurrAddress);
 1522               		.loc 1 750 0
 1523 03aa E091 0000 		lds r30,CurrAddress
 1524 03ae F091 0000 		lds r31,CurrAddress+1
 1525 03b2 85E0      		ldi r24,lo8(5)
 1526               	.LVL107:
 1527               	/* #APP */
 1528               	 ;  750 "Caterina.c" 1
 1529 03b4 8093 5700 		sts 87, r24
 1530 03b8 E895      		spm
 1531               		
 1532               	 ;  0 "" 2
 1533               	/* #NOAPP */
 1534               	.L112:
 751:Caterina.c    **** 
 752:Caterina.c    ****         // Wait until write operation has completed
 753:Caterina.c    ****         boot_spm_busy_wait();
 1535               		.loc 1 753 0 discriminator 1
 1536 03ba 07B6      		in __tmp_reg__,0x37
 1537 03bc 00FC      		sbrc __tmp_reg__,0
 1538 03be 00C0      		rjmp .L112
 1539 03c0 00C0      		rjmp .L152
 1540               	.LVL108:
 1541               	.L111:
 754:Caterina.c    **** 
 755:Caterina.c    ****         // Send confirmation byte back to the host
 756:Caterina.c    ****         WriteNextResponseByte('\r');
 757:Caterina.c    ****     }
 758:Caterina.c    ****     else if (Command == 'R')
 1542               		.loc 1 758 0
 1543 03c2 8235      		cpi r24,lo8(82)
 1544 03c4 01F4      		brne .L113
 1545               	.LBB175:
 1546               	.LBB176:
 759:Caterina.c    ****     {
 760:Caterina.c    ****         #if (FLASHEND > 0xFFFF)
 761:Caterina.c    ****         uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
 762:Caterina.c    ****         #else
 763:Caterina.c    ****         uint16_t ProgramWord = pgm_read_word(CurrAddress);
 1547               		.loc 1 763 0
 1548 03c6 E091 0000 		lds r30,CurrAddress
 1549 03ca F091 0000 		lds r31,CurrAddress+1
 1550               	.LVL109:
 1551               	/* #APP */
 1552               	 ;  763 "Caterina.c" 1
 1553 03ce C591      		lpm r28, Z+
 1554 03d0 D491      		lpm r29, Z
 1555               		
 1556               	 ;  0 "" 2
 1557               	.LVL110:
 1558               	/* #NOAPP */
 1559               	.LBE176:
 764:Caterina.c    ****         #endif
 765:Caterina.c    **** 
 766:Caterina.c    ****         WriteNextResponseByte(ProgramWord >> 8);
 1560               		.loc 1 766 0
 1561 03d2 8D2F      		mov r24,r29
 1562               	.LVL111:
 1563 03d4 0E94 0000 		call WriteNextResponseByte
 1564               	.LVL112:
 767:Caterina.c    ****         WriteNextResponseByte(ProgramWord & 0xFF);
 1565               		.loc 1 767 0
 1566 03d8 8C2F      		mov r24,r28
 1567 03da 00C0      		rjmp .L153
 1568               	.LVL113:
 1569               	.L113:
 1570               	.LBE175:
 768:Caterina.c    ****     }
 769:Caterina.c    ****     #endif
 770:Caterina.c    ****     #if !defined(NO_EEPROM_BYTE_SUPPORT)
 771:Caterina.c    ****     else if (Command == 'D')
 1571               		.loc 1 771 0
 1572 03dc 8434      		cpi r24,lo8(68)
 1573 03de 01F4      		brne .L114
 772:Caterina.c    ****     {
 773:Caterina.c    ****         // Read the byte from the endpoint and write it to the EEPROM
 774:Caterina.c    ****         eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1574               		.loc 1 774 0
 1575 03e0 0E94 0000 		call FetchNextCommandByte
 1576               	.LVL114:
 1577 03e4 682F      		mov r22,r24
 1578 03e6 8091 0000 		lds r24,CurrAddress
 1579 03ea 9091 0000 		lds r25,CurrAddress+1
 1580 03ee A091 0000 		lds r26,CurrAddress+2
 1581 03f2 B091 0000 		lds r27,CurrAddress+3
 1582 03f6 B695      		lsr r27
 1583 03f8 A795      		ror r26
 1584 03fa 9795      		ror r25
 1585 03fc 8795      		ror r24
 1586 03fe 0E94 0000 		call __eewr_byte_m32u4
 1587               	.LVL115:
 775:Caterina.c    **** 
 776:Caterina.c    ****         // Increment the address after use
 777:Caterina.c    ****         CurrAddress += 2;
 1588               		.loc 1 777 0
 1589 0402 8091 0000 		lds r24,CurrAddress
 1590 0406 9091 0000 		lds r25,CurrAddress+1
 1591 040a A091 0000 		lds r26,CurrAddress+2
 1592 040e B091 0000 		lds r27,CurrAddress+3
 1593 0412 0296      		adiw r24,2
 1594 0414 A11D      		adc r26,__zero_reg__
 1595 0416 B11D      		adc r27,__zero_reg__
 1596               	.L154:
 1597 0418 8093 0000 		sts CurrAddress,r24
 1598 041c 9093 0000 		sts CurrAddress+1,r25
 1599 0420 A093 0000 		sts CurrAddress+2,r26
 1600 0424 B093 0000 		sts CurrAddress+3,r27
 1601 0428 00C0      		rjmp .L152
 1602               	.LVL116:
 1603               	.L114:
 778:Caterina.c    **** 
 779:Caterina.c    ****         // Send confirmation byte back to the host
 780:Caterina.c    ****         WriteNextResponseByte('\r');
 781:Caterina.c    ****     }
 782:Caterina.c    ****     else if (Command == 'd')
 1604               		.loc 1 782 0
 1605 042a 8436      		cpi r24,lo8(100)
 1606 042c 01F4      		brne .L115
 783:Caterina.c    ****     {
 784:Caterina.c    ****         // Read the EEPROM byte and write it to the endpoint
 785:Caterina.c    ****         WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
 1607               		.loc 1 785 0
 1608 042e C090 0000 		lds r12,CurrAddress
 1609 0432 D090 0000 		lds r13,CurrAddress+1
 1610 0436 E090 0000 		lds r14,CurrAddress+2
 1611 043a F090 0000 		lds r15,CurrAddress+3
 1612 043e D701      		movw r26,r14
 1613 0440 C601      		movw r24,r12
 1614               	.LVL117:
 1615 0442 B695      		lsr r27
 1616 0444 A795      		ror r26
 1617 0446 9795      		ror r25
 1618 0448 8795      		ror r24
 1619 044a 0E94 0000 		call __eerd_byte_m32u4
 1620               	.LVL118:
 1621 044e 0E94 0000 		call WriteNextResponseByte
 1622               	.LVL119:
 786:Caterina.c    **** 
 787:Caterina.c    ****         // Increment the address after use
 788:Caterina.c    ****         CurrAddress += 2;
 1623               		.loc 1 788 0
 1624 0452 22E0      		ldi r18,2
 1625 0454 C20E      		add r12,r18
 1626 0456 D11C      		adc r13,__zero_reg__
 1627 0458 E11C      		adc r14,__zero_reg__
 1628 045a F11C      		adc r15,__zero_reg__
 1629 045c C092 0000 		sts CurrAddress,r12
 1630 0460 D092 0000 		sts CurrAddress+1,r13
 1631 0464 E092 0000 		sts CurrAddress+2,r14
 1632 0468 F092 0000 		sts CurrAddress+3,r15
 1633 046c 00C0      		rjmp .L64
 1634               	.LVL120:
 1635               	.L115:
 789:Caterina.c    ****     }
 790:Caterina.c    **** #endif
 791:Caterina.c    ****     else if (Command != 27)
 1636               		.loc 1 791 0
 1637 046e 8B31      		cpi r24,lo8(27)
 1638 0470 01F0      		breq .+2
 1639 0472 00C0      		rjmp .L116
 1640               	.LVL121:
 1641               	.L64:
 1642               	.LBB177:
 1643               	.LBB178:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 1644               		.loc 2 330 0
 1645 0474 83E0      		ldi r24,lo8(3)
 1646 0476 8093 E900 		sts 233,r24
 1647               	.LBE178:
 1648               	.LBE177:
 1649               	.LBB179:
 1650               	.LBB180:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 1651               		.loc 2 420 0
 1652 047a 9091 E800 		lds r25,232
 1653               	.LVL122:
 1654               	.LBE180:
 1655               	.LBE179:
 1656               	.LBB181:
 1657               	.LBB182:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 1658               		.loc 2 516 0
 1659 047e 8091 E800 		lds r24,232
 1660 0482 8E77      		andi r24,lo8(126)
 1661 0484 8093 E800 		sts 232,r24
 1662               	.LBE182:
 1663               	.LBE181:
 792:Caterina.c    ****     {
 793:Caterina.c    ****         // Unknown (non-sync) command, return fail code
 794:Caterina.c    ****         WriteNextResponseByte('?');
 795:Caterina.c    ****     }
 796:Caterina.c    **** 
 797:Caterina.c    **** 
 798:Caterina.c    ****     /* Select the IN endpoint */
 799:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 800:Caterina.c    **** 
 801:Caterina.c    ****     /* Remember if the endpoint is completely full before clearing it */
 802:Caterina.c    ****     bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
 803:Caterina.c    **** 
 804:Caterina.c    ****     /* Send the endpoint data to the host */
 805:Caterina.c    ****     Endpoint_ClearIN();
 806:Caterina.c    **** 
 807:Caterina.c    ****     /* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to s
 808:Caterina.c    ****     if (IsEndpointFull)
 1664               		.loc 1 808 0
 1665 0488 95FD      		sbrc r25,5
 1666 048a 00C0      		rjmp .L122
 1667               	.L121:
 1668               	.LBB183:
 1669               	.LBB184:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 1670               		.loc 2 467 0
 1671 048c 8091 E800 		lds r24,232
 1672               	.LBE184:
 1673               	.LBE183:
 809:Caterina.c    ****     {
 810:Caterina.c    ****         while (!(Endpoint_IsINReady()))
 1674               		.loc 1 810 0
 1675 0490 80FD      		sbrc r24,0
 1676 0492 00C0      		rjmp .L119
 811:Caterina.c    ****         {
 812:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
 1677               		.loc 1 812 0
 1678 0494 8EB3      		in r24,0x1e
 1679 0496 8111      		cpse r24,__zero_reg__
 1680 0498 00C0      		rjmp .L121
 1681 049a 00C0      		rjmp .L56
 1682               	.L119:
 1683               	.LBB185:
 1684               	.LBB186:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 1685               		.loc 2 516 0
 1686 049c 8091 E800 		lds r24,232
 1687 04a0 8E77      		andi r24,lo8(126)
 1688 04a2 8093 E800 		sts 232,r24
 1689 04a6 00C0      		rjmp .L122
 1690               	.L123:
 1691               	.LBE186:
 1692               	.LBE185:
 813:Caterina.c    ****               return;
 814:Caterina.c    ****         }
 815:Caterina.c    **** 
 816:Caterina.c    ****         Endpoint_ClearIN();
 817:Caterina.c    ****     }
 818:Caterina.c    **** 
 819:Caterina.c    ****     /* Wait until the data has been sent to the host */
 820:Caterina.c    ****     while (!(Endpoint_IsINReady()))
 821:Caterina.c    ****     {
 822:Caterina.c    ****         if (USB_DeviceState == DEVICE_STATE_Unattached)
 1693               		.loc 1 822 0
 1694 04a8 8EB3      		in r24,0x1e
 1695 04aa 8823      		tst r24
 1696 04ac 01F0      		breq .L56
 1697               	.L122:
 1698               	.LBB187:
 1699               	.LBB188:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 1700               		.loc 2 467 0 discriminator 1
 1701 04ae 8091 E800 		lds r24,232
 1702               	.LBE188:
 1703               	.LBE187:
 820:Caterina.c    ****     while (!(Endpoint_IsINReady()))
 1704               		.loc 1 820 0 discriminator 1
 1705 04b2 80FF      		sbrs r24,0
 1706 04b4 00C0      		rjmp .L123
 1707               	.LVL123:
 1708               	.LBB189:
 1709               	.LBB190:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 1710               		.loc 2 330 0
 1711 04b6 84E0      		ldi r24,lo8(4)
 1712 04b8 8093 E900 		sts 233,r24
 1713               	.LBE190:
 1714               	.LBE189:
 1715               	.LBB191:
 1716               	.LBB192:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1717               		.loc 2 531 0
 1718 04bc 8091 E800 		lds r24,232
 1719 04c0 8B77      		andi r24,lo8(123)
 1720 04c2 8093 E800 		sts 232,r24
 1721               	.LVL124:
 1722               	.L56:
 1723               	/* epilogue start */
 1724               	.LBE192:
 1725               	.LBE191:
 823:Caterina.c    ****           return;
 824:Caterina.c    ****     }
 825:Caterina.c    **** 
 826:Caterina.c    ****     /* Select the OUT endpoint */
 827:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 828:Caterina.c    **** 
 829:Caterina.c    ****     /* Acknowledge the command from the host */
 830:Caterina.c    ****     Endpoint_ClearOUT();
 831:Caterina.c    **** }
 1726               		.loc 1 831 0
 1727 04c6 DF91      		pop r29
 1728 04c8 CF91      		pop r28
 1729 04ca FF90      		pop r15
 1730 04cc EF90      		pop r14
 1731 04ce DF90      		pop r13
 1732 04d0 CF90      		pop r12
 1733 04d2 BF90      		pop r11
 1734 04d4 AF90      		pop r10
 1735 04d6 9F90      		pop r9
 1736 04d8 8F90      		pop r8
 1737 04da 7F90      		pop r7
 1738 04dc 6F90      		pop r6
 1739 04de 5F90      		pop r5
 1740 04e0 4F90      		pop r4
 1741 04e2 0895      		ret
 1742               		.cfi_endproc
 1743               	.LFE112:
 1745               		.section	.text.startup.main,"ax",@progbits
 1746               	.global	main
 1748               	main:
 1749               	.LFB104:
 241:Caterina.c    **** {
 1750               		.loc 1 241 0
 1751               		.cfi_startproc
 1752               	/* prologue: function */
 1753               	/* frame size = 0 */
 1754               	/* stack size = 0 */
 1755               	.L__stack_usage = 0
 243:Caterina.c    ****     MCUSR = 0;
 1756               		.loc 1 243 0
 1757 0000 14BE      		out 0x34,__zero_reg__
 245:Caterina.c    ****     wdt_disable();
 1758               		.loc 1 245 0
 1759 0002 88E1      		ldi r24,lo8(24)
 1760               	/* #APP */
 1761               	 ;  245 "Caterina.c" 1
 1762 0004 0FB6      		in __tmp_reg__, __SREG__
 1763 0006 F894      		cli
 1764 0008 8093 6000 		sts 96, r24
 1765 000c 1092 6000 		sts 96, __zero_reg__
 1766 0010 0FBE      		out __SREG__,__tmp_reg__
 1767               		
 1768               	 ;  0 "" 2
 248:Caterina.c    ****     BootMode_Init();
 1769               		.loc 1 248 0
 1770               	/* #NOAPP */
 1771 0012 6A98      		cbi 0xd,2
 1772 0014 729A      		sbi 0xe,2
 1773               	.LVL125:
 1774               	.LBB193:
 1775               	.LBB194:
 1776               		.loc 3 163 0
 1777 0016 8FE1      		ldi r24,lo8(19999)
 1778 0018 9EE4      		ldi r25,hi8(19999)
 1779 001a 0197      		1: sbiw r24,1
 1780 001c 01F4      		brne 1b
 1781 001e 00C0      		rjmp .
 1782 0020 0000      		nop
 1783               	.LBE194:
 1784               	.LBE193:
 251:Caterina.c    ****     if ((isBootMode() || (pgm_read_word(0) == 0xFFFF)))
 1785               		.loc 1 251 0
 1786 0022 629B      		sbis 0xc,2
 1787 0024 00C0      		rjmp .L158
 1788               	.LVL126:
 1789               	.LBB195:
 251:Caterina.c    ****     if ((isBootMode() || (pgm_read_word(0) == 0xFFFF)))
 1790               		.loc 1 251 0 is_stmt 0 discriminator 1
 1791 0026 E0E0      		ldi r30,0
 1792 0028 F0E0      		ldi r31,0
 1793               	/* #APP */
 1794               	 ;  251 "Caterina.c" 1
 1795 002a 8591      		lpm r24, Z+
 1796 002c 9491      		lpm r25, Z
 1797               		
 1798               	 ;  0 "" 2
 1799               	.LVL127:
 1800               	/* #NOAPP */
 1801               	.LBE195:
 1802 002e 0196      		adiw r24,1
 1803 0030 01F0      		breq .L158
 1804               	.LVL128:
 1805               	.L163:
 1806               	.LBB196:
 1807               	.LBB197:
 1808               		.file 4 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \copydetails Group_USBManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \ingroup Group_USBManagement
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \defgroup Group_USBManagement_AVR8 USB Interface Management (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  @{
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #ifndef __USBCONTROLLER_AVR8_H__
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #define __USBCONTROLLER_AVR8_H__
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Includes: */
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBMode.h"
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../Events.h"
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBTask.h"
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBInterrupt.h"
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Host.h"
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../OTG.h"
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Pipe.h"
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../HostStandardReq.h"
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../PipeStream.h"
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Device.h"
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Endpoint.h"
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../DeviceStandardReq.h"
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../EndpointStream.h"
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(__cplusplus)
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			extern "C" {
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Preprocessor Checks and Defines: */
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(F_USB)
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error F_USB is not defined. You must define F_USB to the frequency of the unprescaled USB contr
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if (F_USB == 8000000)
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#elif (F_USB == 16000000)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(USB_PLL_PSC)
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error No PLL prescale value available for chosen F_USB value and AVR model.
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Macros: */
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** \name USB Controller Option Masks */
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@{
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be enabled to regulate the data pin voltages from the VBUS level down to a 
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the range allowable by the USB standard.
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@}
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Determines if the VBUS line is currently high (i.e. the USB host is supplying power).
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void)
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void)
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  |=  (1 << DETACH);
 1809               		.loc 4 182 0 is_stmt 1
 1810 0032 8091 E000 		lds r24,224
 1811 0036 8160      		ori r24,lo8(1)
 1812 0038 8093 E000 		sts 224,r24
 1813               	.LBE197:
 1814               	.LBE196:
 271:Caterina.c    ****     SetupCurrentLimit();
 1815               		.loc 1 271 0
 1816 003c 0E94 0000 		call SetupCurrentLimit
 1817               	.LVL129:
 274:Caterina.c    ****     if(ReadBatteryVoltage < 745) {
 1818               		.loc 1 274 0
 1819 0040 80E0      		ldi r24,lo8(gs(ReadBatteryVoltage))
 1820 0042 90E0      		ldi r25,hi8(gs(ReadBatteryVoltage))
 1821 0044 893E      		cpi r24,-23
 1822 0046 9240      		sbci r25,2
 1823 0048 00F4      		brsh .L171
 275:Caterina.c    ****         AlertFatalError();
 1824               		.loc 1 275 0
 1825 004a 0E94 0000 		call AlertFatalError
 1826               	.LVL130:
 1827               	.L158:
 256:Caterina.c    ****         SetupHardware();
 1828               		.loc 1 256 0
 1829 004e 0E94 0000 		call SetupHardware
 1830               	.LVL131:
 259:Caterina.c    ****         sei();
 1831               		.loc 1 259 0
 1832               	/* #APP */
 1833               	 ;  259 "Caterina.c" 1
 1834 0052 7894      		sei
 1835               	 ;  0 "" 2
 1836               	/* #NOAPP */
 1837               	.L161:
 261:Caterina.c    ****         while(isBootMode()){
 1838               		.loc 1 261 0 discriminator 1
 1839 0054 6299      		sbic 0xc,2
 1840 0056 00C0      		rjmp .L163
 262:Caterina.c    ****             CDC_Task();
 1841               		.loc 1 262 0
 1842 0058 0E94 0000 		call CDC_Task
 1843               	.LVL132:
 263:Caterina.c    ****             USB_USBTask();
 1844               		.loc 1 263 0
 1845 005c 0E94 0000 		call USB_USBTask
 1846               	.LVL133:
 265:Caterina.c    ****             LEDPulse();
 1847               		.loc 1 265 0
 1848 0060 0E94 0000 		call LEDPulse
 1849               	.LVL134:
 1850 0064 00C0      		rjmp .L161
 1851               	.L171:
 279:Caterina.c    ****     StartSketch();
 1852               		.loc 1 279 0
 1853 0066 0E94 0000 		call StartSketch
 1854               	.LVL135:
 280:Caterina.c    **** }
 1855               		.loc 1 280 0
 1856 006a 80E0      		ldi r24,0
 1857 006c 90E0      		ldi r25,0
 1858 006e 0895      		ret
 1859               		.cfi_endproc
 1860               	.LFE104:
 1862               		.comm	LLEDPulse,2,1
 1863               	.global	Timeout
 1864               		.section .bss
 1867               	Timeout:
 1868 0000 0000      		.zero	2
 1869               	.global	RxLEDPulse
 1872               	RxLEDPulse:
 1873 0002 0000      		.zero	2
 1874               	.global	TxLEDPulse
 1877               	TxLEDPulse:
 1878 0004 0000      		.zero	2
 1879               		.local	CurrAddress
 1880               		.comm	CurrAddress,4,1
 1881               		.data
 1884               	LineEncoding:
 1885 0000 00        		.byte	0
 1886 0001 00        		.byte	0
 1887 0002 00        		.byte	0
 1888 0003 00        		.byte	0
 1889 0004 00        		.byte	0
 1890 0005 00        		.byte	0
 1891 0006 08        		.byte	8
 1892               		.text
 1893               	.Letext0:
 1894               		.file 5 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 1895               		.file 6 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1896               		.file 7 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1897               		.file 8 "../../LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1898               		.file 9 "../../LUFA-111009/LUFA/Drivers/USB/Core/USBTask.h"
 1899               		.file 10 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1900               		.file 11 "/usr/local/CrossPack-AVR-20131216/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Caterina.c
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:2      *ABS*:0000003e __SP_H__
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:3      *ABS*:0000003d __SP_L__
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:4      *ABS*:0000003f __SREG__
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:6      *ABS*:00000001 __zero_reg__
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:12     .text.FetchNextCommandByte:00000000 FetchNextCommandByte
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:80     .text.WriteNextResponseByte:00000000 WriteNextResponseByte
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:1877   .bss:00000004 TxLEDPulse
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:154    .text.ReadBatteryVoltage:00000000 ReadBatteryVoltage
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:213    .text.StartSketch:00000000 StartSketch
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:259    .text.TWIInit:00000000 TWIInit
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:282    .text.TWIStart:00000000 TWIStart
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:304    .text.TWIStop:00000000 TWIStop
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:322    .text.TWIWrite:00000000 TWIWrite
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:352    .text.SetupCurrentLimit:00000000 SetupCurrentLimit
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:385    .text.AlertFatalError:00000000 AlertFatalError
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:443    .text.LEDPulse:00000000 LEDPulse
                            *COM*:00000002 LLEDPulse
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:487    .text.SetupHardware:00000000 SetupHardware
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:536    .text.__vector_17:00000000 __vector_17
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:1872   .bss:00000002 RxLEDPulse
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:1867   .bss:00000000 Timeout
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:649    .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:692    .text.EVENT_USB_Device_ControlRequest:00000000 EVENT_USB_Device_ControlRequest
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:1884   .data:00000000 LineEncoding
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:777    .text.CDC_Task:00000000 CDC_Task
                             .bss:00000006 CurrAddress
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:1748   .text.startup.main:00000000 main
/var/folders/21/48xmffd55532bzn9lrp15kkc0000gn/T//ccILsRAv.s:772    .rodata.str1.1:00000000 .LC0

UNDEFINED SYMBOLS
USB_Init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
__eerd_byte_m32u4
__eewr_byte_m32u4
USB_USBTask
__do_copy_data
__do_clear_bss
