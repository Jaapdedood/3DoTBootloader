   1               		.file	"Caterina.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.FetchNextCommandByte,"ax",@progbits
  12               	FetchNextCommandByte:
  13               	.LFB107:
  14               		.file 1 "Caterina.c"
   1:Caterina.c    **** /*
   2:Caterina.c    ****              LUFA Library
   3:Caterina.c    ****      Copyright (C) Dean Camera, 2011.
   4:Caterina.c    **** 
   5:Caterina.c    ****   dean [at] fourwalledcubicle [dot] com
   6:Caterina.c    ****            www.lufa-lib.org
   7:Caterina.c    **** */
   8:Caterina.c    **** 
   9:Caterina.c    **** /*
  10:Caterina.c    ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Caterina.c    **** 
  12:Caterina.c    ****   Permission to use, copy, modify, distribute, and sell this
  13:Caterina.c    ****   software and its documentation for any purpose is hereby granted
  14:Caterina.c    ****   without fee, provided that the above copyright notice appear in
  15:Caterina.c    ****   all copies and that both that the copyright notice and this
  16:Caterina.c    ****   permission notice and warranty disclaimer appear in supporting
  17:Caterina.c    ****   documentation, and that the name of the author not be used in
  18:Caterina.c    ****   advertising or publicity pertaining to distribution of the
  19:Caterina.c    ****   software without specific, written prior permission.
  20:Caterina.c    **** 
  21:Caterina.c    ****   The author disclaim all warranties with regard to this
  22:Caterina.c    ****   software, including all implied warranties of merchantability
  23:Caterina.c    ****   and fitness.  In no event shall the author be liable for any
  24:Caterina.c    ****   special, indirect or consequential damages or any damages
  25:Caterina.c    ****   whatsoever resulting from loss of use, data or profits, whether
  26:Caterina.c    ****   in an action of contract, negligence or other tortious action,
  27:Caterina.c    ****   arising out of or in connection with the use or performance of
  28:Caterina.c    ****   this software.
  29:Caterina.c    **** */
  30:Caterina.c    **** 
  31:Caterina.c    **** /*
  32:Caterina.c    **** Copyright (c) 2014 Pololu Corporation.  For more information, see
  33:Caterina.c    **** 
  34:Caterina.c    **** http://www.pololu.com/
  35:Caterina.c    **** http://forum.pololu.com/
  36:Caterina.c    **** 
  37:Caterina.c    **** Permission is hereby granted, free of charge, to any person
  38:Caterina.c    **** obtaining a copy of this software and associated documentation
  39:Caterina.c    **** files (the "Software"), to deal in the Software without
  40:Caterina.c    **** restriction, including without limitation the rights to use,
  41:Caterina.c    **** copy, modify, merge, publish, distribute, sublicense, and/or sell
  42:Caterina.c    **** copies of the Software, and to permit persons to whom the
  43:Caterina.c    **** Software is furnished to do so, subject to the following
  44:Caterina.c    **** conditions:
  45:Caterina.c    **** 
  46:Caterina.c    **** The above copyright notice and this permission notice shall be
  47:Caterina.c    **** included in all copies or substantial portions of the Software.
  48:Caterina.c    **** 
  49:Caterina.c    **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  50:Caterina.c    **** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  51:Caterina.c    **** OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  52:Caterina.c    **** NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  53:Caterina.c    **** HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  54:Caterina.c    **** WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  55:Caterina.c    **** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  56:Caterina.c    **** OTHER DEALINGS IN THE SOFTWARE.
  57:Caterina.c    **** */
  58:Caterina.c    **** 
  59:Caterina.c    **** /*
  60:Caterina.c    **** This file was modified by Pololu from the original Arduino Caterina
  61:Caterina.c    **** bootloader to support the A-Star 32U4. We made the reset line work the
  62:Caterina.c    **** same way as on SparkFun's Pro Micro: a single external reset restarts
  63:Caterina.c    **** the sketch after 750 milliseconds, while two external resets within
  64:Caterina.c    **** 750 ms start the bootloader. We also needed to optimize a few things
  65:Caterina.c    **** to allow the bootloader to still fit within 4 KB.
  66:Caterina.c    **** */
  67:Caterina.c    **** 
  68:Caterina.c    **** /** \file
  69:Caterina.c    ****  *
  70:Caterina.c    ****  *  Main source file for the CDC class bootloader. This file contains the complete bootloader logic
  71:Caterina.c    ****  */
  72:Caterina.c    **** 
  73:Caterina.c    **** #define  INCLUDE_FROM_CATERINA_C
  74:Caterina.c    **** #include "Caterina.h"
  75:Caterina.c    **** #include <util/delay.h> // for _delay_ms()
  76:Caterina.c    **** 
  77:Caterina.c    **** /** Contains the current baud rate and other settings of the first virtual serial port. This must b
  78:Caterina.c    ****  *  operating systems will not open the port unless the settings can be set successfully.
  79:Caterina.c    ****  */
  80:Caterina.c    **** static CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 0,
  81:Caterina.c    ****                                            .CharFormat  = CDC_LINEENCODING_OneStopBit,
  82:Caterina.c    ****                                            .ParityType  = CDC_PARITY_None,
  83:Caterina.c    ****                                            .DataBits    = 8                            };
  84:Caterina.c    **** 
  85:Caterina.c    **** /** Current address counter. This stores the current address of the FLASH or EEPROM as set by the h
  86:Caterina.c    ****  *  and is used when reading or writing to the AVRs memory (either FLASH or EEPROM depending on the
  87:Caterina.c    ****  *  command.)
  88:Caterina.c    ****  */
  89:Caterina.c    **** static uint32_t CurrAddress;
  90:Caterina.c    **** 
  91:Caterina.c    **** /** Flag to indicate if the bootloader should be running, or should exit and allow the application 
  92:Caterina.c    ****  *  via a watchdog reset. When cleared the bootloader will exit, starting the watchdog and entering
  93:Caterina.c    ****  *  loop until the AVR restarts and the application runs.
  94:Caterina.c    ****  */
  95:Caterina.c    **** static bool RunBootloader = true;
  96:Caterina.c    **** 
  97:Caterina.c    **** /* Pulse generation counters to keep track of the time remaining for each pulse type */
  98:Caterina.c    **** #define TX_RX_LED_PULSE_PERIOD 100
  99:Caterina.c    **** uint16_t TxLEDPulse = 0; // time remaining for Tx LED pulse
 100:Caterina.c    **** uint16_t RxLEDPulse = 0; // time remaining for Rx LED pulse
 101:Caterina.c    **** 
 102:Caterina.c    **** /* Bootloader timeout timer */
 103:Caterina.c    **** #define TIMEOUT_PERIOD	8000
 104:Caterina.c    **** uint16_t Timeout = 0;
 105:Caterina.c    **** 
 106:Caterina.c    **** static const uint16_t bootKey = 0x7777;
 107:Caterina.c    **** volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;
 108:Caterina.c    **** 
 109:Caterina.c    **** void StartSketch(void)
 110:Caterina.c    **** {
 111:Caterina.c    **** 	cli();
 112:Caterina.c    **** 	
 113:Caterina.c    **** 	/* Undo TIMER1 setup and clear the count before running the sketch */
 114:Caterina.c    **** 	TIMSK1 = 0;
 115:Caterina.c    **** 	TCCR1B = 0;
 116:Caterina.c    **** 	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 117:Caterina.c    **** 	TCNT1L = 0;
 118:Caterina.c    **** 	
 119:Caterina.c    **** 	/* Relocate the interrupt vector table to the application section */
 120:Caterina.c    **** 	MCUCR = (1 << IVCE);
 121:Caterina.c    **** 	MCUCR = 0;
 122:Caterina.c    **** 
 123:Caterina.c    **** 	L_LED_OFF();
 124:Caterina.c    **** 	TX_LED_OFF();
 125:Caterina.c    **** 	RX_LED_OFF();
 126:Caterina.c    **** 
 127:Caterina.c    **** 	/* jump to beginning of application space */
 128:Caterina.c    **** 	__asm__ volatile("jmp 0x0000");
 129:Caterina.c    **** }
 130:Caterina.c    **** 
 131:Caterina.c    **** /*	Breathing animation on L LED indicates bootloader is running */
 132:Caterina.c    **** uint16_t LLEDPulse;
 133:Caterina.c    **** void LEDPulse(void)
 134:Caterina.c    **** {
 135:Caterina.c    **** 	LLEDPulse++;
 136:Caterina.c    **** 	uint8_t p = LLEDPulse >> 8;
 137:Caterina.c    **** 	if (p > 127)
 138:Caterina.c    **** 		p = 254-p;
 139:Caterina.c    **** 	p += p;
 140:Caterina.c    **** 	if (((uint8_t)LLEDPulse) > p)
 141:Caterina.c    **** 		L_LED_OFF();
 142:Caterina.c    **** 	else
 143:Caterina.c    **** 		L_LED_ON();
 144:Caterina.c    **** }
 145:Caterina.c    **** 
 146:Caterina.c    **** /** Main program entry point. This routine configures the hardware required by the bootloader, then
 147:Caterina.c    ****  *  runs the bootloader processing routine until it times out or is instructed to exit.
 148:Caterina.c    ****  */
 149:Caterina.c    **** int main(void)
 150:Caterina.c    **** {
 151:Caterina.c    **** 	/* Save the value of the boot key memory before it is overwritten */
 152:Caterina.c    **** 	uint16_t bootKeyPtrVal = *bootKeyPtr;
 153:Caterina.c    **** 	*bootKeyPtr = 0;
 154:Caterina.c    **** 
 155:Caterina.c    **** 	/* Check the reason for the reset so we can act accordingly */
 156:Caterina.c    **** 	uint8_t  mcusr_state = MCUSR;							// store the initial state of the Status register
 157:Caterina.c    **** 	MCUSR &= ~((1 << PORF) | (1 << EXTRF) | (1 << WDRF));	// clear reset flags that are used by the bo
 158:Caterina.c    **** 
 159:Caterina.c    **** 	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
 160:Caterina.c    **** 	wdt_disable();
 161:Caterina.c    **** 	
 162:Caterina.c    **** 
 163:Caterina.c    **** 	if (pgm_read_word(0) != 0xFFFF)
 164:Caterina.c    **** 	{
 165:Caterina.c    **** 		// There is a sketch (otherwise, skip these checks and just run the bootloader).
 166:Caterina.c    **** 		
 167:Caterina.c    **** 		if (mcusr_state & (1 << PORF))
 168:Caterina.c    **** 		{
 169:Caterina.c    **** 			// After power-on reset, clear BORF so sketch can tell it wasn't a brown-out reset,
 170:Caterina.c    **** 			// then start the sketch.
 171:Caterina.c    **** 			MCUSR &= ~(1 << BORF);
 172:Caterina.c    **** 			StartSketch();
 173:Caterina.c    **** 		}
 174:Caterina.c    **** 		else if (mcusr_state & (1 << EXTRF))
 175:Caterina.c    **** 		{
 176:Caterina.c    **** 			// External reset.
 177:Caterina.c    **** 			if (bootKeyPtrVal != bootKey)
 178:Caterina.c    **** 			{
 179:Caterina.c    **** 				// First reset button press. Set boot key for 750 ms so second reset button press
 180:Caterina.c    **** 				// can be detected, then start the sketch if there isn't another reset.
 181:Caterina.c    **** 				*bootKeyPtr = bootKey;
 182:Caterina.c    **** 				_delay_ms(750);
 183:Caterina.c    **** 				*bootKeyPtr = 0;
 184:Caterina.c    **** 				StartSketch();
 185:Caterina.c    **** 			}
 186:Caterina.c    **** 			else
 187:Caterina.c    **** 			{
 188:Caterina.c    **** 				 // Second reset button press; boot key was already set. Fall through to bootloader.
 189:Caterina.c    **** 			}
 190:Caterina.c    **** 		}
 191:Caterina.c    **** 		else if ((mcusr_state & (1 << WDRF)) && (bootKeyPtrVal == bootKey))
 192:Caterina.c    **** 		{
 193:Caterina.c    **** 			// Watchdog reset triggered by sketch to start bootloader. Fall through.
 194:Caterina.c    **** 		}
 195:Caterina.c    **** 		else
 196:Caterina.c    **** 		{
 197:Caterina.c    **** 			// Reset happened for some other reason; start the sketch.
 198:Caterina.c    **** 			StartSketch();
 199:Caterina.c    **** 		}
 200:Caterina.c    **** 	}
 201:Caterina.c    **** 
 202:Caterina.c    **** 	// Clear remaining reset flags so the sketch doesn't see info about an old reset when it runs late
 203:Caterina.c    **** 	MCUSR = 0;
 204:Caterina.c    **** 	
 205:Caterina.c    **** 	/* Setup hardware required for the bootloader */
 206:Caterina.c    **** 	SetupHardware();
 207:Caterina.c    **** 
 208:Caterina.c    **** 	/* Enable global interrupts so that the USB stack can function */
 209:Caterina.c    **** 	sei();
 210:Caterina.c    **** 	
 211:Caterina.c    **** 	Timeout = 0;
 212:Caterina.c    **** 	
 213:Caterina.c    **** 	while (RunBootloader)
 214:Caterina.c    **** 	{
 215:Caterina.c    **** 		CDC_Task();
 216:Caterina.c    **** 		USB_USBTask();
 217:Caterina.c    **** 		/* Time out and start the sketch if one is present */
 218:Caterina.c    **** 		if (Timeout > TIMEOUT_PERIOD)
 219:Caterina.c    **** 			RunBootloader = false;
 220:Caterina.c    **** 
 221:Caterina.c    **** 		LEDPulse();
 222:Caterina.c    **** 	}
 223:Caterina.c    **** 
 224:Caterina.c    **** 	/* Disconnect from the host - USB interface will be reset later along with the AVR */
 225:Caterina.c    **** 	USB_Detach();
 226:Caterina.c    **** 
 227:Caterina.c    **** 	/* Jump to beginning of application space to run the sketch - do not reset */	
 228:Caterina.c    **** 	StartSketch();
 229:Caterina.c    **** }
 230:Caterina.c    **** 
 231:Caterina.c    **** /** Configures all hardware required for the bootloader. */
 232:Caterina.c    **** void SetupHardware(void)
 233:Caterina.c    **** {
 234:Caterina.c    **** 	// This was in the original Caterina, but it shouldn't be necessary because we've already
 235:Caterina.c    **** 	// cleared WDRF and disabled the watchdog timer in main().
 236:Caterina.c    **** 	/* Disable watchdog if enabled by bootloader/fuses */
 237:Caterina.c    **** 	//MCUSR &= ~(1 << WDRF);
 238:Caterina.c    **** 	//wdt_disable();
 239:Caterina.c    **** 
 240:Caterina.c    **** 	/* Disable clock division */
 241:Caterina.c    **** 	//clock_prescale_set(clock_div_1); // redundant
 242:Caterina.c    **** 	CPU_PRESCALE(0);
 243:Caterina.c    **** 	
 244:Caterina.c    **** 	/* Relocate the interrupt vector table to the bootloader section */
 245:Caterina.c    **** 	MCUCR = (1 << IVCE);
 246:Caterina.c    **** 	MCUCR = (1 << IVSEL);
 247:Caterina.c    **** 	
 248:Caterina.c    **** 	LED_SETUP();
 249:Caterina.c    **** 	L_LED_OFF();
 250:Caterina.c    **** 	TX_LED_OFF();
 251:Caterina.c    **** 	RX_LED_OFF();
 252:Caterina.c    **** 	
 253:Caterina.c    **** 	/* Initialize TIMER1 to handle bootloader timeout and LED tasks.  
 254:Caterina.c    **** 	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
 255:Caterina.c    **** 	 * Our chosen compare match generates an interrupt every 1 ms.
 256:Caterina.c    **** 	 * This interrupt is disabled selectively when doing memory reading, erasing,
 257:Caterina.c    **** 	 * or writing since SPM has tight timing requirements.
 258:Caterina.c    **** 	 */ 
 259:Caterina.c    **** 	OCR1AH = 0;
 260:Caterina.c    **** 	OCR1AL = 250;
 261:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 262:Caterina.c    **** 	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 263:Caterina.c    **** 
 264:Caterina.c    **** 	/* Initialize USB Subsystem */
 265:Caterina.c    **** 	USB_Init();
 266:Caterina.c    **** }
 267:Caterina.c    **** 
 268:Caterina.c    **** //uint16_t ctr = 0;
 269:Caterina.c    **** ISR(TIMER1_COMPA_vect, ISR_BLOCK)
 270:Caterina.c    **** {
 271:Caterina.c    **** 	/* Reset counter */
 272:Caterina.c    **** 	TCNT1H = 0;
 273:Caterina.c    **** 	TCNT1L = 0;
 274:Caterina.c    **** 
 275:Caterina.c    **** 	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
 276:Caterina.c    **** 	if (TxLEDPulse && !(--TxLEDPulse))
 277:Caterina.c    **** 		TX_LED_OFF();
 278:Caterina.c    **** 	if (RxLEDPulse && !(--RxLEDPulse))
 279:Caterina.c    **** 		RX_LED_OFF();
 280:Caterina.c    **** 	
 281:Caterina.c    **** 	if (pgm_read_word(0) != 0xFFFF)
 282:Caterina.c    **** 		Timeout++;
 283:Caterina.c    **** }
 284:Caterina.c    **** 
 285:Caterina.c    **** /** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints re
 286:Caterina.c    ****  *  to relay data to and from the attached USB host.
 287:Caterina.c    ****  */
 288:Caterina.c    **** void EVENT_USB_Device_ConfigurationChanged(void)
 289:Caterina.c    **** {
 290:Caterina.c    **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 291:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
 292:Caterina.c    **** 	                           ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
 293:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 294:Caterina.c    **** 
 295:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
 296:Caterina.c    **** 	                           ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
 297:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 298:Caterina.c    **** 
 299:Caterina.c    **** 	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
 300:Caterina.c    **** 	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
 301:Caterina.c    **** 	                           ENDPOINT_BANK_SINGLE);
 302:Caterina.c    **** }
 303:Caterina.c    **** 
 304:Caterina.c    **** /** Event handler for the USB_ControlRequest event. This is used to catch and process control reque
 305:Caterina.c    ****  *  the device from the USB host before passing along unhandled control requests to the library for
 306:Caterina.c    ****  *  internally.
 307:Caterina.c    ****  */
 308:Caterina.c    **** void EVENT_USB_Device_ControlRequest(void)
 309:Caterina.c    **** {
 310:Caterina.c    **** 	/* Ignore any requests that aren't directed to the CDC interface */
 311:Caterina.c    **** 	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 312:Caterina.c    **** 	    (REQTYPE_CLASS | REQREC_INTERFACE))
 313:Caterina.c    **** 	{
 314:Caterina.c    **** 		return;
 315:Caterina.c    **** 	}
 316:Caterina.c    **** 
 317:Caterina.c    **** 	/* Process CDC specific control requests */
 318:Caterina.c    **** 	switch (USB_ControlRequest.bRequest)
 319:Caterina.c    **** 	{
 320:Caterina.c    **** 		case CDC_REQ_GetLineEncoding:
 321:Caterina.c    **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 322:Caterina.c    **** 			{
 323:Caterina.c    **** 				Endpoint_ClearSETUP();
 324:Caterina.c    **** 
 325:Caterina.c    **** 				/* Write the line coding data to the control endpoint */
 326:Caterina.c    **** 				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 327:Caterina.c    **** 				Endpoint_ClearOUT();
 328:Caterina.c    **** 			}
 329:Caterina.c    **** 
 330:Caterina.c    **** 			break;
 331:Caterina.c    **** 		case CDC_REQ_SetLineEncoding:
 332:Caterina.c    **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 333:Caterina.c    **** 			{
 334:Caterina.c    **** 				Endpoint_ClearSETUP();
 335:Caterina.c    **** 
 336:Caterina.c    **** 				/* Read the line coding data in from the host into the global struct */
 337:Caterina.c    **** 				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 338:Caterina.c    **** 				Endpoint_ClearIN();
 339:Caterina.c    **** 			}
 340:Caterina.c    **** 
 341:Caterina.c    **** 			break;
 342:Caterina.c    **** 	}
 343:Caterina.c    **** }
 344:Caterina.c    **** 
 345:Caterina.c    **** #if !defined(NO_BLOCK_SUPPORT)
 346:Caterina.c    **** /** Reads or writes a block of EEPROM or FLASH memory to or from the appropriate CDC data endpoint,
 347:Caterina.c    ****  *  on the AVR910 protocol command issued.
 348:Caterina.c    ****  *
 349:Caterina.c    ****  *  \param[in] Command  Single character AVR910 protocol command indicating what memory operation t
 350:Caterina.c    ****  */
 351:Caterina.c    **** static void ReadWriteMemoryBlock(const uint8_t Command)
 352:Caterina.c    **** {
 353:Caterina.c    **** 	uint16_t BlockSize;
 354:Caterina.c    **** 	char     MemoryType;
 355:Caterina.c    **** 
 356:Caterina.c    **** 	bool     HighByte = false;
 357:Caterina.c    **** 	uint8_t  LowByte  = 0;
 358:Caterina.c    **** 
 359:Caterina.c    **** 	BlockSize  = (FetchNextCommandByte() << 8);
 360:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 361:Caterina.c    **** 
 362:Caterina.c    **** 	MemoryType =  FetchNextCommandByte();
 363:Caterina.c    **** 
 364:Caterina.c    **** 	if ((MemoryType != 'E') && (MemoryType != 'F'))
 365:Caterina.c    **** 	{
 366:Caterina.c    **** 		/* Send error byte back to the host */
 367:Caterina.c    **** 		WriteNextResponseByte('?');
 368:Caterina.c    **** 
 369:Caterina.c    **** 		return;
 370:Caterina.c    **** 	}
 371:Caterina.c    **** 
 372:Caterina.c    **** 	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
 373:Caterina.c    **** 	 * while doing SPM tasks */
 374:Caterina.c    **** 	TIMSK1 = 0;
 375:Caterina.c    **** 
 376:Caterina.c    **** 	/* Check if command is to read memory */
 377:Caterina.c    **** 	if (Command == 'g')
 378:Caterina.c    **** 	{		
 379:Caterina.c    **** 		/* Re-enable RWW section */
 380:Caterina.c    **** 		boot_rww_enable();
 381:Caterina.c    **** 
 382:Caterina.c    **** 		while (BlockSize--)
 383:Caterina.c    **** 		{
 384:Caterina.c    **** 			if (MemoryType == 'F')
 385:Caterina.c    **** 			{
 386:Caterina.c    **** 				/* Read the next FLASH byte from the current FLASH page */
 387:Caterina.c    **** 				#if (FLASHEND > 0xFFFF)
 388:Caterina.c    **** 				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
 389:Caterina.c    **** 				#else
 390:Caterina.c    **** 				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 391:Caterina.c    **** 				#endif
 392:Caterina.c    **** 
 393:Caterina.c    **** 				/* If both bytes in current word have been read, increment the address counter */
 394:Caterina.c    **** 				if (HighByte)
 395:Caterina.c    **** 				  CurrAddress += 2;
 396:Caterina.c    **** 
 397:Caterina.c    **** 				HighByte = !HighByte;
 398:Caterina.c    **** 			}
 399:Caterina.c    **** 			else
 400:Caterina.c    **** 			{
 401:Caterina.c    **** 				/* Read the next EEPROM byte into the endpoint */
 402:Caterina.c    **** 				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 403:Caterina.c    **** 
 404:Caterina.c    **** 				/* Increment the address counter after use */
 405:Caterina.c    **** 				CurrAddress += 2;
 406:Caterina.c    **** 			}
 407:Caterina.c    **** 		}
 408:Caterina.c    **** 	}
 409:Caterina.c    **** 	else
 410:Caterina.c    **** 	{
 411:Caterina.c    **** 		uint32_t PageStartAddress = CurrAddress;
 412:Caterina.c    **** 
 413:Caterina.c    **** 		if (MemoryType == 'F')
 414:Caterina.c    **** 		{
 415:Caterina.c    **** 			boot_page_erase(PageStartAddress);
 416:Caterina.c    **** 			boot_spm_busy_wait();
 417:Caterina.c    **** 		}
 418:Caterina.c    **** 
 419:Caterina.c    **** 		while (BlockSize--)
 420:Caterina.c    **** 		{
 421:Caterina.c    **** 			if (MemoryType == 'F')
 422:Caterina.c    **** 			{
 423:Caterina.c    **** 				/* If both bytes in current word have been written, increment the address counter */
 424:Caterina.c    **** 				if (HighByte)
 425:Caterina.c    **** 				{
 426:Caterina.c    **** 					/* Write the next FLASH word to the current FLASH page */
 427:Caterina.c    **** 					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 428:Caterina.c    **** 
 429:Caterina.c    **** 					/* Increment the address counter after use */
 430:Caterina.c    **** 					CurrAddress += 2;
 431:Caterina.c    **** 				}
 432:Caterina.c    **** 				else
 433:Caterina.c    **** 				{
 434:Caterina.c    **** 					LowByte = FetchNextCommandByte();
 435:Caterina.c    **** 				}
 436:Caterina.c    **** 				
 437:Caterina.c    **** 				HighByte = !HighByte;
 438:Caterina.c    **** 			}
 439:Caterina.c    **** 			else
 440:Caterina.c    **** 			{
 441:Caterina.c    **** 				/* Write the next EEPROM byte from the endpoint */
 442:Caterina.c    **** 				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 443:Caterina.c    **** 
 444:Caterina.c    **** 				/* Increment the address counter after use */
 445:Caterina.c    **** 				CurrAddress += 2;
 446:Caterina.c    **** 			}
 447:Caterina.c    **** 		}
 448:Caterina.c    **** 
 449:Caterina.c    **** 		/* If in FLASH programming mode, commit the page after writing */
 450:Caterina.c    **** 		if (MemoryType == 'F')
 451:Caterina.c    **** 		{
 452:Caterina.c    **** 			/* Commit the flash page to memory */
 453:Caterina.c    **** 			boot_page_write(PageStartAddress);
 454:Caterina.c    **** 
 455:Caterina.c    **** 			/* Wait until write operation has completed */
 456:Caterina.c    **** 			boot_spm_busy_wait();
 457:Caterina.c    **** 		}
 458:Caterina.c    **** 
 459:Caterina.c    **** 		/* Send response byte back to the host */
 460:Caterina.c    **** 		WriteNextResponseByte('\r');
 461:Caterina.c    **** 	}
 462:Caterina.c    **** 
 463:Caterina.c    **** 	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
 464:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);
 465:Caterina.c    **** }
 466:Caterina.c    **** #endif
 467:Caterina.c    **** 
 468:Caterina.c    **** /** Retrieves the next byte from the host in the CDC data OUT endpoint, and clears the endpoint ban
 469:Caterina.c    ****  *  to allow reception of the next data packet from the host.
 470:Caterina.c    ****  *
 471:Caterina.c    ****  *  \return Next received byte from the host in the CDC data OUT endpoint
 472:Caterina.c    ****  */
 473:Caterina.c    **** static uint8_t FetchNextCommandByte(void)
 474:Caterina.c    **** {
  15               		.loc 1 474 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.LBB80:
  23               	.LBB81:
  24               		.file 2 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  25               		.loc 2 330 0
  26 0000 84E0      		ldi r24,lo8(4)
  27 0002 8093 E900 		sts 233,r24
  28               	.L2:
  29               	.LBE81:
  30               	.LBE80:
  31               	.LBB82:
  32               	.LBB83:
 331:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  33               		.loc 2 420 0
  34 0006 8091 E800 		lds r24,232
  35               	.LBE83:
  36               	.LBE82:
 475:Caterina.c    **** 	/* Select the OUT endpoint so that the next data byte can be read */
 476:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 477:Caterina.c    **** 
 478:Caterina.c    **** 	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
 479:Caterina.c    **** 	while (!(Endpoint_IsReadWriteAllowed()))
  37               		.loc 1 479 0
  38 000a 85FD      		sbrc r24,5
  39 000c 00C0      		rjmp .L11
  40               	.LBB84:
  41               	.LBB85:
 421:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  42               		.loc 2 531 0
  43 000e 8091 E800 		lds r24,232
  44 0012 8B77      		andi r24,lo8(123)
  45 0014 8093 E800 		sts 232,r24
  46               	.L3:
  47               	.LBE85:
  48               	.LBE84:
  49               	.LBB86:
  50               	.LBB87:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  51               		.loc 2 479 0
  52 0018 8091 E800 		lds r24,232
  53               	.LBE87:
  54               	.LBE86:
 480:Caterina.c    **** 	{
 481:Caterina.c    **** 		Endpoint_ClearOUT();
 482:Caterina.c    **** 
 483:Caterina.c    **** 		while (!(Endpoint_IsOUTReceived()))
  55               		.loc 1 483 0
  56 001c 82FD      		sbrc r24,2
  57 001e 00C0      		rjmp .L2
 484:Caterina.c    **** 		{
 485:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
  58               		.loc 1 485 0
  59 0020 8EB3      		in r24,0x1e
  60 0022 8111      		cpse r24,__zero_reg__
  61 0024 00C0      		rjmp .L3
  62 0026 00C0      		rjmp .L4
  63               	.L11:
  64               	.LBB88:
  65               	.LBB89:
 532:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  66               		.loc 2 612 0
  67 0028 8091 F100 		lds r24,241
  68               	.L4:
  69               	.LBE89:
  70               	.LBE88:
 486:Caterina.c    **** 			  return 0;
 487:Caterina.c    **** 		}
 488:Caterina.c    **** 	}
 489:Caterina.c    **** 
 490:Caterina.c    **** 	/* Fetch the next byte from the OUT endpoint */
 491:Caterina.c    **** 	return Endpoint_Read_8();
 492:Caterina.c    **** }
  71               		.loc 1 492 0
  72 002c 0895      		ret
  73               		.cfi_endproc
  74               	.LFE107:
  76               		.section	.text.WriteNextResponseByte,"ax",@progbits
  78               	WriteNextResponseByte:
  79               	.LFB108:
 493:Caterina.c    **** 
 494:Caterina.c    **** /** Writes the next response byte to the CDC data IN endpoint, and sends the endpoint back if neede
 495:Caterina.c    ****  *  bank when full ready for the next byte in the packet to the host.
 496:Caterina.c    ****  *
 497:Caterina.c    ****  *  \param[in] Response  Next response byte to send to the host
 498:Caterina.c    ****  */
 499:Caterina.c    **** static void WriteNextResponseByte(const uint8_t Response)
 500:Caterina.c    **** {
  80               		.loc 1 500 0
  81               		.cfi_startproc
  82               	.LVL1:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  87               	.LBB90:
  88               	.LBB91:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
  89               		.loc 2 330 0
  90 0000 93E0      		ldi r25,lo8(3)
  91 0002 9093 E900 		sts 233,r25
  92               	.LVL2:
  93               	.LBE91:
  94               	.LBE90:
  95               	.LBB92:
  96               	.LBB93:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  97               		.loc 2 420 0
  98 0006 9091 E800 		lds r25,232
  99               	.LBE93:
 100               	.LBE92:
 501:Caterina.c    **** 	/* Select the IN endpoint so that the next data byte can be written */
 502:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 503:Caterina.c    **** 
 504:Caterina.c    **** 	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
 505:Caterina.c    **** 	if (!(Endpoint_IsReadWriteAllowed()))
 101               		.loc 1 505 0
 102 000a 95FF      		sbrs r25,5
 103 000c 00C0      		rjmp .L13
 104               	.L17:
 105               	.LVL3:
 106               	.LBB94:
 107               	.LBB95:
 613:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 108               		.loc 2 624 0
 109 000e 8093 F100 		sts 241,r24
 110               	.LVL4:
 111               	.LBE95:
 112               	.LBE94:
 506:Caterina.c    **** 	{
 507:Caterina.c    **** 		Endpoint_ClearIN();
 508:Caterina.c    **** 
 509:Caterina.c    **** 		while (!(Endpoint_IsINReady()))
 510:Caterina.c    **** 		{
 511:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 512:Caterina.c    **** 			  return;
 513:Caterina.c    **** 		}
 514:Caterina.c    **** 	}
 515:Caterina.c    **** 
 516:Caterina.c    **** 	/* Write the next byte to the IN endpoint */
 517:Caterina.c    **** 	Endpoint_Write_8(Response);
 518:Caterina.c    **** 	
 519:Caterina.c    **** 	TX_LED_ON();
 113               		.loc 1 519 0
 114 0012 5D98      		cbi 0xb,5
 520:Caterina.c    **** 	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 115               		.loc 1 520 0
 116 0014 84E6      		ldi r24,lo8(100)
 117 0016 90E0      		ldi r25,0
 118               	.LVL5:
 119 0018 9093 0000 		sts TxLEDPulse+1,r25
 120 001c 8093 0000 		sts TxLEDPulse,r24
 121               	.LVL6:
 122 0020 0895      		ret
 123               	.LVL7:
 124               	.L13:
 125               	.LBB96:
 126               	.LBB97:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 127               		.loc 2 516 0
 128 0022 9091 E800 		lds r25,232
 129 0026 9E77      		andi r25,lo8(126)
 130 0028 9093 E800 		sts 232,r25
 131               	.L15:
 132               	.LBE97:
 133               	.LBE96:
 134               	.LBB98:
 135               	.LBB99:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 136               		.loc 2 467 0
 137 002c 9091 E800 		lds r25,232
 138               	.LBE99:
 139               	.LBE98:
 509:Caterina.c    **** 		{
 140               		.loc 1 509 0
 141 0030 90FD      		sbrc r25,0
 142 0032 00C0      		rjmp .L17
 511:Caterina.c    **** 			  return;
 143               		.loc 1 511 0
 144 0034 9EB3      		in r25,0x1e
 145 0036 9111      		cpse r25,__zero_reg__
 146 0038 00C0      		rjmp .L15
 147 003a 0895      		ret
 148               		.cfi_endproc
 149               	.LFE108:
 151               		.section	.text.StartSketch,"ax",@progbits
 152               	.global	StartSketch
 154               	StartSketch:
 155               	.LFB99:
 110:Caterina.c    **** 	cli();
 156               		.loc 1 110 0
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 111:Caterina.c    **** 	
 162               		.loc 1 111 0
 163               	/* #APP */
 164               	 ;  111 "Caterina.c" 1
 165 0000 F894      		cli
 166               	 ;  0 "" 2
 114:Caterina.c    **** 	TCCR1B = 0;
 167               		.loc 1 114 0
 168               	/* #NOAPP */
 169 0002 1092 6F00 		sts 111,__zero_reg__
 115:Caterina.c    **** 	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 170               		.loc 1 115 0
 171 0006 1092 8100 		sts 129,__zero_reg__
 116:Caterina.c    **** 	TCNT1L = 0;
 172               		.loc 1 116 0
 173 000a 1092 8500 		sts 133,__zero_reg__
 117:Caterina.c    **** 	
 174               		.loc 1 117 0
 175 000e 1092 8400 		sts 132,__zero_reg__
 120:Caterina.c    **** 	MCUCR = 0;
 176               		.loc 1 120 0
 177 0012 81E0      		ldi r24,lo8(1)
 178 0014 85BF      		out 0x35,r24
 121:Caterina.c    **** 
 179               		.loc 1 121 0
 180 0016 15BE      		out 0x35,__zero_reg__
 123:Caterina.c    **** 	TX_LED_OFF();
 181               		.loc 1 123 0
 182 0018 4798      		cbi 0x8,7
 124:Caterina.c    **** 	RX_LED_OFF();
 183               		.loc 1 124 0
 184 001a 5D9A      		sbi 0xb,5
 125:Caterina.c    **** 
 185               		.loc 1 125 0
 186 001c 289A      		sbi 0x5,0
 128:Caterina.c    **** }
 187               		.loc 1 128 0
 188               	/* #APP */
 189               	 ;  128 "Caterina.c" 1
 190 001e 0C94 0000 		jmp 0x0000
 191               	 ;  0 "" 2
 192               	/* #NOAPP */
 193 0022 0895      		ret
 194               		.cfi_endproc
 195               	.LFE99:
 197               		.section	.text.LEDPulse,"ax",@progbits
 198               	.global	LEDPulse
 200               	LEDPulse:
 201               	.LFB100:
 134:Caterina.c    **** 	LLEDPulse++;
 202               		.loc 1 134 0
 203               		.cfi_startproc
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 135:Caterina.c    **** 	uint8_t p = LLEDPulse >> 8;
 208               		.loc 1 135 0
 209 0000 2091 0000 		lds r18,LLEDPulse
 210 0004 3091 0000 		lds r19,LLEDPulse+1
 211 0008 2F5F      		subi r18,-1
 212 000a 3F4F      		sbci r19,-1
 213 000c 3093 0000 		sts LLEDPulse+1,r19
 214 0010 2093 0000 		sts LLEDPulse,r18
 136:Caterina.c    **** 	if (p > 127)
 215               		.loc 1 136 0
 216 0014 832F      		mov r24,r19
 217               	.LVL8:
 137:Caterina.c    **** 		p = 254-p;
 218               		.loc 1 137 0
 219 0016 37FF      		sbrs r19,7
 220 0018 00C0      		rjmp .L23
 138:Caterina.c    **** 	p += p;
 221               		.loc 1 138 0
 222 001a 8EEF      		ldi r24,lo8(-2)
 223 001c 831B      		sub r24,r19
 224               	.LVL9:
 225               	.L23:
 140:Caterina.c    **** 		L_LED_OFF();
 226               		.loc 1 140 0
 227 001e 3327      		clr r19
 228 0020 880F      		lsl r24
 229               	.LVL10:
 230 0022 90E0      		ldi r25,0
 231 0024 8217      		cp r24,r18
 232 0026 9307      		cpc r25,r19
 233 0028 04F4      		brge .L24
 141:Caterina.c    **** 	else
 234               		.loc 1 141 0
 235 002a 4798      		cbi 0x8,7
 236 002c 0895      		ret
 237               	.L24:
 143:Caterina.c    **** }
 238               		.loc 1 143 0
 239 002e 479A      		sbi 0x8,7
 240 0030 0895      		ret
 241               		.cfi_endproc
 242               	.LFE100:
 244               		.section	.text.SetupHardware,"ax",@progbits
 245               	.global	SetupHardware
 247               	SetupHardware:
 248               	.LFB102:
 233:Caterina.c    **** 	// This was in the original Caterina, but it shouldn't be necessary because we've already
 249               		.loc 1 233 0
 250               		.cfi_startproc
 251               	/* prologue: function */
 252               	/* frame size = 0 */
 253               	/* stack size = 0 */
 254               	.L__stack_usage = 0
 242:Caterina.c    **** 	
 255               		.loc 1 242 0
 256 0000 E1E6      		ldi r30,lo8(97)
 257 0002 F0E0      		ldi r31,0
 258 0004 80E8      		ldi r24,lo8(-128)
 259 0006 8083      		st Z,r24
 260 0008 1082      		st Z,__zero_reg__
 245:Caterina.c    **** 	MCUCR = (1 << IVSEL);
 261               		.loc 1 245 0
 262 000a 81E0      		ldi r24,lo8(1)
 263 000c 85BF      		out 0x35,r24
 246:Caterina.c    **** 	
 264               		.loc 1 246 0
 265 000e 82E0      		ldi r24,lo8(2)
 266 0010 85BF      		out 0x35,r24
 248:Caterina.c    **** 	L_LED_OFF();
 267               		.loc 1 248 0
 268 0012 3F9A      		sbi 0x7,7
 269 0014 209A      		sbi 0x4,0
 270 0016 559A      		sbi 0xa,5
 249:Caterina.c    **** 	TX_LED_OFF();
 271               		.loc 1 249 0
 272 0018 4798      		cbi 0x8,7
 250:Caterina.c    **** 	RX_LED_OFF();
 273               		.loc 1 250 0
 274 001a 5D9A      		sbi 0xb,5
 251:Caterina.c    **** 	
 275               		.loc 1 251 0
 276 001c 289A      		sbi 0x5,0
 259:Caterina.c    **** 	OCR1AL = 250;
 277               		.loc 1 259 0
 278 001e 1092 8900 		sts 137,__zero_reg__
 260:Caterina.c    **** 	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 279               		.loc 1 260 0
 280 0022 9AEF      		ldi r25,lo8(-6)
 281 0024 9093 8800 		sts 136,r25
 261:Caterina.c    **** 	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 282               		.loc 1 261 0
 283 0028 8093 6F00 		sts 111,r24
 262:Caterina.c    **** 
 284               		.loc 1 262 0
 285 002c 83E0      		ldi r24,lo8(3)
 286 002e 8093 8100 		sts 129,r24
 265:Caterina.c    **** }
 287               		.loc 1 265 0
 288 0032 0C94 0000 		jmp USB_Init
 289               	.LVL11:
 290               		.cfi_endproc
 291               	.LFE102:
 293               		.section	.text.__vector_17,"ax",@progbits
 294               	.global	__vector_17
 296               	__vector_17:
 297               	.LFB103:
 270:Caterina.c    **** 	/* Reset counter */
 298               		.loc 1 270 0
 299               		.cfi_startproc
 300 0000 1F92      		push r1
 301               	.LCFI0:
 302               		.cfi_def_cfa_offset 3
 303               		.cfi_offset 1, -2
 304 0002 0F92      		push r0
 305               	.LCFI1:
 306               		.cfi_def_cfa_offset 4
 307               		.cfi_offset 0, -3
 308 0004 0FB6      		in r0,__SREG__
 309 0006 0F92      		push r0
 310 0008 1124      		clr __zero_reg__
 311 000a 2F93      		push r18
 312               	.LCFI2:
 313               		.cfi_def_cfa_offset 5
 314               		.cfi_offset 18, -4
 315 000c 8F93      		push r24
 316               	.LCFI3:
 317               		.cfi_def_cfa_offset 6
 318               		.cfi_offset 24, -5
 319 000e 9F93      		push r25
 320               	.LCFI4:
 321               		.cfi_def_cfa_offset 7
 322               		.cfi_offset 25, -6
 323 0010 EF93      		push r30
 324               	.LCFI5:
 325               		.cfi_def_cfa_offset 8
 326               		.cfi_offset 30, -7
 327 0012 FF93      		push r31
 328               	.LCFI6:
 329               		.cfi_def_cfa_offset 9
 330               		.cfi_offset 31, -8
 331               	/* prologue: Signal */
 332               	/* frame size = 0 */
 333               	/* stack size = 8 */
 334               	.L__stack_usage = 8
 272:Caterina.c    **** 	TCNT1L = 0;
 335               		.loc 1 272 0
 336 0014 1092 8500 		sts 133,__zero_reg__
 273:Caterina.c    **** 
 337               		.loc 1 273 0
 338 0018 1092 8400 		sts 132,__zero_reg__
 276:Caterina.c    **** 		TX_LED_OFF();
 339               		.loc 1 276 0
 340 001c 8091 0000 		lds r24,TxLEDPulse
 341 0020 9091 0000 		lds r25,TxLEDPulse+1
 342 0024 0097      		sbiw r24,0
 343 0026 01F0      		breq .L29
 276:Caterina.c    **** 		TX_LED_OFF();
 344               		.loc 1 276 0 is_stmt 0 discriminator 1
 345 0028 0197      		sbiw r24,1
 346 002a 9093 0000 		sts TxLEDPulse+1,r25
 347 002e 8093 0000 		sts TxLEDPulse,r24
 348 0032 892B      		or r24,r25
 349 0034 01F4      		brne .L29
 277:Caterina.c    **** 	if (RxLEDPulse && !(--RxLEDPulse))
 350               		.loc 1 277 0 is_stmt 1
 351 0036 5D9A      		sbi 0xb,5
 352               	.L29:
 278:Caterina.c    **** 		RX_LED_OFF();
 353               		.loc 1 278 0
 354 0038 8091 0000 		lds r24,RxLEDPulse
 355 003c 9091 0000 		lds r25,RxLEDPulse+1
 356 0040 0097      		sbiw r24,0
 357 0042 01F0      		breq .L32
 278:Caterina.c    **** 		RX_LED_OFF();
 358               		.loc 1 278 0 is_stmt 0 discriminator 1
 359 0044 0197      		sbiw r24,1
 360 0046 9093 0000 		sts RxLEDPulse+1,r25
 361 004a 8093 0000 		sts RxLEDPulse,r24
 362 004e 892B      		or r24,r25
 363 0050 01F4      		brne .L32
 279:Caterina.c    **** 	
 364               		.loc 1 279 0 is_stmt 1
 365 0052 289A      		sbi 0x5,0
 366               	.L32:
 367               	.LVL12:
 368               	.LBB100:
 281:Caterina.c    **** 		Timeout++;
 369               		.loc 1 281 0
 370 0054 E0E0      		ldi r30,0
 371 0056 F0E0      		ldi r31,0
 372               	/* #APP */
 373               	 ;  281 "Caterina.c" 1
 374 0058 8591      		lpm r24, Z+
 375 005a 9491      		lpm r25, Z
 376               		
 377               	 ;  0 "" 2
 378               	.LVL13:
 379               	/* #NOAPP */
 380               	.LBE100:
 381 005c 0196      		adiw r24,1
 382 005e 01F0      		breq .L27
 282:Caterina.c    **** }
 383               		.loc 1 282 0
 384 0060 8091 0000 		lds r24,Timeout
 385 0064 9091 0000 		lds r25,Timeout+1
 386               	.LVL14:
 387 0068 0196      		adiw r24,1
 388 006a 9093 0000 		sts Timeout+1,r25
 389 006e 8093 0000 		sts Timeout,r24
 390               	.L27:
 391               	/* epilogue start */
 283:Caterina.c    **** 
 392               		.loc 1 283 0
 393 0072 FF91      		pop r31
 394 0074 EF91      		pop r30
 395 0076 9F91      		pop r25
 396 0078 8F91      		pop r24
 397 007a 2F91      		pop r18
 398 007c 0F90      		pop r0
 399 007e 0FBE      		out __SREG__,r0
 400 0080 0F90      		pop r0
 401 0082 1F90      		pop r1
 402 0084 1895      		reti
 403               		.cfi_endproc
 404               	.LFE103:
 406               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 407               	.global	EVENT_USB_Device_ConfigurationChanged
 409               	EVENT_USB_Device_ConfigurationChanged:
 410               	.LFB104:
 289:Caterina.c    **** 	/* Setup CDC Notification, Rx and Tx Endpoints */
 411               		.loc 1 289 0
 412               		.cfi_startproc
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 0 */
 416               	.L__stack_usage = 0
 417               	.LVL15:
 418               	.LBB101:
 419               	.LBB102:
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 420               		.loc 2 276 0
 421 0000 42E0      		ldi r20,lo8(2)
 422 0002 61EC      		ldi r22,lo8(-63)
 423 0004 82E0      		ldi r24,lo8(2)
 424 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 425               	.LVL16:
 426               	.LBE102:
 427               	.LBE101:
 428               	.LBB103:
 429               	.LBB104:
 430 000a 42E1      		ldi r20,lo8(18)
 431 000c 61E8      		ldi r22,lo8(-127)
 432 000e 83E0      		ldi r24,lo8(3)
 433 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 434               	.LVL17:
 435               	.LBE104:
 436               	.LBE103:
 437               	.LBB105:
 438               	.LBB106:
 439 0014 42E1      		ldi r20,lo8(18)
 440 0016 60E8      		ldi r22,lo8(-128)
 441 0018 84E0      		ldi r24,lo8(4)
 442 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 443               	.LVL18:
 444               	.LBE106:
 445               	.LBE105:
 446               		.cfi_endproc
 447               	.LFE104:
 449               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 450               	.global	EVENT_USB_Device_ControlRequest
 452               	EVENT_USB_Device_ControlRequest:
 453               	.LFB105:
 309:Caterina.c    **** 	/* Ignore any requests that aren't directed to the CDC interface */
 454               		.loc 1 309 0
 455               		.cfi_startproc
 456               	/* prologue: function */
 457               	/* frame size = 0 */
 458               	/* stack size = 0 */
 459               	.L__stack_usage = 0
 311:Caterina.c    **** 	    (REQTYPE_CLASS | REQREC_INTERFACE))
 460               		.loc 1 311 0
 461 0000 8091 0000 		lds r24,USB_ControlRequest
 462 0004 982F      		mov r25,r24
 463 0006 9F77      		andi r25,lo8(127)
 464 0008 9132      		cpi r25,lo8(33)
 465 000a 01F4      		brne .L39
 318:Caterina.c    **** 	{
 466               		.loc 1 318 0
 467 000c 9091 0000 		lds r25,USB_ControlRequest+1
 468 0010 9032      		cpi r25,lo8(32)
 469 0012 01F0      		breq .L41
 470 0014 9132      		cpi r25,lo8(33)
 471 0016 01F4      		brne .L39
 321:Caterina.c    **** 			{
 472               		.loc 1 321 0
 473 0018 813A      		cpi r24,lo8(-95)
 474 001a 01F4      		brne .L39
 475               	.LBB107:
 476               	.LBB108:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 477               		.loc 2 504 0
 478 001c 8091 E800 		lds r24,232
 479 0020 877F      		andi r24,lo8(-9)
 480 0022 8093 E800 		sts 232,r24
 481               	.LBE108:
 482               	.LBE107:
 326:Caterina.c    **** 				Endpoint_ClearOUT();
 483               		.loc 1 326 0
 484 0026 67E0      		ldi r22,lo8(7)
 485 0028 70E0      		ldi r23,0
 486 002a 80E0      		ldi r24,lo8(LineEncoding)
 487 002c 90E0      		ldi r25,hi8(LineEncoding)
 488 002e 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 489               	.LVL19:
 490               	.LBB109:
 491               	.LBB110:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 492               		.loc 2 531 0
 493 0032 8091 E800 		lds r24,232
 494 0036 8B77      		andi r24,lo8(123)
 495 0038 00C0      		rjmp .L43
 496               	.L41:
 497               	.LBE110:
 498               	.LBE109:
 332:Caterina.c    **** 			{
 499               		.loc 1 332 0
 500 003a 8132      		cpi r24,lo8(33)
 501 003c 01F4      		brne .L39
 502               	.LBB111:
 503               	.LBB112:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 504               		.loc 2 504 0
 505 003e 8091 E800 		lds r24,232
 506 0042 877F      		andi r24,lo8(-9)
 507 0044 8093 E800 		sts 232,r24
 508               	.LBE112:
 509               	.LBE111:
 337:Caterina.c    **** 				Endpoint_ClearIN();
 510               		.loc 1 337 0
 511 0048 67E0      		ldi r22,lo8(7)
 512 004a 70E0      		ldi r23,0
 513 004c 80E0      		ldi r24,lo8(LineEncoding)
 514 004e 90E0      		ldi r25,hi8(LineEncoding)
 515 0050 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 516               	.LVL20:
 517               	.LBB113:
 518               	.LBB114:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 519               		.loc 2 516 0
 520 0054 8091 E800 		lds r24,232
 521 0058 8E77      		andi r24,lo8(126)
 522               	.L43:
 523 005a 8093 E800 		sts 232,r24
 524               	.L39:
 525 005e 0895      		ret
 526               	.LBE114:
 527               	.LBE113:
 528               		.cfi_endproc
 529               	.LFE105:
 531               		.section	.rodata.str1.1,"aMS",@progbits,1
 532               	.LC0:
 533 0000 4341 5445 		.string	"CATERINA"
 533      5249 4E41 
 533      00
 534               		.section	.text.CDC_Task,"ax",@progbits
 535               	.global	CDC_Task
 537               	CDC_Task:
 538               	.LFB109:
 521:Caterina.c    **** }
 522:Caterina.c    **** 
 523:Caterina.c    **** #define STK_OK              0x10
 524:Caterina.c    **** #define STK_INSYNC          0x14  // ' '
 525:Caterina.c    **** #define CRC_EOP             0x20  // 'SPACE'
 526:Caterina.c    **** #define STK_GET_SYNC        0x30  // '0'
 527:Caterina.c    **** 
 528:Caterina.c    **** #define STK_GET_PARAMETER   0x41  // 'A'
 529:Caterina.c    **** #define STK_SET_DEVICE      0x42  // 'B'
 530:Caterina.c    **** #define STK_SET_DEVICE_EXT  0x45  // 'E'
 531:Caterina.c    **** #define STK_LOAD_ADDRESS    0x55  // 'U'
 532:Caterina.c    **** #define STK_UNIVERSAL       0x56  // 'V'
 533:Caterina.c    **** #define STK_PROG_PAGE       0x64  // 'd'
 534:Caterina.c    **** #define STK_READ_PAGE       0x74  // 't'
 535:Caterina.c    **** #define STK_READ_SIGN       0x75  // 'u'
 536:Caterina.c    **** 
 537:Caterina.c    **** /** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the requi
 538:Caterina.c    ****  *  and send the appropriate response back to the host.
 539:Caterina.c    ****  */
 540:Caterina.c    **** void CDC_Task(void)
 541:Caterina.c    **** {
 539               		.loc 1 541 0
 540               		.cfi_startproc
 541 0000 4F92      		push r4
 542               	.LCFI7:
 543               		.cfi_def_cfa_offset 3
 544               		.cfi_offset 4, -2
 545 0002 5F92      		push r5
 546               	.LCFI8:
 547               		.cfi_def_cfa_offset 4
 548               		.cfi_offset 5, -3
 549 0004 6F92      		push r6
 550               	.LCFI9:
 551               		.cfi_def_cfa_offset 5
 552               		.cfi_offset 6, -4
 553 0006 7F92      		push r7
 554               	.LCFI10:
 555               		.cfi_def_cfa_offset 6
 556               		.cfi_offset 7, -5
 557 0008 8F92      		push r8
 558               	.LCFI11:
 559               		.cfi_def_cfa_offset 7
 560               		.cfi_offset 8, -6
 561 000a 9F92      		push r9
 562               	.LCFI12:
 563               		.cfi_def_cfa_offset 8
 564               		.cfi_offset 9, -7
 565 000c AF92      		push r10
 566               	.LCFI13:
 567               		.cfi_def_cfa_offset 9
 568               		.cfi_offset 10, -8
 569 000e BF92      		push r11
 570               	.LCFI14:
 571               		.cfi_def_cfa_offset 10
 572               		.cfi_offset 11, -9
 573 0010 CF92      		push r12
 574               	.LCFI15:
 575               		.cfi_def_cfa_offset 11
 576               		.cfi_offset 12, -10
 577 0012 DF92      		push r13
 578               	.LCFI16:
 579               		.cfi_def_cfa_offset 12
 580               		.cfi_offset 13, -11
 581 0014 EF92      		push r14
 582               	.LCFI17:
 583               		.cfi_def_cfa_offset 13
 584               		.cfi_offset 14, -12
 585 0016 FF92      		push r15
 586               	.LCFI18:
 587               		.cfi_def_cfa_offset 14
 588               		.cfi_offset 15, -13
 589 0018 0F93      		push r16
 590               	.LCFI19:
 591               		.cfi_def_cfa_offset 15
 592               		.cfi_offset 16, -14
 593 001a 1F93      		push r17
 594               	.LCFI20:
 595               		.cfi_def_cfa_offset 16
 596               		.cfi_offset 17, -15
 597 001c CF93      		push r28
 598               	.LCFI21:
 599               		.cfi_def_cfa_offset 17
 600               		.cfi_offset 28, -16
 601 001e DF93      		push r29
 602               	.LCFI22:
 603               		.cfi_def_cfa_offset 18
 604               		.cfi_offset 29, -17
 605               	/* prologue: function */
 606               	/* frame size = 0 */
 607               	/* stack size = 16 */
 608               	.L__stack_usage = 16
 609               	.LVL21:
 610               	.LBB147:
 611               	.LBB148:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 612               		.loc 2 330 0
 613 0020 84E0      		ldi r24,lo8(4)
 614 0022 8093 E900 		sts 233,r24
 615               	.LVL22:
 616               	.LBE148:
 617               	.LBE147:
 618               	.LBB149:
 619               	.LBB150:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 620               		.loc 2 479 0
 621 0026 8091 E800 		lds r24,232
 622               	.LBE150:
 623               	.LBE149:
 542:Caterina.c    **** 	/* Select the OUT endpoint */
 543:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 544:Caterina.c    **** 
 545:Caterina.c    **** 	/* Check if endpoint has a command in it sent from the host */
 546:Caterina.c    **** 	if (!(Endpoint_IsOUTReceived()))
 624               		.loc 1 546 0
 625 002a 82FF      		sbrs r24,2
 626 002c 00C0      		rjmp .L44
 547:Caterina.c    **** 	  return;
 548:Caterina.c    **** 	  
 549:Caterina.c    **** 	RX_LED_ON();
 627               		.loc 1 549 0
 628 002e 2898      		cbi 0x5,0
 550:Caterina.c    **** 	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 629               		.loc 1 550 0
 630 0030 84E6      		ldi r24,lo8(100)
 631 0032 90E0      		ldi r25,0
 632 0034 9093 0000 		sts RxLEDPulse+1,r25
 633 0038 8093 0000 		sts RxLEDPulse,r24
 551:Caterina.c    **** 
 552:Caterina.c    **** 	/* Read in the bootloader command (first byte sent from host) */
 553:Caterina.c    **** 	uint8_t Command = FetchNextCommandByte();
 634               		.loc 1 553 0
 635 003c 0E94 0000 		call FetchNextCommandByte
 636               	.LVL23:
 637 0040 C82F      		mov r28,r24
 638               	.LVL24:
 554:Caterina.c    **** 
 555:Caterina.c    **** 	if (Command == 'E')
 639               		.loc 1 555 0
 640 0042 8534      		cpi r24,lo8(69)
 641 0044 01F4      		brne .L47
 556:Caterina.c    **** 	{
 557:Caterina.c    **** 		/* We nearly run out the bootloader timeout clock, 
 558:Caterina.c    **** 		* leaving just a few hundred milliseconds so the 
 559:Caterina.c    **** 		* bootloder has time to respond and service any 
 560:Caterina.c    **** 		* subsequent requests */
 561:Caterina.c    **** 		Timeout = TIMEOUT_PERIOD - 500;
 642               		.loc 1 561 0
 643 0046 8CE4      		ldi r24,lo8(76)
 644 0048 9DE1      		ldi r25,lo8(29)
 645               	.LVL25:
 646 004a 9093 0000 		sts Timeout+1,r25
 647 004e 8093 0000 		sts Timeout,r24
 648               	.L48:
 562:Caterina.c    **** 	
 563:Caterina.c    **** 		/* Re-enable RWW section - must be done here in case 
 564:Caterina.c    **** 		 * user has disabled verification on upload.  */
 565:Caterina.c    **** 		boot_rww_enable_safe();		
 649               		.loc 1 565 0 discriminator 1
 650 0052 07B6      		in __tmp_reg__,0x37
 651 0054 00FC      		sbrc __tmp_reg__,0
 652 0056 00C0      		rjmp .L48
 653               	.L49:
 654               		.loc 1 565 0 is_stmt 0 discriminator 3
 655 0058 F999      		sbic 0x1f,1
 656 005a 00C0      		rjmp .L49
 657               		.loc 1 565 0 discriminator 4
 658 005c 81E1      		ldi r24,lo8(17)
 659               	/* #APP */
 660               	 ;  565 "Caterina.c" 1
 661 005e 8093 5700 		sts 87, r24
 662 0062 E895      		spm
 663               		
 664               	 ;  0 "" 2
 665               	/* #NOAPP */
 666 0064 00C0      		rjmp .L133
 667               	.LVL26:
 668               	.L47:
 566:Caterina.c    **** 
 567:Caterina.c    **** 		// Send confirmation byte back to the host 
 568:Caterina.c    **** 		WriteNextResponseByte('\r');
 569:Caterina.c    **** 	}
 570:Caterina.c    **** 	else if (Command == 'T')
 669               		.loc 1 570 0 is_stmt 1
 670 0066 8435      		cpi r24,lo8(84)
 671 0068 01F4      		brne .L51
 571:Caterina.c    **** 	{
 572:Caterina.c    **** 		FetchNextCommandByte();
 672               		.loc 1 572 0
 673 006a 0E94 0000 		call FetchNextCommandByte
 674               	.LVL27:
 675               	.L133:
 573:Caterina.c    **** 
 574:Caterina.c    **** 		// Send confirmation byte back to the host 
 575:Caterina.c    **** 		WriteNextResponseByte('\r');
 676               		.loc 1 575 0
 677 006e 8DE0      		ldi r24,lo8(13)
 678               	.L134:
 679 0070 0E94 0000 		call WriteNextResponseByte
 680               	.LVL28:
 681 0074 00C0      		rjmp .L50
 682               	.LVL29:
 683               	.L51:
 576:Caterina.c    **** 	}
 577:Caterina.c    **** 	else if ((Command == 'L') || (Command == 'P'))
 684               		.loc 1 577 0
 685 0076 8C34      		cpi r24,lo8(76)
 686 0078 01F0      		breq .L133
 687               		.loc 1 577 0 is_stmt 0 discriminator 1
 688 007a 8035      		cpi r24,lo8(80)
 689 007c 01F0      		breq .L133
 578:Caterina.c    **** 	{
 579:Caterina.c    **** 		// Send confirmation byte back to the host 
 580:Caterina.c    **** 		WriteNextResponseByte('\r');
 581:Caterina.c    **** 	}
 582:Caterina.c    **** 	else if (Command == 't')
 690               		.loc 1 582 0 is_stmt 1
 691 007e 8437      		cpi r24,lo8(116)
 692 0080 01F4      		brne .L54
 583:Caterina.c    **** 	{
 584:Caterina.c    **** 		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
 585:Caterina.c    **** 		WriteNextResponseByte(0x44);
 693               		.loc 1 585 0
 694 0082 84E4      		ldi r24,lo8(68)
 695               	.LVL30:
 696 0084 0E94 0000 		call WriteNextResponseByte
 697               	.LVL31:
 586:Caterina.c    **** 		WriteNextResponseByte(0x00);
 698               		.loc 1 586 0
 699 0088 80E0      		ldi r24,0
 700 008a 00C0      		rjmp .L134
 701               	.LVL32:
 702               	.L54:
 587:Caterina.c    **** 	}
 588:Caterina.c    **** 	else if (Command == 'a')
 703               		.loc 1 588 0
 704 008c 8136      		cpi r24,lo8(97)
 705 008e 01F4      		brne .L55
 589:Caterina.c    **** 	{
 590:Caterina.c    **** 		// Indicate auto-address increment is supported 
 591:Caterina.c    **** 		WriteNextResponseByte('Y');
 706               		.loc 1 591 0
 707 0090 89E5      		ldi r24,lo8(89)
 708               	.LVL33:
 709 0092 00C0      		rjmp .L134
 710               	.LVL34:
 711               	.L55:
 592:Caterina.c    **** 	}
 593:Caterina.c    **** 	else if (Command == 'A')
 712               		.loc 1 593 0
 713 0094 8134      		cpi r24,lo8(65)
 714 0096 01F4      		brne .L56
 594:Caterina.c    **** 	{
 595:Caterina.c    **** 		// Set the current address to that given by the host 
 596:Caterina.c    **** 		CurrAddress   = (FetchNextCommandByte() << 9);
 715               		.loc 1 596 0
 716 0098 0E94 0000 		call FetchNextCommandByte
 717               	.LVL35:
 718 009c C82F      		mov r28,r24
 719               	.LVL36:
 597:Caterina.c    **** 		CurrAddress  |= (FetchNextCommandByte() << 1);
 720               		.loc 1 597 0
 721 009e 0E94 0000 		call FetchNextCommandByte
 722               	.LVL37:
 723 00a2 2C2F      		mov r18,r28
 724 00a4 30E0      		ldi r19,0
 725 00a6 322F      		mov r19,r18
 726 00a8 2227      		clr r18
 727 00aa 330F      		lsl r19
 728 00ac 90E0      		ldi r25,0
 729 00ae 880F      		lsl r24
 730 00b0 991F      		rol r25
 731 00b2 822B      		or r24,r18
 732 00b4 932B      		or r25,r19
 733 00b6 092E      		mov __tmp_reg__,r25
 734 00b8 000C      		lsl r0
 735 00ba AA0B      		sbc r26,r26
 736 00bc BB0B      		sbc r27,r27
 737 00be 00C0      		rjmp .L135
 738               	.LVL38:
 739               	.L56:
 598:Caterina.c    **** 
 599:Caterina.c    **** 		// Send confirmation byte back to the host 
 600:Caterina.c    **** 		WriteNextResponseByte('\r');
 601:Caterina.c    **** 	}
 602:Caterina.c    **** 	else if (Command == 'p')
 740               		.loc 1 602 0
 741 00c0 8037      		cpi r24,lo8(112)
 742 00c2 01F4      		brne .L57
 603:Caterina.c    **** 	{
 604:Caterina.c    **** 		// Indicate serial programmer back to the host 
 605:Caterina.c    **** 		WriteNextResponseByte('S');
 743               		.loc 1 605 0
 744 00c4 83E5      		ldi r24,lo8(83)
 745               	.LVL39:
 746 00c6 00C0      		rjmp .L134
 747               	.LVL40:
 748               	.L57:
 606:Caterina.c    **** 	}
 607:Caterina.c    **** 	else if (Command == 'S')
 749               		.loc 1 607 0
 750 00c8 8335      		cpi r24,lo8(83)
 751 00ca 01F4      		brne .L58
 752 00cc C0E0      		ldi r28,lo8(.LC0)
 753 00ce D0E0      		ldi r29,hi8(.LC0)
 754               	.LVL41:
 755               	.L59:
 756               	.LBB151:
 608:Caterina.c    **** 	{
 609:Caterina.c    **** 		// Write the 7-byte software identifier to the endpoint 
 610:Caterina.c    **** 		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 611:Caterina.c    **** 		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 757               		.loc 1 611 0 discriminator 3
 758 00d0 8991      		ld r24,Y+
 759               	.LVL42:
 760 00d2 0E94 0000 		call WriteNextResponseByte
 761               	.LVL43:
 610:Caterina.c    **** 		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 762               		.loc 1 610 0 discriminator 3
 763 00d6 20E0      		ldi r18,hi8(.LC0+7)
 764 00d8 C030      		cpi r28,lo8(.LC0+7)
 765 00da D207      		cpc r29,r18
 766 00dc 01F4      		brne .L59
 767 00de 00C0      		rjmp .L50
 768               	.LVL44:
 769               	.L58:
 770               	.LBE151:
 612:Caterina.c    **** 	}
 613:Caterina.c    **** 	else if (Command == 'V')
 771               		.loc 1 613 0
 772 00e0 8635      		cpi r24,lo8(86)
 773 00e2 01F4      		brne .L60
 614:Caterina.c    **** 	{
 615:Caterina.c    **** 		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
 774               		.loc 1 615 0
 775 00e4 81E3      		ldi r24,lo8(49)
 776               	.LVL45:
 777 00e6 0E94 0000 		call WriteNextResponseByte
 778               	.LVL46:
 616:Caterina.c    **** 		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
 779               		.loc 1 616 0
 780 00ea 80E3      		ldi r24,lo8(48)
 781 00ec 00C0      		rjmp .L134
 782               	.LVL47:
 783               	.L60:
 617:Caterina.c    **** 	}
 618:Caterina.c    **** 	else if (Command == 's')
 784               		.loc 1 618 0
 785 00ee 8337      		cpi r24,lo8(115)
 786 00f0 01F4      		brne .L61
 619:Caterina.c    **** 	{
 620:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_3);
 787               		.loc 1 620 0
 788 00f2 87E8      		ldi r24,lo8(-121)
 789               	.LVL48:
 790 00f4 0E94 0000 		call WriteNextResponseByte
 791               	.LVL49:
 621:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_2);
 792               		.loc 1 621 0
 793 00f8 85E9      		ldi r24,lo8(-107)
 794 00fa 0E94 0000 		call WriteNextResponseByte
 795               	.LVL50:
 622:Caterina.c    **** 		WriteNextResponseByte(AVR_SIGNATURE_1);
 796               		.loc 1 622 0
 797 00fe 8EE1      		ldi r24,lo8(30)
 798 0100 00C0      		rjmp .L134
 799               	.LVL51:
 800               	.L61:
 623:Caterina.c    **** 	}
 624:Caterina.c    **** 	else if (Command == 'e')
 801               		.loc 1 624 0
 802 0102 8536      		cpi r24,lo8(101)
 803 0104 01F4      		brne .L62
 804 0106 E0E0      		ldi r30,0
 805 0108 F0E0      		ldi r31,0
 806               	.LBB152:
 625:Caterina.c    **** 	{
 626:Caterina.c    **** 		// Clear the application section of flash 
 627:Caterina.c    **** 		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_P
 628:Caterina.c    **** 		{
 629:Caterina.c    **** 			boot_page_erase(CurrFlashAddress);
 807               		.loc 1 629 0
 808 010a 83E0      		ldi r24,lo8(3)
 809               	.LVL52:
 630:Caterina.c    **** 			boot_spm_busy_wait();
 631:Caterina.c    **** 			boot_page_write(CurrFlashAddress);
 810               		.loc 1 631 0
 811 010c 95E0      		ldi r25,lo8(5)
 812               	.L65:
 629:Caterina.c    **** 			boot_spm_busy_wait();
 813               		.loc 1 629 0
 814               	/* #APP */
 815               	 ;  629 "Caterina.c" 1
 816 010e 8093 5700 		sts 87, r24
 817 0112 E895      		spm
 818               		
 819               	 ;  0 "" 2
 820               	/* #NOAPP */
 821               	.L63:
 630:Caterina.c    **** 			boot_spm_busy_wait();
 822               		.loc 1 630 0 discriminator 1
 823 0114 07B6      		in __tmp_reg__,0x37
 824 0116 00FC      		sbrc __tmp_reg__,0
 825 0118 00C0      		rjmp .L63
 826               		.loc 1 631 0
 827               	/* #APP */
 828               	 ;  631 "Caterina.c" 1
 829 011a 9093 5700 		sts 87, r25
 830 011e E895      		spm
 831               		
 832               	 ;  0 "" 2
 833               	/* #NOAPP */
 834               	.L64:
 632:Caterina.c    **** 			boot_spm_busy_wait();
 835               		.loc 1 632 0 discriminator 1
 836 0120 07B6      		in __tmp_reg__,0x37
 837 0122 00FC      		sbrc __tmp_reg__,0
 838 0124 00C0      		rjmp .L64
 839               	.LVL53:
 840 0126 E058      		subi r30,-128
 841 0128 FF4F      		sbci r31,-1
 627:Caterina.c    **** 		{
 842               		.loc 1 627 0 discriminator 2
 843 012a E115      		cp r30,__zero_reg__
 844 012c 40E7      		ldi r20,112
 845 012e F407      		cpc r31,r20
 846 0130 01F4      		brne .L65
 847 0132 00C0      		rjmp .L133
 848               	.LVL54:
 849               	.L62:
 850               	.LBE152:
 633:Caterina.c    **** 		}
 634:Caterina.c    **** 
 635:Caterina.c    **** 		// Send confirmation byte back to the host 
 636:Caterina.c    **** 		WriteNextResponseByte('\r');
 637:Caterina.c    **** 	}
 638:Caterina.c    **** 	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
 639:Caterina.c    **** 	else if (Command == 'l')
 640:Caterina.c    **** 	{
 641:Caterina.c    **** 		// Set the lock bits to those given by the host 
 642:Caterina.c    **** 		boot_lock_bits_set(FetchNextCommandByte());
 643:Caterina.c    **** 
 644:Caterina.c    **** 		// Send confirmation byte back to the host 
 645:Caterina.c    **** 		WriteNextResponseByte('\r');
 646:Caterina.c    **** 	}
 647:Caterina.c    **** 	#endif
 648:Caterina.c    **** 	else if (Command == 'r')
 851               		.loc 1 648 0
 852 0134 8237      		cpi r24,lo8(114)
 853 0136 01F4      		brne .L66
 854               	.LBB153:
 649:Caterina.c    **** 	{
 650:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
 855               		.loc 1 650 0
 856 0138 E1E0      		ldi r30,lo8(1)
 857 013a F0E0      		ldi r31,0
 858 013c 00C0      		rjmp .L136
 859               	.L66:
 860               	.LBE153:
 651:Caterina.c    **** 	}
 652:Caterina.c    **** 	else if (Command == 'F')
 861               		.loc 1 652 0
 862 013e 8634      		cpi r24,lo8(70)
 863 0140 01F4      		brne .L67
 864               	.LBB154:
 653:Caterina.c    **** 	{
 654:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
 865               		.loc 1 654 0
 866 0142 E0E0      		ldi r30,0
 867 0144 F0E0      		ldi r31,0
 868 0146 00C0      		rjmp .L136
 869               	.L67:
 870               	.LBE154:
 655:Caterina.c    **** 	}
 656:Caterina.c    **** 	else if (Command == 'N')
 871               		.loc 1 656 0
 872 0148 8E34      		cpi r24,lo8(78)
 873 014a 01F4      		brne .L68
 874               	.LBB155:
 657:Caterina.c    **** 	{
 658:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
 875               		.loc 1 658 0
 876 014c E3E0      		ldi r30,lo8(3)
 877 014e F0E0      		ldi r31,0
 878 0150 00C0      		rjmp .L136
 879               	.L68:
 880               	.LBE155:
 659:Caterina.c    **** 	}
 660:Caterina.c    **** 	else if (Command == 'Q')
 881               		.loc 1 660 0
 882 0152 8135      		cpi r24,lo8(81)
 883 0154 01F4      		brne .L69
 884               	.LBB156:
 661:Caterina.c    **** 	{
 662:Caterina.c    **** 		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
 885               		.loc 1 662 0
 886 0156 E2E0      		ldi r30,lo8(2)
 887 0158 F0E0      		ldi r31,0
 888               	.L136:
 889 015a 89E0      		ldi r24,lo8(9)
 890               	.LVL55:
 891               	/* #APP */
 892               	 ;  662 "Caterina.c" 1
 893 015c 8093 5700 		sts 87, r24
 894 0160 8491      		lpm r24, Z
 895               		
 896               	 ;  0 "" 2
 897               	.LVL56:
 898               	/* #NOAPP */
 899 0162 00C0      		rjmp .L134
 900               	.LVL57:
 901               	.L69:
 902               	.LBE156:
 663:Caterina.c    **** 	}
 664:Caterina.c    **** 	#if !defined(NO_BLOCK_SUPPORT)
 665:Caterina.c    **** 	else if (Command == 'b')
 903               		.loc 1 665 0
 904 0164 8236      		cpi r24,lo8(98)
 905 0166 01F4      		brne .L70
 666:Caterina.c    **** 	{
 667:Caterina.c    **** 		WriteNextResponseByte('Y');
 906               		.loc 1 667 0
 907 0168 89E5      		ldi r24,lo8(89)
 908               	.LVL58:
 909 016a 0E94 0000 		call WriteNextResponseByte
 910               	.LVL59:
 668:Caterina.c    **** 
 669:Caterina.c    **** 		// Send block size to the host 
 670:Caterina.c    **** 		WriteNextResponseByte(SPM_PAGESIZE >> 8);
 911               		.loc 1 670 0
 912 016e 80E0      		ldi r24,0
 913 0170 0E94 0000 		call WriteNextResponseByte
 914               	.LVL60:
 671:Caterina.c    **** 		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
 915               		.loc 1 671 0
 916 0174 80E8      		ldi r24,lo8(-128)
 917 0176 00C0      		rjmp .L134
 918               	.LVL61:
 919               	.L70:
 672:Caterina.c    **** 	}
 673:Caterina.c    **** 	else if ((Command == 'B') || (Command == 'g'))
 920               		.loc 1 673 0
 921 0178 8234      		cpi r24,lo8(66)
 922 017a 01F0      		breq .L71
 923               		.loc 1 673 0 is_stmt 0 discriminator 1
 924 017c 8736      		cpi r24,lo8(103)
 925 017e 01F0      		breq .+2
 926 0180 00C0      		rjmp .L72
 927               	.L71:
 674:Caterina.c    **** 	{
 675:Caterina.c    **** 		// Keep resetting the timeout counter if we're receiving self-programming instructions
 676:Caterina.c    **** 		Timeout = 0;
 928               		.loc 1 676 0 is_stmt 1
 929 0182 1092 0000 		sts Timeout+1,__zero_reg__
 930 0186 1092 0000 		sts Timeout,__zero_reg__
 931               	.LVL62:
 932               	.LBB157:
 933               	.LBB158:
 359:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 934               		.loc 1 359 0
 935 018a 0E94 0000 		call FetchNextCommandByte
 936               	.LVL63:
 937 018e 082F      		mov r16,r24
 938               	.LVL64:
 360:Caterina.c    **** 
 939               		.loc 1 360 0
 940 0190 0E94 0000 		call FetchNextCommandByte
 941               	.LVL65:
 942 0194 D82F      		mov r29,r24
 943               	.LVL66:
 362:Caterina.c    **** 
 944               		.loc 1 362 0
 945 0196 0E94 0000 		call FetchNextCommandByte
 946               	.LVL67:
 947 019a 182F      		mov r17,r24
 948               	.LVL68:
 364:Caterina.c    **** 	{
 949               		.loc 1 364 0
 950 019c 8BEB      		ldi r24,lo8(-69)
 951 019e 810F      		add r24,r17
 952 01a0 8230      		cpi r24,lo8(2)
 953 01a2 00F0      		brlo .L73
 954               	.LVL69:
 955               	.L98:
 367:Caterina.c    **** 
 956               		.loc 1 367 0
 957 01a4 8FE3      		ldi r24,lo8(63)
 958 01a6 00C0      		rjmp .L134
 959               	.LVL70:
 960               	.L73:
 359:Caterina.c    **** 	BlockSize |=  FetchNextCommandByte();
 961               		.loc 1 359 0
 962 01a8 8D2F      		mov r24,r29
 963 01aa 90E0      		ldi r25,0
 360:Caterina.c    **** 
 964               		.loc 1 360 0
 965 01ac 902B      		or r25,r16
 374:Caterina.c    **** 
 966               		.loc 1 374 0
 967 01ae 1092 6F00 		sts 111,__zero_reg__
 377:Caterina.c    **** 	{		
 968               		.loc 1 377 0
 969 01b2 C736      		cpi r28,lo8(103)
 970 01b4 01F0      		breq .+2
 971 01b6 00C0      		rjmp .L74
 972               	.LVL71:
 380:Caterina.c    **** 
 973               		.loc 1 380 0
 974 01b8 21E1      		ldi r18,lo8(17)
 975               	/* #APP */
 976               	 ;  380 "Caterina.c" 1
 977 01ba 2093 5700 		sts 87, r18
 978 01be E895      		spm
 979               		
 980               	 ;  0 "" 2
 981               	/* #NOAPP */
 982 01c0 EC01      		movw r28,r24
 983               	.LVL72:
 356:Caterina.c    **** 	uint8_t  LowByte  = 0;
 984               		.loc 1 356 0
 985 01c2 B12C      		mov r11,__zero_reg__
 397:Caterina.c    **** 			}
 986               		.loc 1 397 0
 987 01c4 01E0      		ldi r16,lo8(1)
 988               	.LVL73:
 989               	.L75:
 382:Caterina.c    **** 		{
 990               		.loc 1 382 0
 991 01c6 2097      		sbiw r28,0
 992 01c8 01F4      		brne .+2
 993 01ca 00C0      		rjmp .L80
 994 01cc C090 0000 		lds r12,CurrAddress
 995 01d0 D090 0000 		lds r13,CurrAddress+1
 996 01d4 E090 0000 		lds r14,CurrAddress+2
 997 01d8 F090 0000 		lds r15,CurrAddress+3
 384:Caterina.c    **** 			{
 998               		.loc 1 384 0
 999 01dc 1634      		cpi r17,lo8(70)
 1000 01de 01F4      		brne .L76
 1001               	.LVL74:
 1002               	.LBB159:
 390:Caterina.c    **** 				#endif
 1003               		.loc 1 390 0
 1004 01e0 EB2D      		mov r30,r11
 1005 01e2 F0E0      		ldi r31,0
 1006 01e4 EC29      		or r30,r12
 1007 01e6 FD29      		or r31,r13
 1008               	/* #APP */
 1009               	 ;  390 "Caterina.c" 1
 1010 01e8 8491      		lpm r24, Z
 1011               		
 1012               	 ;  0 "" 2
 1013               	.LVL75:
 1014               	/* #NOAPP */
 1015               	.LBE159:
 1016 01ea 0E94 0000 		call WriteNextResponseByte
 1017               	.LVL76:
 394:Caterina.c    **** 				  CurrAddress += 2;
 1018               		.loc 1 394 0
 1019 01ee BB20      		tst r11
 1020 01f0 01F0      		breq .L77
 395:Caterina.c    **** 
 1021               		.loc 1 395 0
 1022 01f2 52E0      		ldi r21,2
 1023 01f4 C50E      		add r12,r21
 1024 01f6 D11C      		adc r13,__zero_reg__
 1025 01f8 E11C      		adc r14,__zero_reg__
 1026 01fa F11C      		adc r15,__zero_reg__
 1027               	.LVL77:
 1028 01fc C092 0000 		sts CurrAddress,r12
 1029 0200 D092 0000 		sts CurrAddress+1,r13
 1030 0204 E092 0000 		sts CurrAddress+2,r14
 1031 0208 F092 0000 		sts CurrAddress+3,r15
 1032               	.LVL78:
 1033               	.L77:
 397:Caterina.c    **** 			}
 1034               		.loc 1 397 0
 1035 020c B026      		eor r11,r16
 1036               	.LVL79:
 1037 020e 00C0      		rjmp .L78
 1038               	.L76:
 402:Caterina.c    **** 
 1039               		.loc 1 402 0
 1040 0210 D701      		movw r26,r14
 1041 0212 C601      		movw r24,r12
 1042 0214 B695      		lsr r27
 1043 0216 A795      		ror r26
 1044 0218 9795      		ror r25
 1045 021a 8795      		ror r24
 1046 021c 0E94 0000 		call eeprom_read_byte
 1047               	.LVL80:
 1048 0220 0E94 0000 		call WriteNextResponseByte
 1049               	.LVL81:
 405:Caterina.c    **** 			}
 1050               		.loc 1 405 0
 1051 0224 82E0      		ldi r24,2
 1052 0226 C80E      		add r12,r24
 1053 0228 D11C      		adc r13,__zero_reg__
 1054 022a E11C      		adc r14,__zero_reg__
 1055 022c F11C      		adc r15,__zero_reg__
 1056 022e C092 0000 		sts CurrAddress,r12
 1057 0232 D092 0000 		sts CurrAddress+1,r13
 1058 0236 E092 0000 		sts CurrAddress+2,r14
 1059 023a F092 0000 		sts CurrAddress+3,r15
 1060               	.L78:
 1061 023e 2197      		sbiw r28,1
 1062               	.LVL82:
 1063 0240 00C0      		rjmp .L75
 1064               	.LVL83:
 1065               	.L74:
 1066               	.LBB160:
 411:Caterina.c    **** 
 1067               		.loc 1 411 0
 1068 0242 8090 0000 		lds r8,CurrAddress
 1069 0246 9090 0000 		lds r9,CurrAddress+1
 1070 024a A090 0000 		lds r10,CurrAddress+2
 1071 024e B090 0000 		lds r11,CurrAddress+3
 413:Caterina.c    **** 		{
 1072               		.loc 1 413 0
 1073 0252 1634      		cpi r17,lo8(70)
 1074 0254 01F4      		brne .L106
 415:Caterina.c    **** 			boot_spm_busy_wait();
 1075               		.loc 1 415 0
 1076 0256 23E0      		ldi r18,lo8(3)
 1077 0258 F401      		movw r30,r8
 1078               	/* #APP */
 1079               	 ;  415 "Caterina.c" 1
 1080 025a 2093 5700 		sts 87, r18
 1081 025e E895      		spm
 1082               		
 1083               	 ;  0 "" 2
 1084               	/* #NOAPP */
 1085               	.L82:
 416:Caterina.c    **** 		}
 1086               		.loc 1 416 0
 1087 0260 07B6      		in __tmp_reg__,0x37
 1088 0262 00FC      		sbrc __tmp_reg__,0
 1089 0264 00C0      		rjmp .L82
 1090               	.L106:
 413:Caterina.c    **** 		{
 1091               		.loc 1 413 0
 1092 0266 E12C      		mov r14,__zero_reg__
 1093 0268 F12C      		mov r15,__zero_reg__
 1094 026a EC01      		movw r28,r24
 1095               	.LVL84:
 437:Caterina.c    **** 			}
 1096               		.loc 1 437 0
 1097 026c 01E0      		ldi r16,lo8(1)
 1098               	.LVL85:
 1099               	.L83:
 419:Caterina.c    **** 		{
 1100               		.loc 1 419 0
 1101 026e 2097      		sbiw r28,0
 1102 0270 01F4      		brne .+2
 1103 0272 00C0      		rjmp .L137
 421:Caterina.c    **** 			{
 1104               		.loc 1 421 0
 1105 0274 1634      		cpi r17,lo8(70)
 1106 0276 01F4      		brne .L84
 424:Caterina.c    **** 				{
 1107               		.loc 1 424 0
 1108 0278 FF20      		tst r15
 1109 027a 01F0      		breq .L85
 427:Caterina.c    **** 
 1110               		.loc 1 427 0
 1111 027c 4090 0000 		lds r4,CurrAddress
 1112 0280 5090 0000 		lds r5,CurrAddress+1
 1113 0284 6090 0000 		lds r6,CurrAddress+2
 1114 0288 7090 0000 		lds r7,CurrAddress+3
 1115 028c 0E94 0000 		call FetchNextCommandByte
 1116               	.LVL86:
 1117 0290 2E2D      		mov r18,r14
 1118 0292 30E0      		ldi r19,0
 1119 0294 A901      		movw r20,r18
 1120 0296 582B      		or r21,r24
 1121 0298 F201      		movw r30,r4
 1122               	/* #APP */
 1123               	 ;  427 "Caterina.c" 1
 1124 029a 0A01      		movw  r0, r20
 1125 029c 0093 5700 		sts 87, r16
 1126 02a0 E895      		spm
 1127 02a2 1124      		clr  r1
 1128               		
 1129               	 ;  0 "" 2
 430:Caterina.c    **** 				}
 1130               		.loc 1 430 0
 1131               	/* #NOAPP */
 1132 02a4 F2E0      		ldi r31,2
 1133 02a6 4F0E      		add r4,r31
 1134 02a8 511C      		adc r5,__zero_reg__
 1135 02aa 611C      		adc r6,__zero_reg__
 1136 02ac 711C      		adc r7,__zero_reg__
 1137 02ae 4092 0000 		sts CurrAddress,r4
 1138 02b2 5092 0000 		sts CurrAddress+1,r5
 1139 02b6 6092 0000 		sts CurrAddress+2,r6
 1140 02ba 7092 0000 		sts CurrAddress+3,r7
 1141 02be 00C0      		rjmp .L86
 1142               	.L85:
 434:Caterina.c    **** 				}
 1143               		.loc 1 434 0
 1144 02c0 0E94 0000 		call FetchNextCommandByte
 1145               	.LVL87:
 1146 02c4 E82E      		mov r14,r24
 1147               	.LVL88:
 1148               	.L86:
 437:Caterina.c    **** 			}
 1149               		.loc 1 437 0
 1150 02c6 F026      		eor r15,r16
 1151               	.LVL89:
 1152 02c8 00C0      		rjmp .L87
 1153               	.L84:
 442:Caterina.c    **** 
 1154               		.loc 1 442 0
 1155 02ca 0E94 0000 		call FetchNextCommandByte
 1156               	.LVL90:
 1157 02ce 682F      		mov r22,r24
 1158 02d0 8091 0000 		lds r24,CurrAddress
 1159 02d4 9091 0000 		lds r25,CurrAddress+1
 1160 02d8 A091 0000 		lds r26,CurrAddress+2
 1161 02dc B091 0000 		lds r27,CurrAddress+3
 1162 02e0 B695      		lsr r27
 1163 02e2 A795      		ror r26
 1164 02e4 9795      		ror r25
 1165 02e6 8795      		ror r24
 1166 02e8 0E94 0000 		call eeprom_write_byte
 1167               	.LVL91:
 445:Caterina.c    **** 			}
 1168               		.loc 1 445 0
 1169 02ec 8091 0000 		lds r24,CurrAddress
 1170 02f0 9091 0000 		lds r25,CurrAddress+1
 1171 02f4 A091 0000 		lds r26,CurrAddress+2
 1172 02f8 B091 0000 		lds r27,CurrAddress+3
 1173 02fc 0296      		adiw r24,2
 1174 02fe A11D      		adc r26,__zero_reg__
 1175 0300 B11D      		adc r27,__zero_reg__
 1176 0302 8093 0000 		sts CurrAddress,r24
 1177 0306 9093 0000 		sts CurrAddress+1,r25
 1178 030a A093 0000 		sts CurrAddress+2,r26
 1179 030e B093 0000 		sts CurrAddress+3,r27
 1180               	.L87:
 1181 0312 2197      		sbiw r28,1
 1182               	.LVL92:
 1183 0314 00C0      		rjmp .L83
 1184               	.LVL93:
 1185               	.L137:
 450:Caterina.c    **** 		{
 1186               		.loc 1 450 0
 1187 0316 1634      		cpi r17,lo8(70)
 1188 0318 01F4      		brne .L89
 453:Caterina.c    **** 
 1189               		.loc 1 453 0
 1190 031a 85E0      		ldi r24,lo8(5)
 1191 031c F401      		movw r30,r8
 1192               	/* #APP */
 1193               	 ;  453 "Caterina.c" 1
 1194 031e 8093 5700 		sts 87, r24
 1195 0322 E895      		spm
 1196               		
 1197               	 ;  0 "" 2
 1198               	/* #NOAPP */
 1199               	.L90:
 456:Caterina.c    **** 		}
 1200               		.loc 1 456 0
 1201 0324 07B6      		in __tmp_reg__,0x37
 1202 0326 00FC      		sbrc __tmp_reg__,0
 1203 0328 00C0      		rjmp .L90
 1204               	.L89:
 460:Caterina.c    **** 	}
 1205               		.loc 1 460 0
 1206 032a 8DE0      		ldi r24,lo8(13)
 1207 032c 0E94 0000 		call WriteNextResponseByte
 1208               	.LVL94:
 1209               	.L80:
 1210               	.LBE160:
 464:Caterina.c    **** }
 1211               		.loc 1 464 0
 1212 0330 82E0      		ldi r24,lo8(2)
 1213 0332 8093 6F00 		sts 111,r24
 1214 0336 00C0      		rjmp .L50
 1215               	.LVL95:
 1216               	.L72:
 1217               	.LBE158:
 1218               	.LBE157:
 677:Caterina.c    **** 		// Delegate the block write/read to a separate function for clarity 
 678:Caterina.c    **** 		ReadWriteMemoryBlock(Command);
 679:Caterina.c    **** 	}
 680:Caterina.c    **** 	#endif
 681:Caterina.c    **** 	#if !defined(NO_FLASH_BYTE_SUPPORT)
 682:Caterina.c    **** 	else if (Command == 'C')
 1219               		.loc 1 682 0
 1220 0338 8334      		cpi r24,lo8(67)
 1221 033a 01F4      		brne .L91
 683:Caterina.c    **** 	{
 684:Caterina.c    **** 		// Write the high byte to the current flash page
 685:Caterina.c    **** 		boot_page_fill(CurrAddress, FetchNextCommandByte());
 1222               		.loc 1 685 0
 1223 033c C091 0000 		lds r28,CurrAddress
 1224 0340 D091 0000 		lds r29,CurrAddress+1
 1225 0344 0E94 0000 		call FetchNextCommandByte
 1226               	.LVL96:
 1227 0348 90E0      		ldi r25,0
 1228 034a 21E0      		ldi r18,lo8(1)
 1229 034c FE01      		movw r30,r28
 1230               	/* #APP */
 1231               	 ;  685 "Caterina.c" 1
 1232 034e 0C01      		movw  r0, r24
 1233 0350 2093 5700 		sts 87, r18
 1234 0354 E895      		spm
 1235 0356 1124      		clr  r1
 1236               		
 1237               	 ;  0 "" 2
 1238               	/* #NOAPP */
 1239 0358 00C0      		rjmp .L133
 1240               	.LVL97:
 1241               	.L91:
 686:Caterina.c    **** 
 687:Caterina.c    **** 		// Send confirmation byte back to the host 
 688:Caterina.c    **** 		WriteNextResponseByte('\r');
 689:Caterina.c    **** 	}
 690:Caterina.c    **** 	else if (Command == 'c')
 1242               		.loc 1 690 0
 1243 035a 8336      		cpi r24,lo8(99)
 1244 035c 01F4      		brne .L92
 691:Caterina.c    **** 	{
 692:Caterina.c    **** 		// Write the low byte to the current flash page 
 693:Caterina.c    **** 		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
 1245               		.loc 1 693 0
 1246 035e C090 0000 		lds r12,CurrAddress
 1247 0362 D090 0000 		lds r13,CurrAddress+1
 1248 0366 E090 0000 		lds r14,CurrAddress+2
 1249 036a F090 0000 		lds r15,CurrAddress+3
 1250 036e 0E94 0000 		call FetchNextCommandByte
 1251               	.LVL98:
 1252 0372 F601      		movw r30,r12
 1253 0374 E160      		ori r30,1
 1254 0376 90E0      		ldi r25,0
 1255 0378 21E0      		ldi r18,lo8(1)
 1256               	/* #APP */
 1257               	 ;  693 "Caterina.c" 1
 1258 037a 0C01      		movw  r0, r24
 1259 037c 2093 5700 		sts 87, r18
 1260 0380 E895      		spm
 1261 0382 1124      		clr  r1
 1262               		
 1263               	 ;  0 "" 2
 694:Caterina.c    **** 
 695:Caterina.c    **** 		// Increment the address 
 696:Caterina.c    **** 		CurrAddress += 2;
 1264               		.loc 1 696 0
 1265               	/* #NOAPP */
 1266 0384 F2E0      		ldi r31,2
 1267 0386 CF0E      		add r12,r31
 1268 0388 D11C      		adc r13,__zero_reg__
 1269 038a E11C      		adc r14,__zero_reg__
 1270 038c F11C      		adc r15,__zero_reg__
 1271 038e C092 0000 		sts CurrAddress,r12
 1272 0392 D092 0000 		sts CurrAddress+1,r13
 1273 0396 E092 0000 		sts CurrAddress+2,r14
 1274 039a F092 0000 		sts CurrAddress+3,r15
 1275 039e 00C0      		rjmp .L133
 1276               	.LVL99:
 1277               	.L92:
 697:Caterina.c    **** 
 698:Caterina.c    **** 		// Send confirmation byte back to the host 
 699:Caterina.c    **** 		WriteNextResponseByte('\r');
 700:Caterina.c    **** 	}
 701:Caterina.c    **** 	else if (Command == 'm')
 1278               		.loc 1 701 0
 1279 03a0 8D36      		cpi r24,lo8(109)
 1280 03a2 01F4      		brne .L93
 702:Caterina.c    **** 	{
 703:Caterina.c    **** 		// Commit the flash page to memory
 704:Caterina.c    **** 		boot_page_write(CurrAddress);
 1281               		.loc 1 704 0
 1282 03a4 E091 0000 		lds r30,CurrAddress
 1283 03a8 F091 0000 		lds r31,CurrAddress+1
 1284 03ac 85E0      		ldi r24,lo8(5)
 1285               	.LVL100:
 1286               	/* #APP */
 1287               	 ;  704 "Caterina.c" 1
 1288 03ae 8093 5700 		sts 87, r24
 1289 03b2 E895      		spm
 1290               		
 1291               	 ;  0 "" 2
 1292               	/* #NOAPP */
 1293               	.L94:
 705:Caterina.c    **** 
 706:Caterina.c    **** 		// Wait until write operation has completed 
 707:Caterina.c    **** 		boot_spm_busy_wait();
 1294               		.loc 1 707 0 discriminator 1
 1295 03b4 07B6      		in __tmp_reg__,0x37
 1296 03b6 00FC      		sbrc __tmp_reg__,0
 1297 03b8 00C0      		rjmp .L94
 1298 03ba 00C0      		rjmp .L133
 1299               	.LVL101:
 1300               	.L93:
 708:Caterina.c    **** 
 709:Caterina.c    **** 		// Send confirmation byte back to the host 
 710:Caterina.c    **** 		WriteNextResponseByte('\r');
 711:Caterina.c    **** 	}
 712:Caterina.c    **** 	else if (Command == 'R')
 1301               		.loc 1 712 0
 1302 03bc 8235      		cpi r24,lo8(82)
 1303 03be 01F4      		brne .L95
 1304               	.LBB161:
 1305               	.LBB162:
 713:Caterina.c    **** 	{
 714:Caterina.c    **** 		#if (FLASHEND > 0xFFFF)
 715:Caterina.c    **** 		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
 716:Caterina.c    **** 		#else
 717:Caterina.c    **** 		uint16_t ProgramWord = pgm_read_word(CurrAddress);
 1306               		.loc 1 717 0
 1307 03c0 E091 0000 		lds r30,CurrAddress
 1308 03c4 F091 0000 		lds r31,CurrAddress+1
 1309               	.LVL102:
 1310               	/* #APP */
 1311               	 ;  717 "Caterina.c" 1
 1312 03c8 C591      		lpm r28, Z+
 1313 03ca D491      		lpm r29, Z
 1314               		
 1315               	 ;  0 "" 2
 1316               	.LVL103:
 1317               	/* #NOAPP */
 1318               	.LBE162:
 718:Caterina.c    **** 		#endif
 719:Caterina.c    **** 
 720:Caterina.c    **** 		WriteNextResponseByte(ProgramWord >> 8);
 1319               		.loc 1 720 0
 1320 03cc 8D2F      		mov r24,r29
 1321               	.LVL104:
 1322 03ce 0E94 0000 		call WriteNextResponseByte
 1323               	.LVL105:
 721:Caterina.c    **** 		WriteNextResponseByte(ProgramWord & 0xFF);
 1324               		.loc 1 721 0
 1325 03d2 8C2F      		mov r24,r28
 1326 03d4 00C0      		rjmp .L134
 1327               	.LVL106:
 1328               	.L95:
 1329               	.LBE161:
 722:Caterina.c    **** 	}
 723:Caterina.c    **** 	#endif
 724:Caterina.c    **** 	#if !defined(NO_EEPROM_BYTE_SUPPORT)
 725:Caterina.c    **** 	else if (Command == 'D')
 1330               		.loc 1 725 0
 1331 03d6 8434      		cpi r24,lo8(68)
 1332 03d8 01F4      		brne .L96
 726:Caterina.c    **** 	{
 727:Caterina.c    **** 		// Read the byte from the endpoint and write it to the EEPROM 
 728:Caterina.c    **** 		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1333               		.loc 1 728 0
 1334 03da 0E94 0000 		call FetchNextCommandByte
 1335               	.LVL107:
 1336 03de 682F      		mov r22,r24
 1337 03e0 8091 0000 		lds r24,CurrAddress
 1338 03e4 9091 0000 		lds r25,CurrAddress+1
 1339 03e8 A091 0000 		lds r26,CurrAddress+2
 1340 03ec B091 0000 		lds r27,CurrAddress+3
 1341 03f0 B695      		lsr r27
 1342 03f2 A795      		ror r26
 1343 03f4 9795      		ror r25
 1344 03f6 8795      		ror r24
 1345 03f8 0E94 0000 		call eeprom_write_byte
 1346               	.LVL108:
 729:Caterina.c    **** 
 730:Caterina.c    **** 		// Increment the address after use
 731:Caterina.c    **** 		CurrAddress += 2;
 1347               		.loc 1 731 0
 1348 03fc 8091 0000 		lds r24,CurrAddress
 1349 0400 9091 0000 		lds r25,CurrAddress+1
 1350 0404 A091 0000 		lds r26,CurrAddress+2
 1351 0408 B091 0000 		lds r27,CurrAddress+3
 1352 040c 0296      		adiw r24,2
 1353 040e A11D      		adc r26,__zero_reg__
 1354 0410 B11D      		adc r27,__zero_reg__
 1355               	.LVL109:
 1356               	.L135:
 1357 0412 8093 0000 		sts CurrAddress,r24
 1358 0416 9093 0000 		sts CurrAddress+1,r25
 1359 041a A093 0000 		sts CurrAddress+2,r26
 1360 041e B093 0000 		sts CurrAddress+3,r27
 1361 0422 00C0      		rjmp .L133
 1362               	.LVL110:
 1363               	.L96:
 732:Caterina.c    **** 
 733:Caterina.c    **** 		// Send confirmation byte back to the host 
 734:Caterina.c    **** 		WriteNextResponseByte('\r');
 735:Caterina.c    **** 	}
 736:Caterina.c    **** 	else if (Command == 'd')
 1364               		.loc 1 736 0
 1365 0424 8436      		cpi r24,lo8(100)
 1366 0426 01F4      		brne .L97
 737:Caterina.c    **** 	{
 738:Caterina.c    **** 		// Read the EEPROM byte and write it to the endpoint 
 739:Caterina.c    **** 		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
 1367               		.loc 1 739 0
 1368 0428 C090 0000 		lds r12,CurrAddress
 1369 042c D090 0000 		lds r13,CurrAddress+1
 1370 0430 E090 0000 		lds r14,CurrAddress+2
 1371 0434 F090 0000 		lds r15,CurrAddress+3
 1372 0438 D701      		movw r26,r14
 1373 043a C601      		movw r24,r12
 1374               	.LVL111:
 1375 043c B695      		lsr r27
 1376 043e A795      		ror r26
 1377 0440 9795      		ror r25
 1378 0442 8795      		ror r24
 1379 0444 0E94 0000 		call eeprom_read_byte
 1380               	.LVL112:
 1381 0448 0E94 0000 		call WriteNextResponseByte
 1382               	.LVL113:
 740:Caterina.c    **** 
 741:Caterina.c    **** 		// Increment the address after use 
 742:Caterina.c    **** 		CurrAddress += 2;
 1383               		.loc 1 742 0
 1384 044c 22E0      		ldi r18,2
 1385 044e C20E      		add r12,r18
 1386 0450 D11C      		adc r13,__zero_reg__
 1387 0452 E11C      		adc r14,__zero_reg__
 1388 0454 F11C      		adc r15,__zero_reg__
 1389 0456 C092 0000 		sts CurrAddress,r12
 1390 045a D092 0000 		sts CurrAddress+1,r13
 1391 045e E092 0000 		sts CurrAddress+2,r14
 1392 0462 F092 0000 		sts CurrAddress+3,r15
 1393 0466 00C0      		rjmp .L50
 1394               	.LVL114:
 1395               	.L97:
 743:Caterina.c    **** 	}
 744:Caterina.c    **** 	#endif
 745:Caterina.c    **** 	else if (Command != 27)
 1396               		.loc 1 745 0
 1397 0468 8B31      		cpi r24,lo8(27)
 1398 046a 01F0      		breq .+2
 1399 046c 00C0      		rjmp .L98
 1400               	.LVL115:
 1401               	.L50:
 1402               	.LBB163:
 1403               	.LBB164:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1404               		.loc 2 330 0
 1405 046e 83E0      		ldi r24,lo8(3)
 1406 0470 8093 E900 		sts 233,r24
 1407               	.LVL116:
 1408               	.LBE164:
 1409               	.LBE163:
 1410               	.LBB165:
 1411               	.LBB166:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1412               		.loc 2 420 0
 1413 0474 9091 E800 		lds r25,232
 1414               	.LVL117:
 1415               	.LBE166:
 1416               	.LBE165:
 1417               	.LBB167:
 1418               	.LBB168:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1419               		.loc 2 516 0
 1420 0478 8091 E800 		lds r24,232
 1421 047c 8E77      		andi r24,lo8(126)
 1422 047e 8093 E800 		sts 232,r24
 1423               	.LBE168:
 1424               	.LBE167:
 746:Caterina.c    **** 	{
 747:Caterina.c    **** 		// Unknown (non-sync) command, return fail code 
 748:Caterina.c    **** 		WriteNextResponseByte('?');
 749:Caterina.c    **** 	}
 750:Caterina.c    **** 	
 751:Caterina.c    **** 
 752:Caterina.c    **** 	/* Select the IN endpoint */
 753:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 754:Caterina.c    **** 
 755:Caterina.c    **** 	/* Remember if the endpoint is completely full before clearing it */
 756:Caterina.c    **** 	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
 757:Caterina.c    **** 
 758:Caterina.c    **** 	/* Send the endpoint data to the host */
 759:Caterina.c    **** 	Endpoint_ClearIN();
 760:Caterina.c    **** 
 761:Caterina.c    **** 	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to sign
 762:Caterina.c    **** 	if (IsEndpointFull)
 1425               		.loc 1 762 0
 1426 0482 95FD      		sbrc r25,5
 1427 0484 00C0      		rjmp .L104
 1428               	.L100:
 1429               	.LBB169:
 1430               	.LBB170:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1431               		.loc 2 467 0
 1432 0486 8091 E800 		lds r24,232
 1433               	.LBE170:
 1434               	.LBE169:
 763:Caterina.c    **** 	{
 764:Caterina.c    **** 		while (!(Endpoint_IsINReady()))
 1435               		.loc 1 764 0
 1436 048a 80FD      		sbrc r24,0
 1437 048c 00C0      		rjmp .L138
 765:Caterina.c    **** 		{
 766:Caterina.c    **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 1438               		.loc 1 766 0
 1439 048e 8EB3      		in r24,0x1e
 1440 0490 8111      		cpse r24,__zero_reg__
 1441 0492 00C0      		rjmp .L100
 1442 0494 00C0      		rjmp .L44
 1443               	.L138:
 1444               	.LBB171:
 1445               	.LBB172:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1446               		.loc 2 516 0
 1447 0496 8091 E800 		lds r24,232
 1448 049a 8E77      		andi r24,lo8(126)
 1449 049c 8093 E800 		sts 232,r24
 1450 04a0 00C0      		rjmp .L104
 1451               	.L105:
 1452               	.LBE172:
 1453               	.LBE171:
 767:Caterina.c    **** 			  return;
 768:Caterina.c    **** 		}
 769:Caterina.c    **** 
 770:Caterina.c    **** 		Endpoint_ClearIN();
 771:Caterina.c    **** 	}
 772:Caterina.c    **** 
 773:Caterina.c    **** 	/* Wait until the data has been sent to the host */
 774:Caterina.c    **** 	while (!(Endpoint_IsINReady()))
 775:Caterina.c    **** 	{
 776:Caterina.c    **** 		if (USB_DeviceState == DEVICE_STATE_Unattached)
 1454               		.loc 1 776 0
 1455 04a2 8EB3      		in r24,0x1e
 1456 04a4 8823      		tst r24
 1457 04a6 01F0      		breq .L44
 1458               	.L104:
 1459               	.LBB173:
 1460               	.LBB174:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1461               		.loc 2 467 0
 1462 04a8 8091 E800 		lds r24,232
 1463               	.LBE174:
 1464               	.LBE173:
 774:Caterina.c    **** 	{
 1465               		.loc 1 774 0
 1466 04ac 80FF      		sbrs r24,0
 1467 04ae 00C0      		rjmp .L105
 1468               	.LVL118:
 1469               	.LBB175:
 1470               	.LBB176:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1471               		.loc 2 330 0
 1472 04b0 84E0      		ldi r24,lo8(4)
 1473 04b2 8093 E900 		sts 233,r24
 1474               	.LVL119:
 1475               	.LBE176:
 1476               	.LBE175:
 1477               	.LBB177:
 1478               	.LBB178:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1479               		.loc 2 531 0
 1480 04b6 8091 E800 		lds r24,232
 1481 04ba 8B77      		andi r24,lo8(123)
 1482 04bc 8093 E800 		sts 232,r24
 1483               	.LVL120:
 1484               	.L44:
 1485               	/* epilogue start */
 1486               	.LBE178:
 1487               	.LBE177:
 777:Caterina.c    **** 		  return;
 778:Caterina.c    **** 	}
 779:Caterina.c    **** 
 780:Caterina.c    **** 	/* Select the OUT endpoint */
 781:Caterina.c    **** 	Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 782:Caterina.c    **** 
 783:Caterina.c    **** 	/* Acknowledge the command from the host */
 784:Caterina.c    **** 	Endpoint_ClearOUT();
 785:Caterina.c    **** }
 1488               		.loc 1 785 0
 1489 04c0 DF91      		pop r29
 1490 04c2 CF91      		pop r28
 1491 04c4 1F91      		pop r17
 1492 04c6 0F91      		pop r16
 1493 04c8 FF90      		pop r15
 1494 04ca EF90      		pop r14
 1495 04cc DF90      		pop r13
 1496 04ce CF90      		pop r12
 1497 04d0 BF90      		pop r11
 1498 04d2 AF90      		pop r10
 1499 04d4 9F90      		pop r9
 1500 04d6 8F90      		pop r8
 1501 04d8 7F90      		pop r7
 1502 04da 6F90      		pop r6
 1503 04dc 5F90      		pop r5
 1504 04de 4F90      		pop r4
 1505 04e0 0895      		ret
 1506               		.cfi_endproc
 1507               	.LFE109:
 1509               		.section	.text.startup.main,"ax",@progbits
 1510               	.global	main
 1512               	main:
 1513               	.LFB101:
 150:Caterina.c    **** 	/* Save the value of the boot key memory before it is overwritten */
 1514               		.loc 1 150 0
 1515               		.cfi_startproc
 1516               	/* prologue: function */
 1517               	/* frame size = 0 */
 1518               	/* stack size = 0 */
 1519               	.L__stack_usage = 0
 152:Caterina.c    **** 	*bootKeyPtr = 0;
 1520               		.loc 1 152 0
 1521 0000 2091 0008 		lds r18,2048
 1522 0004 3091 0108 		lds r19,2048+1
 1523               	.LVL121:
 153:Caterina.c    **** 
 1524               		.loc 1 153 0
 1525 0008 1092 0108 		sts 2048+1,__zero_reg__
 1526 000c 1092 0008 		sts 2048,__zero_reg__
 156:Caterina.c    **** 	MCUSR &= ~((1 << PORF) | (1 << EXTRF) | (1 << WDRF));	// clear reset flags that are used by the bo
 1527               		.loc 1 156 0
 1528 0010 84B7      		in r24,0x34
 1529               	.LVL122:
 157:Caterina.c    **** 
 1530               		.loc 1 157 0
 1531 0012 94B7      		in r25,0x34
 1532 0014 947F      		andi r25,lo8(-12)
 1533 0016 94BF      		out 0x34,r25
 1534               	.LBB179:
 1535               	.LBB180:
 1536               		.file 3 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/lib/avr/include/avr/wdt.h **** 
 103:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/lib/avr/include/avr/wdt.h **** #else
 106:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/lib/avr/include/avr/wdt.h **** #endif
 108:/usr/lib/avr/include/avr/wdt.h **** 
 109:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/lib/avr/include/avr/wdt.h **** #else
 114:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/lib/avr/include/avr/wdt.h **** #endif
 116:/usr/lib/avr/include/avr/wdt.h **** 
 117:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/lib/avr/include/avr/wdt.h **** #else
 120:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/lib/avr/include/avr/wdt.h **** #endif
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/lib/avr/include/avr/wdt.h **** 
 125:/usr/lib/avr/include/avr/wdt.h **** 
 126:/usr/lib/avr/include/avr/wdt.h **** /**
 127:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/lib/avr/include/avr/wdt.h **** */
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** 
 138:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/lib/avr/include/avr/wdt.h **** 
 140:/usr/lib/avr/include/avr/wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:/usr/lib/avr/include/avr/wdt.h **** 
 142:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 143:/usr/lib/avr/include/avr/wdt.h **** do { \
 144:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 145:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 146:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"									"\n\t" \
 147:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:/usr/lib/avr/include/avr/wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:/usr/lib/avr/include/avr/wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:/usr/lib/avr/include/avr/wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:/usr/lib/avr/include/avr/wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h **** 	: [tmp]					"=r" (temp) \
 155:/usr/lib/avr/include/avr/wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:/usr/lib/avr/include/avr/wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:/usr/lib/avr/include/avr/wdt.h **** ); \
 162:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 163:/usr/lib/avr/include/avr/wdt.h **** 
 164:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 165:/usr/lib/avr/include/avr/wdt.h **** do { \
 166:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 167:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 168:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"								"\n\t" \
 169:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:/usr/lib/avr/include/avr/wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]            "=r" (temp) \
 174:/usr/lib/avr/include/avr/wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:/usr/lib/avr/include/avr/wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:/usr/lib/avr/include/avr/wdt.h **** ); \
 179:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 180:/usr/lib/avr/include/avr/wdt.h **** 
 181:/usr/lib/avr/include/avr/wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:/usr/lib/avr/include/avr/wdt.h **** 
 183:/usr/lib/avr/include/avr/wdt.h **** /*
 184:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 185:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 187:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 188:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 191:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 194:/usr/lib/avr/include/avr/wdt.h **** */
 195:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 196:/usr/lib/avr/include/avr/wdt.h **** do { \
 197:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 198:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 199:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 208:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 216:/usr/lib/avr/include/avr/wdt.h **** ); \
 217:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 218:/usr/lib/avr/include/avr/wdt.h **** 
 219:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 220:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 221:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:/usr/lib/avr/include/avr/wdt.h ****     : \
 227:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 233:/usr/lib/avr/include/avr/wdt.h **** );
 234:/usr/lib/avr/include/avr/wdt.h **** 
 235:/usr/lib/avr/include/avr/wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:/usr/lib/avr/include/avr/wdt.h **** 
 237:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 238:/usr/lib/avr/include/avr/wdt.h **** 
 239:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 240:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 241:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 243:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 244:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 248:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 254:/usr/lib/avr/include/avr/wdt.h **** )
 255:/usr/lib/avr/include/avr/wdt.h **** 
 256:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 257:/usr/lib/avr/include/avr/wdt.h **** do { \
 258:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 259:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 260:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 262:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 263:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 269:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 275:/usr/lib/avr/include/avr/wdt.h **** ); \
 276:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 277:/usr/lib/avr/include/avr/wdt.h **** 
 278:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 279:/usr/lib/avr/include/avr/wdt.h **** 
 280:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 281:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 282:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 283:/usr/lib/avr/include/avr/wdt.h **** {
 284:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:/usr/lib/avr/include/avr/wdt.h **** 	{
 286:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 287:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 289:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 290:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 294:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 300:/usr/lib/avr/include/avr/wdt.h **** 			);
 301:/usr/lib/avr/include/avr/wdt.h **** 	}
 302:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:/usr/lib/avr/include/avr/wdt.h **** 	{
 304:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 305:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 307:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 308:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 312:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 318:/usr/lib/avr/include/avr/wdt.h **** 			);
 319:/usr/lib/avr/include/avr/wdt.h **** 	}
 320:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:/usr/lib/avr/include/avr/wdt.h **** 	{
 322:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 323:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 330:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 336:/usr/lib/avr/include/avr/wdt.h **** 			);
 337:/usr/lib/avr/include/avr/wdt.h **** 	}
 338:/usr/lib/avr/include/avr/wdt.h **** 	else
 339:/usr/lib/avr/include/avr/wdt.h ****  	{
 340:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 341:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 348:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 			);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** }
 357:/usr/lib/avr/include/avr/wdt.h **** 
 358:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 359:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 360:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 361:/usr/lib/avr/include/avr/wdt.h **** {
 362:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:/usr/lib/avr/include/avr/wdt.h **** 	{
 364:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 365:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 366:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 369:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 375:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 381:/usr/lib/avr/include/avr/wdt.h **** 				);
 382:/usr/lib/avr/include/avr/wdt.h **** 	}
 383:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:/usr/lib/avr/include/avr/wdt.h **** 	{
 385:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 386:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 387:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 390:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 396:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 402:/usr/lib/avr/include/avr/wdt.h **** 				);
 403:/usr/lib/avr/include/avr/wdt.h **** 	}
 404:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:/usr/lib/avr/include/avr/wdt.h **** 	{
 406:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 407:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 408:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 417:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 423:/usr/lib/avr/include/avr/wdt.h **** 				);
 424:/usr/lib/avr/include/avr/wdt.h **** 	}
 425:/usr/lib/avr/include/avr/wdt.h **** 	else
 426:/usr/lib/avr/include/avr/wdt.h **** 	{
 427:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 428:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 429:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 438:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 444:/usr/lib/avr/include/avr/wdt.h **** 				);
 445:/usr/lib/avr/include/avr/wdt.h **** 	}
 446:/usr/lib/avr/include/avr/wdt.h **** }
 447:/usr/lib/avr/include/avr/wdt.h **** 
 448:/usr/lib/avr/include/avr/wdt.h **** #else
 449:/usr/lib/avr/include/avr/wdt.h **** 
 450:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 451:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 452:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 453:/usr/lib/avr/include/avr/wdt.h **** {
 454:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:/usr/lib/avr/include/avr/wdt.h **** 	{
 456:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 457:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 459:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 460:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 461:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 462:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 463:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 464:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 465:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 466:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 467:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 468:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 469:/usr/lib/avr/include/avr/wdt.h **** 		);
 470:/usr/lib/avr/include/avr/wdt.h **** 	}
 471:/usr/lib/avr/include/avr/wdt.h **** 	else
 472:/usr/lib/avr/include/avr/wdt.h **** 	{
 473:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 474:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 475:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 476:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 477:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 478:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 479:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 480:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 481:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 482:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 483:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 484:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 485:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 486:/usr/lib/avr/include/avr/wdt.h **** 		);
 487:/usr/lib/avr/include/avr/wdt.h **** 	}
 488:/usr/lib/avr/include/avr/wdt.h **** }
 489:/usr/lib/avr/include/avr/wdt.h **** 
 490:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 491:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 492:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 493:/usr/lib/avr/include/avr/wdt.h **** {
 494:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 495:/usr/lib/avr/include/avr/wdt.h **** 	{
 496:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 497:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 498:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 499:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 500:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 501:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 502:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 503:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 504:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 505:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 506:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 507:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 508:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 509:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 510:/usr/lib/avr/include/avr/wdt.h **** 		);
 511:/usr/lib/avr/include/avr/wdt.h **** 	}
 512:/usr/lib/avr/include/avr/wdt.h **** 	else
 513:/usr/lib/avr/include/avr/wdt.h **** 	{
 514:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 515:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1537               		.loc 3 515 0
 1538               	/* #APP */
 1539               	 ;  515 "/usr/lib/avr/include/avr/wdt.h" 1
 1540 0018 0FB6      		in __tmp_reg__,__SREG__
 1541 001a F894      		cli
 1542 001c A895      		wdr
 1543 001e 9091 6000 		lds r25,96
 1544 0022 9861      		ori r25,24
 1545 0024 9093 6000 		sts 96,r25
 1546 0028 1092 6000 		sts 96,__zero_reg__
 1547 002c 0FBE      		out __SREG__,__tmp_reg__
 1548               		
 1549               	 ;  0 "" 2
 1550               	.LVL123:
 1551               	/* #NOAPP */
 1552               	.LBE180:
 1553               	.LBE179:
 1554               	.LBB181:
 163:Caterina.c    **** 	{
 1555               		.loc 1 163 0
 1556 002e E0E0      		ldi r30,0
 1557 0030 F0E0      		ldi r31,0
 1558               	/* #APP */
 1559               	 ;  163 "Caterina.c" 1
 1560 0032 4591      		lpm r20, Z+
 1561 0034 5491      		lpm r21, Z
 1562               		
 1563               	 ;  0 "" 2
 1564               	.LVL124:
 1565               	/* #NOAPP */
 1566               	.LBE181:
 1567 0036 4F3F      		cpi r20,-1
 1568 0038 5F4F      		sbci r21,-1
 1569 003a 01F0      		breq .L140
 167:Caterina.c    **** 		{
 1570               		.loc 1 167 0
 1571 003c 80FF      		sbrs r24,0
 1572 003e 00C0      		rjmp .L141
 171:Caterina.c    **** 			StartSketch();
 1573               		.loc 1 171 0
 1574 0040 84B7      		in r24,0x34
 1575               	.LVL125:
 1576 0042 8B7F      		andi r24,lo8(-5)
 1577 0044 84BF      		out 0x34,r24
 1578 0046 00C0      		rjmp .L143
 1579               	.LVL126:
 1580               	.L141:
 174:Caterina.c    **** 		{
 1581               		.loc 1 174 0
 1582 0048 81FF      		sbrs r24,1
 1583 004a 00C0      		rjmp .L142
 177:Caterina.c    **** 			{
 1584               		.loc 1 177 0
 1585 004c 2737      		cpi r18,119
 1586 004e 3747      		sbci r19,119
 1587               	.LVL127:
 1588 0050 01F0      		breq .L140
 181:Caterina.c    **** 				_delay_ms(750);
 1589               		.loc 1 181 0
 1590 0052 87E7      		ldi r24,lo8(119)
 1591 0054 97E7      		ldi r25,lo8(119)
 1592 0056 9093 0108 		sts 2048+1,r25
 1593 005a 8093 0008 		sts 2048,r24
 1594               	.LVL128:
 1595               	.LBB182:
 1596               	.LBB183:
 1597               		.file 4 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1598               		.loc 4 187 0
 1599 005e 9FE7      		ldi r25,lo8(1199999)
 1600 0060 2FE4      		ldi r18,hi8(1199999)
 1601 0062 82E1      		ldi r24,hlo8(1199999)
 1602 0064 9150      	1:	subi r25,1
 1603 0066 2040      		sbci r18,0
 1604 0068 8040      		sbci r24,0
 1605 006a 01F4      		brne 1b
 1606               	.LVL129:
 1607 006c 00C0      		rjmp .
 1608 006e 0000      		nop
 1609               	.LVL130:
 1610               	.LBE183:
 1611               	.LBE182:
 183:Caterina.c    **** 				StartSketch();
 1612               		.loc 1 183 0
 1613 0070 1092 0108 		sts 2048+1,__zero_reg__
 1614 0074 1092 0008 		sts 2048,__zero_reg__
 1615 0078 00C0      		rjmp .L143
 1616               	.LVL131:
 1617               	.L142:
 191:Caterina.c    **** 		{
 1618               		.loc 1 191 0
 1619 007a 83FF      		sbrs r24,3
 1620 007c 00C0      		rjmp .L143
 191:Caterina.c    **** 		{
 1621               		.loc 1 191 0 is_stmt 0 discriminator 1
 1622 007e 2737      		cpi r18,119
 1623 0080 3747      		sbci r19,119
 1624 0082 01F0      		breq .L140
 1625               	.LVL132:
 1626               	.L143:
 198:Caterina.c    **** 		}
 1627               		.loc 1 198 0 is_stmt 1
 1628 0084 0E94 0000 		call StartSketch
 1629               	.LVL133:
 1630               	.L140:
 203:Caterina.c    **** 	
 1631               		.loc 1 203 0
 1632 0088 14BE      		out 0x34,__zero_reg__
 206:Caterina.c    **** 
 1633               		.loc 1 206 0
 1634 008a 0E94 0000 		call SetupHardware
 1635               	.LVL134:
 209:Caterina.c    **** 	
 1636               		.loc 1 209 0
 1637               	/* #APP */
 1638               	 ;  209 "Caterina.c" 1
 1639 008e 7894      		sei
 1640               	 ;  0 "" 2
 211:Caterina.c    **** 	
 1641               		.loc 1 211 0
 1642               	/* #NOAPP */
 1643 0090 1092 0000 		sts Timeout+1,__zero_reg__
 1644 0094 1092 0000 		sts Timeout,__zero_reg__
 1645               	.L144:
 213:Caterina.c    **** 	{
 1646               		.loc 1 213 0
 1647 0098 8091 0000 		lds r24,RunBootloader
 1648 009c 8823      		tst r24
 1649 009e 01F0      		breq .L159
 215:Caterina.c    **** 		USB_USBTask();
 1650               		.loc 1 215 0
 1651 00a0 0E94 0000 		call CDC_Task
 1652               	.LVL135:
 216:Caterina.c    **** 		/* Time out and start the sketch if one is present */
 1653               		.loc 1 216 0
 1654 00a4 0E94 0000 		call USB_USBTask
 1655               	.LVL136:
 218:Caterina.c    **** 			RunBootloader = false;
 1656               		.loc 1 218 0
 1657 00a8 8091 0000 		lds r24,Timeout
 1658 00ac 9091 0000 		lds r25,Timeout+1
 1659 00b0 8134      		cpi r24,65
 1660 00b2 9F41      		sbci r25,31
 1661 00b4 00F0      		brlo .L145
 219:Caterina.c    **** 
 1662               		.loc 1 219 0
 1663 00b6 1092 0000 		sts RunBootloader,__zero_reg__
 1664               	.L145:
 221:Caterina.c    **** 	}
 1665               		.loc 1 221 0
 1666 00ba 0E94 0000 		call LEDPulse
 1667               	.LVL137:
 1668 00be 00C0      		rjmp .L144
 1669               	.L159:
 1670               	.LBB184:
 1671               	.LBB185:
 1672               		.file 5 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \copydetails Group_USBManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \ingroup Group_USBManagement
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \defgroup Group_USBManagement_AVR8 USB Interface Management (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  @{
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #ifndef __USBCONTROLLER_AVR8_H__
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #define __USBCONTROLLER_AVR8_H__
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Includes: */
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBMode.h"
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../Events.h"
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBTask.h"
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBInterrupt.h"
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Host.h"
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../OTG.h"
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Pipe.h"
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../HostStandardReq.h"
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../PipeStream.h"
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Device.h"
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Endpoint.h"
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../DeviceStandardReq.h"
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../EndpointStream.h"
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(__cplusplus)
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			extern "C" {
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Preprocessor Checks and Defines: */
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(F_USB)
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error F_USB is not defined. You must define F_USB to the frequency of the unprescaled USB contr
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if (F_USB == 8000000)
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#elif (F_USB == 16000000)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(USB_PLL_PSC)
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error No PLL prescale value available for chosen F_USB value and AVR model.
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Macros: */
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** \name USB Controller Option Masks */
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@{
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be enabled to regulate the data pin voltages from the VBUS level down to a 
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the range allowable by the USB standard.
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@}
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Determines if the VBUS line is currently high (i.e. the USB host is supplying power).
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void)
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void)
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  |=  (1 << DETACH);
 1673               		.loc 5 182 0
 1674 00c0 8091 E000 		lds r24,224
 1675 00c4 8160      		ori r24,lo8(1)
 1676 00c6 8093 E000 		sts 224,r24
 1677               	.LBE185:
 1678               	.LBE184:
 228:Caterina.c    **** }
 1679               		.loc 1 228 0
 1680 00ca 0E94 0000 		call StartSketch
 1681               	.LVL138:
 229:Caterina.c    **** 
 1682               		.loc 1 229 0
 1683 00ce 80E0      		ldi r24,0
 1684 00d0 90E0      		ldi r25,0
 1685 00d2 0895      		ret
 1686               		.cfi_endproc
 1687               	.LFE101:
 1689               		.comm	LLEDPulse,2,1
 1690               	.global	bootKeyPtr
 1691               		.section	.rodata
 1694               	bootKeyPtr:
 1695 0000 0008      		.word	2048
 1696               	.global	Timeout
 1697               		.section .bss
 1700               	Timeout:
 1701 0000 0000      		.zero	2
 1702               	.global	RxLEDPulse
 1705               	RxLEDPulse:
 1706 0002 0000      		.zero	2
 1707               	.global	TxLEDPulse
 1710               	TxLEDPulse:
 1711 0004 0000      		.zero	2
 1712               		.data
 1715               	RunBootloader:
 1716 0000 01        		.byte	1
 1717               		.local	CurrAddress
 1718               		.comm	CurrAddress,4,1
 1721               	LineEncoding:
 1722 0001 00        		.byte	0
 1723 0002 00        		.byte	0
 1724 0003 00        		.byte	0
 1725 0004 00        		.byte	0
 1726 0005 00        		.byte	0
 1727 0006 00        		.byte	0
 1728 0007 08        		.byte	8
 1729               		.text
 1730               	.Letext0:
 1731               		.file 6 "/usr/lib/avr/include/stdint.h"
 1732               		.file 7 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1733               		.file 8 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1734               		.file 9 "../../LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1735               		.file 10 "../../LUFA-111009/LUFA/Drivers/USB/Core/USBTask.h"
 1736               		.file 11 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1737               		.file 12 "/usr/lib/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Caterina.c
     /tmp/cc3Mu7H9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc3Mu7H9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc3Mu7H9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc3Mu7H9.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc3Mu7H9.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc3Mu7H9.s:12     .text.FetchNextCommandByte:0000000000000000 FetchNextCommandByte
     /tmp/cc3Mu7H9.s:78     .text.WriteNextResponseByte:0000000000000000 WriteNextResponseByte
     /tmp/cc3Mu7H9.s:1710   .bss:0000000000000004 TxLEDPulse
     /tmp/cc3Mu7H9.s:154    .text.StartSketch:0000000000000000 StartSketch
     /tmp/cc3Mu7H9.s:200    .text.LEDPulse:0000000000000000 LEDPulse
                            *COM*:0000000000000002 LLEDPulse
     /tmp/cc3Mu7H9.s:247    .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/cc3Mu7H9.s:296    .text.__vector_17:0000000000000000 __vector_17
     /tmp/cc3Mu7H9.s:1705   .bss:0000000000000002 RxLEDPulse
     /tmp/cc3Mu7H9.s:1700   .bss:0000000000000000 Timeout
     /tmp/cc3Mu7H9.s:409    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/cc3Mu7H9.s:452    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/cc3Mu7H9.s:1721   .data:0000000000000001 LineEncoding
     /tmp/cc3Mu7H9.s:537    .text.CDC_Task:0000000000000000 CDC_Task
                             .bss:0000000000000006 CurrAddress
     /tmp/cc3Mu7H9.s:1512   .text.startup.main:0000000000000000 main
     /tmp/cc3Mu7H9.s:1715   .data:0000000000000000 RunBootloader
     /tmp/cc3Mu7H9.s:1694   .rodata:0000000000000000 bootKeyPtr
     /tmp/cc3Mu7H9.s:532    .rodata.str1.1:0000000000000000 .LC0

UNDEFINED SYMBOLS
USB_Init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
eeprom_read_byte
eeprom_write_byte
USB_USBTask
__do_copy_data
__do_clear_bss
