   1               		.file	"Caterina.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.FetchNextCommandByte,"ax",@progbits
  12               	FetchNextCommandByte:
  13               	.LFB107:
  14               		.file 1 "Caterina.c"
   1:Caterina.c    **** /*
   2:Caterina.c    ****              LUFA Library
   3:Caterina.c    ****      Copyright (C) Dean Camera, 2011.
   4:Caterina.c    **** 
   5:Caterina.c    ****   dean [at] fourwalledcubicle [dot] com
   6:Caterina.c    ****            www.lufa-lib.org
   7:Caterina.c    **** */
   8:Caterina.c    **** 
   9:Caterina.c    **** /*
  10:Caterina.c    ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Caterina.c    **** 
  12:Caterina.c    ****   Permission to use, copy, modify, distribute, and sell this
  13:Caterina.c    ****   software and its documentation for any purpose is hereby granted
  14:Caterina.c    ****   without fee, provided that the above copyright notice appear in
  15:Caterina.c    ****   all copies and that both that the copyright notice and this
  16:Caterina.c    ****   permission notice and warranty disclaimer appear in supporting
  17:Caterina.c    ****   documentation, and that the name of the author not be used in
  18:Caterina.c    ****   advertising or publicity pertaining to distribution of the
  19:Caterina.c    ****   software without specific, written prior permission.
  20:Caterina.c    **** 
  21:Caterina.c    ****   The author disclaim all warranties with regard to this
  22:Caterina.c    ****   software, including all implied warranties of merchantability
  23:Caterina.c    ****   and fitness.  In no event shall the author be liable for any
  24:Caterina.c    ****   special, indirect or consequential damages or any damages
  25:Caterina.c    ****   whatsoever resulting from loss of use, data or profits, whether
  26:Caterina.c    ****   in an action of contract, negligence or other tortious action,
  27:Caterina.c    ****   arising out of or in connection with the use or performance of
  28:Caterina.c    ****   this software.
  29:Caterina.c    **** */
  30:Caterina.c    **** 
  31:Caterina.c    **** /*
  32:Caterina.c    **** Copyright (c) 2014 Pololu Corporation.  For more information, see
  33:Caterina.c    **** 
  34:Caterina.c    **** http://www.pololu.com/
  35:Caterina.c    **** http://forum.pololu.com/
  36:Caterina.c    **** 
  37:Caterina.c    **** Permission is hereby granted, free of charge, to any person
  38:Caterina.c    **** obtaining a copy of this software and associated documentation
  39:Caterina.c    **** files (the "Software"), to deal in the Software without
  40:Caterina.c    **** restriction, including without limitation the rights to use,
  41:Caterina.c    **** copy, modify, merge, publish, distribute, sublicense, and/or sell
  42:Caterina.c    **** copies of the Software, and to permit persons to whom the
  43:Caterina.c    **** Software is furnished to do so, subject to the following
  44:Caterina.c    **** conditions:
  45:Caterina.c    **** 
  46:Caterina.c    **** The above copyright notice and this permission notice shall be
  47:Caterina.c    **** included in all copies or substantial portions of the Software.
  48:Caterina.c    **** 
  49:Caterina.c    **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  50:Caterina.c    **** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  51:Caterina.c    **** OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  52:Caterina.c    **** NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  53:Caterina.c    **** HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  54:Caterina.c    **** WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  55:Caterina.c    **** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  56:Caterina.c    **** OTHER DEALINGS IN THE SOFTWARE.
  57:Caterina.c    **** */
  58:Caterina.c    **** 
  59:Caterina.c    **** /*
  60:Caterina.c    **** File modified by Jaap de Dood to remain in Bootloader while 3DoT power switch is in "Program" Posit
  61:Caterina.c    **** */
  62:Caterina.c    **** 
  63:Caterina.c    **** /** \file
  64:Caterina.c    ****  *
  65:Caterina.c    ****  *  Main source file for the CDC class bootloader. This file contains the complete bootloader logic
  66:Caterina.c    ****  */
  67:Caterina.c    **** 
  68:Caterina.c    **** #define  INCLUDE_FROM_CATERINA_C
  69:Caterina.c    **** #include "Caterina.h"
  70:Caterina.c    **** #include <util/delay.h> // for _delay_ms()
  71:Caterina.c    **** 
  72:Caterina.c    **** /** Contains the current baud rate and other settings of the first virtual serial port. This must b
  73:Caterina.c    ****  *  operating systems will not open the port unless the settings can be set successfully.
  74:Caterina.c    ****  */
  75:Caterina.c    **** static CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 0,
  76:Caterina.c    ****                                            .CharFormat  = CDC_LINEENCODING_OneStopBit,
  77:Caterina.c    ****                                            .ParityType  = CDC_PARITY_None,
  78:Caterina.c    ****                                            .DataBits    = 8                            };
  79:Caterina.c    **** 
  80:Caterina.c    **** /** Current address counter. This stores the current address of the FLASH or EEPROM as set by the h
  81:Caterina.c    ****  *  and is used when reading or writing to the AVRs memory (either FLASH or EEPROM depending on the
  82:Caterina.c    ****  *  command.)
  83:Caterina.c    ****  */
  84:Caterina.c    **** static uint32_t CurrAddress;
  85:Caterina.c    **** 
  86:Caterina.c    **** /** Flag to indicate if the bootloader should be running, or should exit and allow the application 
  87:Caterina.c    ****  *  via a watchdog reset. When cleared the bootloader will exit, starting the watchdog and entering
  88:Caterina.c    ****  *  loop until the AVR restarts and the application runs.
  89:Caterina.c    ****  */
  90:Caterina.c    **** static bool RunBootloader = true;
  91:Caterina.c    **** 
  92:Caterina.c    **** /* Pulse generation counters to keep track of the time remaining for each pulse type */
  93:Caterina.c    **** #define TX_RX_LED_PULSE_PERIOD 100
  94:Caterina.c    **** uint16_t TxLEDPulse = 0; // time remaining for Tx LED pulse
  95:Caterina.c    **** uint16_t RxLEDPulse = 0; // time remaining for Rx LED pulse
  96:Caterina.c    **** 
  97:Caterina.c    **** /* Bootloader timeout timer */
  98:Caterina.c    **** #define TIMEOUT_PERIOD	488
  99:Caterina.c    **** uint16_t Timeout = 0;
 100:Caterina.c    **** 
 101:Caterina.c    **** void StartSketch(void)
 102:Caterina.c    **** {
 103:Caterina.c    ****     cli();
 104:Caterina.c    **** 
 105:Caterina.c    ****     /* Undo TIMER1 setup and clear the count before running the sketch */
 106:Caterina.c    ****     TIMSK1 = 0;
 107:Caterina.c    ****     TCCR1B = 0;
 108:Caterina.c    ****     TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 109:Caterina.c    ****     TCNT1L = 0;
 110:Caterina.c    **** 
 111:Caterina.c    ****     /* Relocate the interrupt vector table to the application section */
 112:Caterina.c    ****     MCUCR = (1 << IVCE);
 113:Caterina.c    ****     MCUCR = 0;
 114:Caterina.c    **** 
 115:Caterina.c    ****     L_LED_OFF();
 116:Caterina.c    ****     TX_LED_OFF();
 117:Caterina.c    ****     RX_LED_OFF();
 118:Caterina.c    **** 
 119:Caterina.c    ****     /* jump to beginning of application space */
 120:Caterina.c    ****     __asm__ volatile("jmp 0x0000");
 121:Caterina.c    **** }
 122:Caterina.c    **** 
 123:Caterina.c    **** /*	Breathing animation on L LED indicates bootloader is running */
 124:Caterina.c    **** uint16_t LLEDPulse;
 125:Caterina.c    **** void LEDPulse(void)
 126:Caterina.c    **** {
 127:Caterina.c    ****     LLEDPulse++;
 128:Caterina.c    ****     uint8_t p = LLEDPulse >> 8;
 129:Caterina.c    ****     if (p > 127)
 130:Caterina.c    ****         p = 254-p;
 131:Caterina.c    ****     p += p;
 132:Caterina.c    ****     if (((uint8_t)LLEDPulse) > p)
 133:Caterina.c    ****         L_LED_OFF();
 134:Caterina.c    ****     else
 135:Caterina.c    ****         L_LED_ON();
 136:Caterina.c    **** }
 137:Caterina.c    **** 
 138:Caterina.c    **** /** Main program entry point. This routine configures the hardware required by the bootloader, then
 139:Caterina.c    ****  *  runs the bootloader processing routine until it times out or is instructed to exit.
 140:Caterina.c    ****  */
 141:Caterina.c    **** int main(void)
 142:Caterina.c    **** {
 143:Caterina.c    ****     //uint8_t  mcusr_state = MCUSR;							// store the initial state of the Status register
 144:Caterina.c    ****     //MCUSR &= ~(1 << WDRF);	// clear reset flags that are used by the bootloader
 145:Caterina.c    **** 
 146:Caterina.c    ****     //test
 147:Caterina.c    ****     MCUSR = 0;
 148:Caterina.c    ****     /* Watchdog may be configured with a 15 ms period so must disable it before going any further *
 149:Caterina.c    ****     wdt_disable();
 150:Caterina.c    **** 
 151:Caterina.c    ****     /* Initialize BootMode switch pin*/
 152:Caterina.c    ****     BootMode_Init();
 153:Caterina.c    ****     _delay_ms(10);    // allow time for caps to charge
 154:Caterina.c    **** 
 155:Caterina.c    ****     if ((isBootMode() || (pgm_read_word(0) == 0xFFFF)))
 156:Caterina.c    ****     {
 157:Caterina.c    ****         // Switch is in Boot mode position or there is no sketch
 158:Caterina.c    **** 
 159:Caterina.c    ****         // Clear remaining reset flags so the sketch doesn't see info about an old reset when it ru
 160:Caterina.c    ****         //MCUSR = 0;
 161:Caterina.c    **** 
 162:Caterina.c    ****         /* Setup hardware required for the bootloader */
 163:Caterina.c    ****         SetupHardware();
 164:Caterina.c    **** 
 165:Caterina.c    ****         /* Enable global interrupts so that the USB stack can function */
 166:Caterina.c    ****         sei();
 167:Caterina.c    **** 
 168:Caterina.c    ****         while(isBootMode()){
 169:Caterina.c    ****             CDC_Task();
 170:Caterina.c    ****             USB_USBTask();
 171:Caterina.c    ****             if (Timeout > TIMEOUT_PERIOD)
 172:Caterina.c    ****             RunBootloader = false;
 173:Caterina.c    **** 
 174:Caterina.c    ****             LEDPulse();
 175:Caterina.c    ****         }
 176:Caterina.c    ****     }
 177:Caterina.c    **** /* Disconnect from the host - USB interface will be reset later along with the AVR */
 178:Caterina.c    ****     USB_Detach();
 179:Caterina.c    **** 
 180:Caterina.c    **** /* Jump to beginning of application space to run the sketch - do not reset */
 181:Caterina.c    ****      StartSketch();
 182:Caterina.c    **** }
 183:Caterina.c    **** 
 184:Caterina.c    **** /** Configures all hardware re
 185:Caterina.c    ****     quired for the bootloader. */
 186:Caterina.c    **** void SetupHardware(void)
 187:Caterina.c    **** {
 188:Caterina.c    ****     /* Disable clock division */
 189:Caterina.c    ****     //clock_prescale_set(clock_div_1); // redundant
 190:Caterina.c    ****     CPU_PRESCALE(0);
 191:Caterina.c    **** 
 192:Caterina.c    ****     /* Relocate the interrupt vector table to the bootloader section */
 193:Caterina.c    ****     MCUCR = (1 << IVCE);
 194:Caterina.c    ****     MCUCR = (1 << IVSEL);
 195:Caterina.c    **** 
 196:Caterina.c    ****     LED_SETUP();
 197:Caterina.c    ****     L_LED_OFF();
 198:Caterina.c    ****     TX_LED_OFF();
 199:Caterina.c    ****     RX_LED_OFF();
 200:Caterina.c    **** 
 201:Caterina.c    ****     /* Initialize TIMER1 to handle bootloader timeout and LED tasks.
 202:Caterina.c    ****      * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
 203:Caterina.c    ****      * Our chosen compare match generates an interrupt every 1 ms.
 204:Caterina.c    ****      * This interrupt is disabled selectively when doing memory reading, erasing,
 205:Caterina.c    ****      * or writing since SPM has tight timing requirements.
 206:Caterina.c    ****      */
 207:Caterina.c    ****     OCR1AH = 0;
 208:Caterina.c    ****     OCR1AL = 250;
 209:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 210:Caterina.c    ****     TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 211:Caterina.c    **** 
 212:Caterina.c    ****     /* Initialize USB Subsystem */
 213:Caterina.c    ****     USB_Init();
 214:Caterina.c    **** }
 215:Caterina.c    **** 
 216:Caterina.c    **** //uint16_t ctr = 0;
 217:Caterina.c    **** ISR(TIMER1_COMPA_vect, ISR_BLOCK)
 218:Caterina.c    **** {
 219:Caterina.c    ****     /* Reset counter */
 220:Caterina.c    ****     TCNT1H = 0;
 221:Caterina.c    ****     TCNT1L = 0;
 222:Caterina.c    **** 
 223:Caterina.c    ****     /* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
 224:Caterina.c    ****     if (TxLEDPulse && !(--TxLEDPulse))
 225:Caterina.c    ****         TX_LED_OFF();
 226:Caterina.c    ****     if (RxLEDPulse && !(--RxLEDPulse))
 227:Caterina.c    ****         RX_LED_OFF();
 228:Caterina.c    **** 
 229:Caterina.c    ****     if (pgm_read_word(0) != 0xFFFF)
 230:Caterina.c    ****         Timeout++;
 231:Caterina.c    **** }
 232:Caterina.c    **** 
 233:Caterina.c    **** /** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints re
 234:Caterina.c    ****  *  to relay data to and from the attached USB host.
 235:Caterina.c    ****  */
 236:Caterina.c    **** void EVENT_USB_Device_ConfigurationChanged(void)
 237:Caterina.c    **** {
 238:Caterina.c    ****     /* Setup CDC Notification, Rx and Tx Endpoints */
 239:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
 240:Caterina.c    ****                                ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
 241:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 242:Caterina.c    **** 
 243:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
 244:Caterina.c    ****                                ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
 245:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 246:Caterina.c    **** 
 247:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
 248:Caterina.c    ****                                ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
 249:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 250:Caterina.c    **** }
 251:Caterina.c    **** 
 252:Caterina.c    **** /** Event handler for the USB_ControlRequest event. This is used to catch and process control reque
 253:Caterina.c    ****  *  the device from the USB host before passing along unhandled control requests to the library for
 254:Caterina.c    ****  *  internally.
 255:Caterina.c    ****  */
 256:Caterina.c    **** void EVENT_USB_Device_ControlRequest(void)
 257:Caterina.c    **** {
 258:Caterina.c    ****     /* Ignore any requests that aren't directed to the CDC interface */
 259:Caterina.c    ****     if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 260:Caterina.c    ****         (REQTYPE_CLASS | REQREC_INTERFACE))
 261:Caterina.c    ****     {
 262:Caterina.c    ****         return;
 263:Caterina.c    ****     }
 264:Caterina.c    **** 
 265:Caterina.c    ****     /* Process CDC specific control requests */
 266:Caterina.c    ****     switch (USB_ControlRequest.bRequest)
 267:Caterina.c    ****     {
 268:Caterina.c    ****         case CDC_REQ_GetLineEncoding:
 269:Caterina.c    ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 270:Caterina.c    ****             {
 271:Caterina.c    ****                 Endpoint_ClearSETUP();
 272:Caterina.c    **** 
 273:Caterina.c    ****                 /* Write the line coding data to the control endpoint */
 274:Caterina.c    ****                 Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 275:Caterina.c    ****                 Endpoint_ClearOUT();
 276:Caterina.c    ****             }
 277:Caterina.c    **** 
 278:Caterina.c    ****             break;
 279:Caterina.c    ****         case CDC_REQ_SetLineEncoding:
 280:Caterina.c    ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 281:Caterina.c    ****             {
 282:Caterina.c    ****                 Endpoint_ClearSETUP();
 283:Caterina.c    **** 
 284:Caterina.c    ****                 /* Read the line coding data in from the host into the global struct */
 285:Caterina.c    ****                 Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 286:Caterina.c    ****                 Endpoint_ClearIN();
 287:Caterina.c    ****             }
 288:Caterina.c    **** 
 289:Caterina.c    ****             break;
 290:Caterina.c    ****     }
 291:Caterina.c    **** }
 292:Caterina.c    **** 
 293:Caterina.c    **** #if !defined(NO_BLOCK_SUPPORT)
 294:Caterina.c    **** /** Reads or writes a block of EEPROM or FLASH memory to or from the appropriate CDC data endpoint,
 295:Caterina.c    ****  *  on the AVR910 protocol command issued.
 296:Caterina.c    ****  *
 297:Caterina.c    ****  *  \param[in] Command  Single character AVR910 protocol command indicating what memory operation t
 298:Caterina.c    ****  */
 299:Caterina.c    **** static void ReadWriteMemoryBlock(const uint8_t Command)
 300:Caterina.c    **** {
 301:Caterina.c    ****     uint16_t BlockSize;
 302:Caterina.c    ****     char     MemoryType;
 303:Caterina.c    **** 
 304:Caterina.c    ****     bool     HighByte = false;
 305:Caterina.c    ****     uint8_t  LowByte  = 0;
 306:Caterina.c    **** 
 307:Caterina.c    ****     BlockSize  = (FetchNextCommandByte() << 8);
 308:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 309:Caterina.c    **** 
 310:Caterina.c    ****     MemoryType =  FetchNextCommandByte();
 311:Caterina.c    **** 
 312:Caterina.c    ****     if ((MemoryType != 'E') && (MemoryType != 'F'))
 313:Caterina.c    ****     {
 314:Caterina.c    ****         /* Send error byte back to the host */
 315:Caterina.c    ****         WriteNextResponseByte('?');
 316:Caterina.c    **** 
 317:Caterina.c    ****         return;
 318:Caterina.c    ****     }
 319:Caterina.c    **** 
 320:Caterina.c    ****     /* Disable timer 1 interrupt - can't afford to process nonessential interrupts
 321:Caterina.c    ****      * while doing SPM tasks */
 322:Caterina.c    ****     TIMSK1 = 0;
 323:Caterina.c    **** 
 324:Caterina.c    ****     /* Check if command is to read memory */
 325:Caterina.c    ****     if (Command == 'g')
 326:Caterina.c    ****     {
 327:Caterina.c    ****         /* Re-enable RWW section */
 328:Caterina.c    ****         boot_rww_enable();
 329:Caterina.c    **** 
 330:Caterina.c    ****         while (BlockSize--)
 331:Caterina.c    ****         {
 332:Caterina.c    ****             if (MemoryType == 'F')
 333:Caterina.c    ****             {
 334:Caterina.c    ****                 /* Read the next FLASH byte from the current FLASH page */
 335:Caterina.c    ****                 #if (FLASHEND > 0xFFFF)
 336:Caterina.c    ****                 WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
 337:Caterina.c    ****                 #else
 338:Caterina.c    ****                 WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 339:Caterina.c    ****                 #endif
 340:Caterina.c    **** 
 341:Caterina.c    ****                 /* If both bytes in current word have been read, increment the address counter */
 342:Caterina.c    ****                 if (HighByte)
 343:Caterina.c    ****                   CurrAddress += 2;
 344:Caterina.c    **** 
 345:Caterina.c    ****                 HighByte = !HighByte;
 346:Caterina.c    ****             }
 347:Caterina.c    ****             else
 348:Caterina.c    ****             {
 349:Caterina.c    ****                 /* Read the next EEPROM byte into the endpoint */
 350:Caterina.c    ****                 WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 351:Caterina.c    **** 
 352:Caterina.c    ****                 /* Increment the address counter after use */
 353:Caterina.c    ****                 CurrAddress += 2;
 354:Caterina.c    ****             }
 355:Caterina.c    ****         }
 356:Caterina.c    ****     }
 357:Caterina.c    ****     else
 358:Caterina.c    ****     {
 359:Caterina.c    ****         uint32_t PageStartAddress = CurrAddress;
 360:Caterina.c    **** 
 361:Caterina.c    ****         if (MemoryType == 'F')
 362:Caterina.c    ****         {
 363:Caterina.c    ****             boot_page_erase(PageStartAddress);
 364:Caterina.c    ****             boot_spm_busy_wait();
 365:Caterina.c    ****         }
 366:Caterina.c    **** 
 367:Caterina.c    ****         while (BlockSize--)
 368:Caterina.c    ****         {
 369:Caterina.c    ****             if (MemoryType == 'F')
 370:Caterina.c    ****             {
 371:Caterina.c    ****                 /* If both bytes in current word have been written, increment the address counter *
 372:Caterina.c    ****                 if (HighByte)
 373:Caterina.c    ****                 {
 374:Caterina.c    ****                     /* Write the next FLASH word to the current FLASH page */
 375:Caterina.c    ****                     boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 376:Caterina.c    **** 
 377:Caterina.c    ****                     /* Increment the address counter after use */
 378:Caterina.c    ****                     CurrAddress += 2;
 379:Caterina.c    ****                 }
 380:Caterina.c    ****                 else
 381:Caterina.c    ****                 {
 382:Caterina.c    ****                     LowByte = FetchNextCommandByte();
 383:Caterina.c    ****                 }
 384:Caterina.c    **** 
 385:Caterina.c    ****                 HighByte = !HighByte;
 386:Caterina.c    ****             }
 387:Caterina.c    ****             else
 388:Caterina.c    ****             {
 389:Caterina.c    ****                 /* Write the next EEPROM byte from the endpoint */
 390:Caterina.c    ****                 eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte())
 391:Caterina.c    **** 
 392:Caterina.c    ****                 /* Increment the address counter after use */
 393:Caterina.c    ****                 CurrAddress += 2;
 394:Caterina.c    ****             }
 395:Caterina.c    ****         }
 396:Caterina.c    **** 
 397:Caterina.c    ****         /* If in FLASH programming mode, commit the page after writing */
 398:Caterina.c    ****         if (MemoryType == 'F')
 399:Caterina.c    ****         {
 400:Caterina.c    ****             /* Commit the flash page to memory */
 401:Caterina.c    ****             boot_page_write(PageStartAddress);
 402:Caterina.c    **** 
 403:Caterina.c    ****             /* Wait until write operation has completed */
 404:Caterina.c    ****             boot_spm_busy_wait();
 405:Caterina.c    ****         }
 406:Caterina.c    **** 
 407:Caterina.c    ****         /* Send response byte back to the host */
 408:Caterina.c    ****         WriteNextResponseByte('\r');
 409:Caterina.c    ****     }
 410:Caterina.c    **** 
 411:Caterina.c    ****     /* Re-enable timer 1 interrupt disabled earlier in this routine */
 412:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);
 413:Caterina.c    **** }
 414:Caterina.c    **** #endif
 415:Caterina.c    **** 
 416:Caterina.c    **** /** Retrieves the next byte from the host in the CDC data OUT endpoint, and clears the endpoint ban
 417:Caterina.c    ****  *  to allow reception of the next data packet from the host.
 418:Caterina.c    ****  *
 419:Caterina.c    ****  *  \return Next received byte from the host in the CDC data OUT endpoint
 420:Caterina.c    ****  */
 421:Caterina.c    **** static uint8_t FetchNextCommandByte(void)
 422:Caterina.c    **** {
  15               		.loc 1 422 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.LBB80:
  23               	.LBB81:
  24               		.file 2 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  25               		.loc 2 330 0
  26 0000 84E0      		ldi r24,lo8(4)
  27 0002 8093 E900 		sts 233,r24
  28               	.L2:
  29               	.LBE81:
  30               	.LBE80:
  31               	.LBB82:
  32               	.LBB83:
 331:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  33               		.loc 2 420 0
  34 0006 8091 E800 		lds r24,232
  35               	.LBE83:
  36               	.LBE82:
 423:Caterina.c    ****     /* Select the OUT endpoint so that the next data byte can be read */
 424:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 425:Caterina.c    **** 
 426:Caterina.c    ****     /* If OUT endpoint empty, clear it and wait for the next packet from the host */
 427:Caterina.c    ****     while (!(Endpoint_IsReadWriteAllowed()))
  37               		.loc 1 427 0
  38 000a 85FD      		sbrc r24,5
  39 000c 00C0      		rjmp .L11
  40               	.LBB84:
  41               	.LBB85:
 421:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  42               		.loc 2 531 0
  43 000e 8091 E800 		lds r24,232
  44 0012 8B77      		andi r24,lo8(123)
  45 0014 8093 E800 		sts 232,r24
  46               	.L3:
  47               	.LBE85:
  48               	.LBE84:
  49               	.LBB86:
  50               	.LBB87:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  51               		.loc 2 479 0
  52 0018 8091 E800 		lds r24,232
  53               	.LBE87:
  54               	.LBE86:
 428:Caterina.c    ****     {
 429:Caterina.c    ****         Endpoint_ClearOUT();
 430:Caterina.c    **** 
 431:Caterina.c    ****         while (!(Endpoint_IsOUTReceived()))
  55               		.loc 1 431 0
  56 001c 82FD      		sbrc r24,2
  57 001e 00C0      		rjmp .L2
 432:Caterina.c    ****         {
 433:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
  58               		.loc 1 433 0
  59 0020 8EB3      		in r24,0x1e
  60 0022 8111      		cpse r24,__zero_reg__
  61 0024 00C0      		rjmp .L3
  62 0026 00C0      		rjmp .L4
  63               	.L11:
  64               	.LBB88:
  65               	.LBB89:
 532:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  66               		.loc 2 612 0
  67 0028 8091 F100 		lds r24,241
  68               	.L4:
  69               	.LBE89:
  70               	.LBE88:
 434:Caterina.c    ****               return 0;
 435:Caterina.c    ****         }
 436:Caterina.c    ****     }
 437:Caterina.c    **** 
 438:Caterina.c    ****     /* Fetch the next byte from the OUT endpoint */
 439:Caterina.c    ****     return Endpoint_Read_8();
 440:Caterina.c    **** }
  71               		.loc 1 440 0
  72 002c 0895      		ret
  73               		.cfi_endproc
  74               	.LFE107:
  76               		.section	.text.WriteNextResponseByte,"ax",@progbits
  78               	WriteNextResponseByte:
  79               	.LFB108:
 441:Caterina.c    **** 
 442:Caterina.c    **** /** Writes the next response byte to the CDC data IN endpoint, and sends the endpoint back if neede
 443:Caterina.c    ****  *  bank when full ready for the next byte in the packet to the host.
 444:Caterina.c    ****  *
 445:Caterina.c    ****  *  \param[in] Response  Next response byte to send to the host
 446:Caterina.c    ****  */
 447:Caterina.c    **** static void WriteNextResponseByte(const uint8_t Response)
 448:Caterina.c    **** {
  80               		.loc 1 448 0
  81               		.cfi_startproc
  82               	.LVL1:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  87               	.LBB90:
  88               	.LBB91:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
  89               		.loc 2 330 0
  90 0000 93E0      		ldi r25,lo8(3)
  91 0002 9093 E900 		sts 233,r25
  92               	.LBE91:
  93               	.LBE90:
  94               	.LBB92:
  95               	.LBB93:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  96               		.loc 2 420 0
  97 0006 9091 E800 		lds r25,232
  98               	.LBE93:
  99               	.LBE92:
 449:Caterina.c    ****     /* Select the IN endpoint so that the next data byte can be written */
 450:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 451:Caterina.c    **** 
 452:Caterina.c    ****     /* If IN endpoint full, clear it and wait until ready for the next packet to the host */
 453:Caterina.c    ****     if (!(Endpoint_IsReadWriteAllowed()))
 100               		.loc 1 453 0
 101 000a 95FF      		sbrs r25,5
 102 000c 00C0      		rjmp .L13
 103               	.L17:
 104               	.LVL2:
 105               	.LBB94:
 106               	.LBB95:
 613:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 107               		.loc 2 624 0
 108 000e 8093 F100 		sts 241,r24
 109               	.LBE95:
 110               	.LBE94:
 454:Caterina.c    ****     {
 455:Caterina.c    ****         Endpoint_ClearIN();
 456:Caterina.c    **** 
 457:Caterina.c    ****         while (!(Endpoint_IsINReady()))
 458:Caterina.c    ****         {
 459:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
 460:Caterina.c    ****               return;
 461:Caterina.c    ****         }
 462:Caterina.c    ****     }
 463:Caterina.c    **** 
 464:Caterina.c    ****     /* Write the next byte to the IN endpoint */
 465:Caterina.c    ****     Endpoint_Write_8(Response);
 466:Caterina.c    **** 
 467:Caterina.c    ****     TX_LED_ON();
 111               		.loc 1 467 0
 112 0012 5D98      		cbi 0xb,5
 468:Caterina.c    ****     TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 113               		.loc 1 468 0
 114 0014 84E6      		ldi r24,lo8(100)
 115 0016 90E0      		ldi r25,0
 116               	.LVL3:
 117 0018 9093 0000 		sts TxLEDPulse+1,r25
 118 001c 8093 0000 		sts TxLEDPulse,r24
 119               	.LVL4:
 120 0020 0895      		ret
 121               	.LVL5:
 122               	.L13:
 123               	.LBB96:
 124               	.LBB97:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 125               		.loc 2 516 0
 126 0022 9091 E800 		lds r25,232
 127 0026 9E77      		andi r25,lo8(126)
 128 0028 9093 E800 		sts 232,r25
 129               	.L15:
 130               	.LBE97:
 131               	.LBE96:
 132               	.LBB98:
 133               	.LBB99:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 134               		.loc 2 467 0
 135 002c 9091 E800 		lds r25,232
 136               	.LBE99:
 137               	.LBE98:
 457:Caterina.c    ****         {
 138               		.loc 1 457 0
 139 0030 90FD      		sbrc r25,0
 140 0032 00C0      		rjmp .L17
 459:Caterina.c    ****               return;
 141               		.loc 1 459 0
 142 0034 9EB3      		in r25,0x1e
 143 0036 9111      		cpse r25,__zero_reg__
 144 0038 00C0      		rjmp .L15
 145 003a 0895      		ret
 146               		.cfi_endproc
 147               	.LFE108:
 149               		.section	.text.StartSketch,"ax",@progbits
 150               	.global	StartSketch
 152               	StartSketch:
 153               	.LFB99:
 102:Caterina.c    ****     cli();
 154               		.loc 1 102 0
 155               		.cfi_startproc
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
 103:Caterina.c    **** 
 160               		.loc 1 103 0
 161               	/* #APP */
 162               	 ;  103 "Caterina.c" 1
 163 0000 F894      		cli
 164               	 ;  0 "" 2
 106:Caterina.c    ****     TCCR1B = 0;
 165               		.loc 1 106 0
 166               	/* #NOAPP */
 167 0002 1092 6F00 		sts 111,__zero_reg__
 107:Caterina.c    ****     TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 168               		.loc 1 107 0
 169 0006 1092 8100 		sts 129,__zero_reg__
 108:Caterina.c    ****     TCNT1L = 0;
 170               		.loc 1 108 0
 171 000a 1092 8500 		sts 133,__zero_reg__
 109:Caterina.c    **** 
 172               		.loc 1 109 0
 173 000e 1092 8400 		sts 132,__zero_reg__
 112:Caterina.c    ****     MCUCR = 0;
 174               		.loc 1 112 0
 175 0012 81E0      		ldi r24,lo8(1)
 176 0014 85BF      		out 0x35,r24
 113:Caterina.c    **** 
 177               		.loc 1 113 0
 178 0016 15BE      		out 0x35,__zero_reg__
 115:Caterina.c    ****     TX_LED_OFF();
 179               		.loc 1 115 0
 180 0018 4798      		cbi 0x8,7
 116:Caterina.c    ****     RX_LED_OFF();
 181               		.loc 1 116 0
 182 001a 5D9A      		sbi 0xb,5
 117:Caterina.c    **** 
 183               		.loc 1 117 0
 184 001c 289A      		sbi 0x5,0
 120:Caterina.c    **** }
 185               		.loc 1 120 0
 186               	/* #APP */
 187               	 ;  120 "Caterina.c" 1
 188 001e 0C94 0000 		jmp 0x0000
 189               	 ;  0 "" 2
 190               	/* #NOAPP */
 191 0022 0895      		ret
 192               		.cfi_endproc
 193               	.LFE99:
 195               		.section	.text.LEDPulse,"ax",@progbits
 196               	.global	LEDPulse
 198               	LEDPulse:
 199               	.LFB100:
 126:Caterina.c    ****     LLEDPulse++;
 200               		.loc 1 126 0
 201               		.cfi_startproc
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 0 */
 205               	.L__stack_usage = 0
 127:Caterina.c    ****     uint8_t p = LLEDPulse >> 8;
 206               		.loc 1 127 0
 207 0000 2091 0000 		lds r18,LLEDPulse
 208 0004 3091 0000 		lds r19,LLEDPulse+1
 209 0008 2F5F      		subi r18,-1
 210 000a 3F4F      		sbci r19,-1
 211 000c 3093 0000 		sts LLEDPulse+1,r19
 212 0010 2093 0000 		sts LLEDPulse,r18
 128:Caterina.c    ****     if (p > 127)
 213               		.loc 1 128 0
 214 0014 832F      		mov r24,r19
 215               	.LVL6:
 129:Caterina.c    ****         p = 254-p;
 216               		.loc 1 129 0
 217 0016 37FF      		sbrs r19,7
 218 0018 00C0      		rjmp .L23
 130:Caterina.c    ****     p += p;
 219               		.loc 1 130 0
 220 001a 8EEF      		ldi r24,lo8(-2)
 221 001c 831B      		sub r24,r19
 222               	.LVL7:
 223               	.L23:
 131:Caterina.c    ****     if (((uint8_t)LLEDPulse) > p)
 224               		.loc 1 131 0
 225 001e 880F      		lsl r24
 226               	.LVL8:
 132:Caterina.c    ****         L_LED_OFF();
 227               		.loc 1 132 0
 228 0020 8217      		cp r24,r18
 229 0022 00F4      		brsh .L24
 133:Caterina.c    ****     else
 230               		.loc 1 133 0
 231 0024 4798      		cbi 0x8,7
 232 0026 0895      		ret
 233               	.L24:
 135:Caterina.c    **** }
 234               		.loc 1 135 0
 235 0028 479A      		sbi 0x8,7
 236 002a 0895      		ret
 237               		.cfi_endproc
 238               	.LFE100:
 240               		.section	.text.SetupHardware,"ax",@progbits
 241               	.global	SetupHardware
 243               	SetupHardware:
 244               	.LFB102:
 187:Caterina.c    ****     /* Disable clock division */
 245               		.loc 1 187 0
 246               		.cfi_startproc
 247               	/* prologue: function */
 248               	/* frame size = 0 */
 249               	/* stack size = 0 */
 250               	.L__stack_usage = 0
 190:Caterina.c    **** 
 251               		.loc 1 190 0
 252 0000 E1E6      		ldi r30,lo8(97)
 253 0002 F0E0      		ldi r31,0
 254 0004 80E8      		ldi r24,lo8(-128)
 255 0006 8083      		st Z,r24
 256 0008 1082      		st Z,__zero_reg__
 193:Caterina.c    ****     MCUCR = (1 << IVSEL);
 257               		.loc 1 193 0
 258 000a 81E0      		ldi r24,lo8(1)
 259 000c 85BF      		out 0x35,r24
 194:Caterina.c    **** 
 260               		.loc 1 194 0
 261 000e 82E0      		ldi r24,lo8(2)
 262 0010 85BF      		out 0x35,r24
 196:Caterina.c    ****     L_LED_OFF();
 263               		.loc 1 196 0
 264 0012 3F9A      		sbi 0x7,7
 265 0014 209A      		sbi 0x4,0
 266 0016 559A      		sbi 0xa,5
 197:Caterina.c    ****     TX_LED_OFF();
 267               		.loc 1 197 0
 268 0018 4798      		cbi 0x8,7
 198:Caterina.c    ****     RX_LED_OFF();
 269               		.loc 1 198 0
 270 001a 5D9A      		sbi 0xb,5
 199:Caterina.c    **** 
 271               		.loc 1 199 0
 272 001c 289A      		sbi 0x5,0
 207:Caterina.c    ****     OCR1AL = 250;
 273               		.loc 1 207 0
 274 001e 1092 8900 		sts 137,__zero_reg__
 208:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 275               		.loc 1 208 0
 276 0022 9AEF      		ldi r25,lo8(-6)
 277 0024 9093 8800 		sts 136,r25
 209:Caterina.c    ****     TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 278               		.loc 1 209 0
 279 0028 8093 6F00 		sts 111,r24
 210:Caterina.c    **** 
 280               		.loc 1 210 0
 281 002c 83E0      		ldi r24,lo8(3)
 282 002e 8093 8100 		sts 129,r24
 213:Caterina.c    **** }
 283               		.loc 1 213 0
 284 0032 0C94 0000 		jmp USB_Init
 285               	.LVL9:
 286               		.cfi_endproc
 287               	.LFE102:
 289               		.section	.text.__vector_17,"ax",@progbits
 290               	.global	__vector_17
 292               	__vector_17:
 293               	.LFB103:
 218:Caterina.c    ****     /* Reset counter */
 294               		.loc 1 218 0
 295               		.cfi_startproc
 296 0000 1F92      		push r1
 297               	.LCFI0:
 298               		.cfi_def_cfa_offset 3
 299               		.cfi_offset 1, -2
 300 0002 0F92      		push r0
 301               	.LCFI1:
 302               		.cfi_def_cfa_offset 4
 303               		.cfi_offset 0, -3
 304 0004 0FB6      		in r0,__SREG__
 305 0006 0F92      		push r0
 306 0008 1124      		clr __zero_reg__
 307 000a 2F93      		push r18
 308               	.LCFI2:
 309               		.cfi_def_cfa_offset 5
 310               		.cfi_offset 18, -4
 311 000c 8F93      		push r24
 312               	.LCFI3:
 313               		.cfi_def_cfa_offset 6
 314               		.cfi_offset 24, -5
 315 000e 9F93      		push r25
 316               	.LCFI4:
 317               		.cfi_def_cfa_offset 7
 318               		.cfi_offset 25, -6
 319 0010 EF93      		push r30
 320               	.LCFI5:
 321               		.cfi_def_cfa_offset 8
 322               		.cfi_offset 30, -7
 323 0012 FF93      		push r31
 324               	.LCFI6:
 325               		.cfi_def_cfa_offset 9
 326               		.cfi_offset 31, -8
 327               	/* prologue: Signal */
 328               	/* frame size = 0 */
 329               	/* stack size = 8 */
 330               	.L__stack_usage = 8
 220:Caterina.c    ****     TCNT1L = 0;
 331               		.loc 1 220 0
 332 0014 1092 8500 		sts 133,__zero_reg__
 221:Caterina.c    **** 
 333               		.loc 1 221 0
 334 0018 1092 8400 		sts 132,__zero_reg__
 224:Caterina.c    ****         TX_LED_OFF();
 335               		.loc 1 224 0
 336 001c 8091 0000 		lds r24,TxLEDPulse
 337 0020 9091 0000 		lds r25,TxLEDPulse+1
 338 0024 0097      		sbiw r24,0
 339 0026 01F0      		breq .L29
 224:Caterina.c    ****         TX_LED_OFF();
 340               		.loc 1 224 0 is_stmt 0 discriminator 1
 341 0028 0197      		sbiw r24,1
 342 002a 9093 0000 		sts TxLEDPulse+1,r25
 343 002e 8093 0000 		sts TxLEDPulse,r24
 344 0032 892B      		or r24,r25
 345 0034 01F4      		brne .L29
 225:Caterina.c    ****     if (RxLEDPulse && !(--RxLEDPulse))
 346               		.loc 1 225 0 is_stmt 1
 347 0036 5D9A      		sbi 0xb,5
 348               	.L29:
 226:Caterina.c    ****         RX_LED_OFF();
 349               		.loc 1 226 0
 350 0038 8091 0000 		lds r24,RxLEDPulse
 351 003c 9091 0000 		lds r25,RxLEDPulse+1
 352 0040 0097      		sbiw r24,0
 353 0042 01F0      		breq .L32
 226:Caterina.c    ****         RX_LED_OFF();
 354               		.loc 1 226 0 is_stmt 0 discriminator 1
 355 0044 0197      		sbiw r24,1
 356 0046 9093 0000 		sts RxLEDPulse+1,r25
 357 004a 8093 0000 		sts RxLEDPulse,r24
 358 004e 892B      		or r24,r25
 359 0050 01F4      		brne .L32
 227:Caterina.c    **** 
 360               		.loc 1 227 0 is_stmt 1
 361 0052 289A      		sbi 0x5,0
 362               	.L32:
 363               	.LVL10:
 364               	.LBB100:
 229:Caterina.c    ****         Timeout++;
 365               		.loc 1 229 0
 366 0054 E0E0      		ldi r30,0
 367 0056 F0E0      		ldi r31,0
 368               	/* #APP */
 369               	 ;  229 "Caterina.c" 1
 370 0058 8591      		lpm r24, Z+
 371 005a 9491      		lpm r25, Z
 372               		
 373               	 ;  0 "" 2
 374               	.LVL11:
 375               	/* #NOAPP */
 376               	.LBE100:
 377 005c 0196      		adiw r24,1
 378 005e 01F0      		breq .L27
 230:Caterina.c    **** }
 379               		.loc 1 230 0
 380 0060 8091 0000 		lds r24,Timeout
 381 0064 9091 0000 		lds r25,Timeout+1
 382               	.LVL12:
 383 0068 0196      		adiw r24,1
 384 006a 9093 0000 		sts Timeout+1,r25
 385 006e 8093 0000 		sts Timeout,r24
 386               	.L27:
 387               	/* epilogue start */
 231:Caterina.c    **** 
 388               		.loc 1 231 0
 389 0072 FF91      		pop r31
 390 0074 EF91      		pop r30
 391 0076 9F91      		pop r25
 392 0078 8F91      		pop r24
 393 007a 2F91      		pop r18
 394 007c 0F90      		pop r0
 395 007e 0FBE      		out __SREG__,r0
 396 0080 0F90      		pop r0
 397 0082 1F90      		pop r1
 398 0084 1895      		reti
 399               		.cfi_endproc
 400               	.LFE103:
 402               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 403               	.global	EVENT_USB_Device_ConfigurationChanged
 405               	EVENT_USB_Device_ConfigurationChanged:
 406               	.LFB104:
 237:Caterina.c    ****     /* Setup CDC Notification, Rx and Tx Endpoints */
 407               		.loc 1 237 0
 408               		.cfi_startproc
 409               	/* prologue: function */
 410               	/* frame size = 0 */
 411               	/* stack size = 0 */
 412               	.L__stack_usage = 0
 413               	.LVL13:
 414               	.LBB101:
 415               	.LBB102:
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 416               		.loc 2 276 0
 417 0000 42E0      		ldi r20,lo8(2)
 418 0002 61EC      		ldi r22,lo8(-63)
 419 0004 82E0      		ldi r24,lo8(2)
 420 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 421               	.LVL14:
 422               	.LBE102:
 423               	.LBE101:
 424               	.LBB103:
 425               	.LBB104:
 426 000a 42E1      		ldi r20,lo8(18)
 427 000c 61E8      		ldi r22,lo8(-127)
 428 000e 83E0      		ldi r24,lo8(3)
 429 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 430               	.LVL15:
 431               	.LBE104:
 432               	.LBE103:
 433               	.LBB105:
 434               	.LBB106:
 435 0014 42E1      		ldi r20,lo8(18)
 436 0016 60E8      		ldi r22,lo8(-128)
 437 0018 84E0      		ldi r24,lo8(4)
 438 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 439               	.LVL16:
 440               	.LBE106:
 441               	.LBE105:
 442               		.cfi_endproc
 443               	.LFE104:
 445               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 446               	.global	EVENT_USB_Device_ControlRequest
 448               	EVENT_USB_Device_ControlRequest:
 449               	.LFB105:
 257:Caterina.c    ****     /* Ignore any requests that aren't directed to the CDC interface */
 450               		.loc 1 257 0
 451               		.cfi_startproc
 452               	/* prologue: function */
 453               	/* frame size = 0 */
 454               	/* stack size = 0 */
 455               	.L__stack_usage = 0
 259:Caterina.c    ****         (REQTYPE_CLASS | REQREC_INTERFACE))
 456               		.loc 1 259 0
 457 0000 8091 0000 		lds r24,USB_ControlRequest
 458 0004 982F      		mov r25,r24
 459 0006 9F77      		andi r25,lo8(127)
 460 0008 9132      		cpi r25,lo8(33)
 461 000a 01F4      		brne .L39
 266:Caterina.c    ****     {
 462               		.loc 1 266 0
 463 000c 9091 0000 		lds r25,USB_ControlRequest+1
 464 0010 9032      		cpi r25,lo8(32)
 465 0012 01F0      		breq .L41
 466 0014 9132      		cpi r25,lo8(33)
 467 0016 01F4      		brne .L39
 269:Caterina.c    ****             {
 468               		.loc 1 269 0
 469 0018 813A      		cpi r24,lo8(-95)
 470 001a 01F4      		brne .L39
 471               	.LBB107:
 472               	.LBB108:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 473               		.loc 2 504 0
 474 001c 8091 E800 		lds r24,232
 475 0020 877F      		andi r24,lo8(-9)
 476 0022 8093 E800 		sts 232,r24
 477               	.LBE108:
 478               	.LBE107:
 274:Caterina.c    ****                 Endpoint_ClearOUT();
 479               		.loc 1 274 0
 480 0026 67E0      		ldi r22,lo8(7)
 481 0028 70E0      		ldi r23,0
 482 002a 80E0      		ldi r24,lo8(LineEncoding)
 483 002c 90E0      		ldi r25,hi8(LineEncoding)
 484 002e 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 485               	.LVL17:
 486               	.LBB109:
 487               	.LBB110:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 488               		.loc 2 531 0
 489 0032 8091 E800 		lds r24,232
 490 0036 8B77      		andi r24,lo8(123)
 491 0038 00C0      		rjmp .L43
 492               	.L41:
 493               	.LBE110:
 494               	.LBE109:
 280:Caterina.c    ****             {
 495               		.loc 1 280 0
 496 003a 8132      		cpi r24,lo8(33)
 497 003c 01F4      		brne .L39
 498               	.LBB111:
 499               	.LBB112:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 500               		.loc 2 504 0
 501 003e 8091 E800 		lds r24,232
 502 0042 877F      		andi r24,lo8(-9)
 503 0044 8093 E800 		sts 232,r24
 504               	.LBE112:
 505               	.LBE111:
 285:Caterina.c    ****                 Endpoint_ClearIN();
 506               		.loc 1 285 0
 507 0048 67E0      		ldi r22,lo8(7)
 508 004a 70E0      		ldi r23,0
 509 004c 80E0      		ldi r24,lo8(LineEncoding)
 510 004e 90E0      		ldi r25,hi8(LineEncoding)
 511 0050 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 512               	.LVL18:
 513               	.LBB113:
 514               	.LBB114:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 515               		.loc 2 516 0
 516 0054 8091 E800 		lds r24,232
 517 0058 8E77      		andi r24,lo8(126)
 518               	.L43:
 519 005a 8093 E800 		sts 232,r24
 520               	.L39:
 521 005e 0895      		ret
 522               	.LBE114:
 523               	.LBE113:
 524               		.cfi_endproc
 525               	.LFE105:
 527               		.section	.rodata.str1.1,"aMS",@progbits,1
 528               	.LC0:
 529 0000 4341 5445 		.string	"CATERINA"
 529      5249 4E41 
 529      00
 530               		.section	.text.CDC_Task,"ax",@progbits
 531               	.global	CDC_Task
 533               	CDC_Task:
 534               	.LFB109:
 469:Caterina.c    **** }
 470:Caterina.c    **** 
 471:Caterina.c    **** #define STK_OK              0x10
 472:Caterina.c    **** #define STK_INSYNC          0x14  // ' '
 473:Caterina.c    **** #define CRC_EOP             0x20  // 'SPACE'
 474:Caterina.c    **** #define STK_GET_SYNC        0x30  // '0'
 475:Caterina.c    **** 
 476:Caterina.c    **** #define STK_GET_PARAMETER   0x41  // 'A'
 477:Caterina.c    **** #define STK_SET_DEVICE      0x42  // 'B'
 478:Caterina.c    **** #define STK_SET_DEVICE_EXT  0x45  // 'E'
 479:Caterina.c    **** #define STK_LOAD_ADDRESS    0x55  // 'U'
 480:Caterina.c    **** #define STK_UNIVERSAL       0x56  // 'V'
 481:Caterina.c    **** #define STK_PROG_PAGE       0x64  // 'd'
 482:Caterina.c    **** #define STK_READ_PAGE       0x74  // 't'
 483:Caterina.c    **** #define STK_READ_SIGN       0x75  // 'u'
 484:Caterina.c    **** 
 485:Caterina.c    **** /** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the requi
 486:Caterina.c    ****  *  and send the appropriate response back to the host.
 487:Caterina.c    ****  */
 488:Caterina.c    **** void CDC_Task(void)
 489:Caterina.c    **** {
 535               		.loc 1 489 0
 536               		.cfi_startproc
 537 0000 6F92      		push r6
 538               	.LCFI7:
 539               		.cfi_def_cfa_offset 3
 540               		.cfi_offset 6, -2
 541 0002 7F92      		push r7
 542               	.LCFI8:
 543               		.cfi_def_cfa_offset 4
 544               		.cfi_offset 7, -3
 545 0004 8F92      		push r8
 546               	.LCFI9:
 547               		.cfi_def_cfa_offset 5
 548               		.cfi_offset 8, -4
 549 0006 9F92      		push r9
 550               	.LCFI10:
 551               		.cfi_def_cfa_offset 6
 552               		.cfi_offset 9, -5
 553 0008 AF92      		push r10
 554               	.LCFI11:
 555               		.cfi_def_cfa_offset 7
 556               		.cfi_offset 10, -6
 557 000a BF92      		push r11
 558               	.LCFI12:
 559               		.cfi_def_cfa_offset 8
 560               		.cfi_offset 11, -7
 561 000c CF92      		push r12
 562               	.LCFI13:
 563               		.cfi_def_cfa_offset 9
 564               		.cfi_offset 12, -8
 565 000e DF92      		push r13
 566               	.LCFI14:
 567               		.cfi_def_cfa_offset 10
 568               		.cfi_offset 13, -9
 569 0010 EF92      		push r14
 570               	.LCFI15:
 571               		.cfi_def_cfa_offset 11
 572               		.cfi_offset 14, -10
 573 0012 FF92      		push r15
 574               	.LCFI16:
 575               		.cfi_def_cfa_offset 12
 576               		.cfi_offset 15, -11
 577 0014 0F93      		push r16
 578               	.LCFI17:
 579               		.cfi_def_cfa_offset 13
 580               		.cfi_offset 16, -12
 581 0016 1F93      		push r17
 582               	.LCFI18:
 583               		.cfi_def_cfa_offset 14
 584               		.cfi_offset 17, -13
 585 0018 CF93      		push r28
 586               	.LCFI19:
 587               		.cfi_def_cfa_offset 15
 588               		.cfi_offset 28, -14
 589 001a DF93      		push r29
 590               	.LCFI20:
 591               		.cfi_def_cfa_offset 16
 592               		.cfi_offset 29, -15
 593               	/* prologue: function */
 594               	/* frame size = 0 */
 595               	/* stack size = 14 */
 596               	.L__stack_usage = 14
 597               	.LVL19:
 598               	.LBB147:
 599               	.LBB148:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 600               		.loc 2 330 0
 601 001c 84E0      		ldi r24,lo8(4)
 602 001e 8093 E900 		sts 233,r24
 603               	.LBE148:
 604               	.LBE147:
 605               	.LBB149:
 606               	.LBB150:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 607               		.loc 2 479 0
 608 0022 8091 E800 		lds r24,232
 609               	.LBE150:
 610               	.LBE149:
 490:Caterina.c    ****     /* Select the OUT endpoint */
 491:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 492:Caterina.c    **** 
 493:Caterina.c    ****     /* Check if endpoint has a command in it sent from the host */
 494:Caterina.c    ****     if (!(Endpoint_IsOUTReceived()))
 611               		.loc 1 494 0
 612 0026 82FF      		sbrs r24,2
 613 0028 00C0      		rjmp .L44
 495:Caterina.c    ****       return;
 496:Caterina.c    **** 
 497:Caterina.c    ****     RX_LED_ON();
 614               		.loc 1 497 0
 615 002a 2898      		cbi 0x5,0
 498:Caterina.c    ****     RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 616               		.loc 1 498 0
 617 002c 84E6      		ldi r24,lo8(100)
 618 002e 90E0      		ldi r25,0
 619 0030 9093 0000 		sts RxLEDPulse+1,r25
 620 0034 8093 0000 		sts RxLEDPulse,r24
 499:Caterina.c    **** 
 500:Caterina.c    ****     /* Read in the bootloader command (first byte sent from host) */
 501:Caterina.c    ****     uint8_t Command = FetchNextCommandByte();
 621               		.loc 1 501 0
 622 0038 0E94 0000 		call FetchNextCommandByte
 623               	.LVL20:
 624 003c C82F      		mov r28,r24
 625               	.LVL21:
 502:Caterina.c    **** 
 503:Caterina.c    ****     if (Command == 'E')
 626               		.loc 1 503 0
 627 003e 8534      		cpi r24,lo8(69)
 628 0040 01F4      		brne .L47
 504:Caterina.c    ****     {
 505:Caterina.c    ****         /* We nearly run out the bootloader timeout clock,
 506:Caterina.c    ****         * leaving just a few hundred milliseconds so the
 507:Caterina.c    ****         * bootloder has time to respond and service any
 508:Caterina.c    ****         * subsequent requests */
 509:Caterina.c    ****         Timeout = TIMEOUT_PERIOD - 500;
 629               		.loc 1 509 0
 630 0042 84EF      		ldi r24,lo8(-12)
 631 0044 9FEF      		ldi r25,lo8(-1)
 632               	.LVL22:
 633 0046 9093 0000 		sts Timeout+1,r25
 634 004a 8093 0000 		sts Timeout,r24
 635               	.L48:
 510:Caterina.c    **** 
 511:Caterina.c    ****         /* Re-enable RWW section - must be done here in case
 512:Caterina.c    ****          * user has disabled verification on upload.  */
 513:Caterina.c    ****         boot_rww_enable_safe();
 636               		.loc 1 513 0 discriminator 1
 637 004e 07B6      		in __tmp_reg__,0x37
 638 0050 00FC      		sbrc __tmp_reg__,0
 639 0052 00C0      		rjmp .L48
 640               	.L49:
 641               		.loc 1 513 0 is_stmt 0 discriminator 3
 642 0054 F999      		sbic 0x1f,1
 643 0056 00C0      		rjmp .L49
 644               		.loc 1 513 0 discriminator 4
 645 0058 81E1      		ldi r24,lo8(17)
 646               	/* #APP */
 647               	 ;  513 "Caterina.c" 1
 648 005a 8093 5700 		sts 87, r24
 649 005e E895      		spm
 650               		
 651               	 ;  0 "" 2
 652               	/* #NOAPP */
 653 0060 00C0      		rjmp .L132
 654               	.LVL23:
 655               	.L47:
 514:Caterina.c    **** 
 515:Caterina.c    ****         // Send confirmation byte back to the host
 516:Caterina.c    ****         WriteNextResponseByte('\r');
 517:Caterina.c    ****     }
 518:Caterina.c    ****     else if (Command == 'T')
 656               		.loc 1 518 0 is_stmt 1
 657 0062 8435      		cpi r24,lo8(84)
 658 0064 01F4      		brne .L51
 519:Caterina.c    ****     {
 520:Caterina.c    ****         FetchNextCommandByte();
 659               		.loc 1 520 0
 660 0066 0E94 0000 		call FetchNextCommandByte
 661               	.LVL24:
 662               	.L132:
 521:Caterina.c    **** 
 522:Caterina.c    ****         // Send confirmation byte back to the host
 523:Caterina.c    ****         WriteNextResponseByte('\r');
 663               		.loc 1 523 0
 664 006a 8DE0      		ldi r24,lo8(13)
 665               	.L133:
 666 006c 0E94 0000 		call WriteNextResponseByte
 667               	.LVL25:
 668 0070 00C0      		rjmp .L50
 669               	.LVL26:
 670               	.L51:
 524:Caterina.c    ****     }
 525:Caterina.c    ****     else if ((Command == 'L') || (Command == 'P'))
 671               		.loc 1 525 0
 672 0072 8C34      		cpi r24,lo8(76)
 673 0074 01F0      		breq .L132
 674               		.loc 1 525 0 is_stmt 0 discriminator 1
 675 0076 8035      		cpi r24,lo8(80)
 676 0078 01F0      		breq .L132
 526:Caterina.c    ****     {
 527:Caterina.c    ****         // Send confirmation byte back to the host
 528:Caterina.c    ****         WriteNextResponseByte('\r');
 529:Caterina.c    ****     }
 530:Caterina.c    ****     else if (Command == 't')
 677               		.loc 1 530 0 is_stmt 1
 678 007a 8437      		cpi r24,lo8(116)
 679 007c 01F4      		brne .L54
 531:Caterina.c    ****     {
 532:Caterina.c    ****         // Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader
 533:Caterina.c    ****         WriteNextResponseByte(0x44);
 680               		.loc 1 533 0
 681 007e 84E4      		ldi r24,lo8(68)
 682               	.LVL27:
 683 0080 0E94 0000 		call WriteNextResponseByte
 684               	.LVL28:
 534:Caterina.c    ****         WriteNextResponseByte(0x00);
 685               		.loc 1 534 0
 686 0084 80E0      		ldi r24,0
 687 0086 00C0      		rjmp .L133
 688               	.LVL29:
 689               	.L54:
 535:Caterina.c    ****     }
 536:Caterina.c    ****     else if (Command == 'a')
 690               		.loc 1 536 0
 691 0088 8136      		cpi r24,lo8(97)
 692 008a 01F4      		brne .L55
 537:Caterina.c    ****     {
 538:Caterina.c    ****         // Indicate auto-address increment is supported
 539:Caterina.c    ****         WriteNextResponseByte('Y');
 693               		.loc 1 539 0
 694 008c 89E5      		ldi r24,lo8(89)
 695               	.LVL30:
 696 008e 00C0      		rjmp .L133
 697               	.LVL31:
 698               	.L55:
 540:Caterina.c    ****     }
 541:Caterina.c    ****     else if (Command == 'A')
 699               		.loc 1 541 0
 700 0090 8134      		cpi r24,lo8(65)
 701 0092 01F4      		brne .L56
 542:Caterina.c    ****     {
 543:Caterina.c    ****         // Set the current address to that given by the host
 544:Caterina.c    ****         CurrAddress   = (FetchNextCommandByte() << 9);
 702               		.loc 1 544 0
 703 0094 0E94 0000 		call FetchNextCommandByte
 704               	.LVL32:
 705 0098 C82F      		mov r28,r24
 706               	.LVL33:
 545:Caterina.c    ****         CurrAddress  |= (FetchNextCommandByte() << 1);
 707               		.loc 1 545 0
 708 009a 0E94 0000 		call FetchNextCommandByte
 709               	.LVL34:
 710 009e 90E0      		ldi r25,0
 711 00a0 880F      		lsl r24
 712 00a2 991F      		rol r25
 544:Caterina.c    ****         CurrAddress  |= (FetchNextCommandByte() << 1);
 713               		.loc 1 544 0
 714 00a4 2C2F      		mov r18,r28
 715 00a6 30E0      		ldi r19,0
 716 00a8 322F      		mov r19,r18
 717 00aa 2227      		clr r18
 718 00ac 330F      		lsl r19
 719               		.loc 1 545 0
 720 00ae 822B      		or r24,r18
 721 00b0 932B      		or r25,r19
 722 00b2 092E      		mov __tmp_reg__,r25
 723 00b4 000C      		lsl r0
 724 00b6 AA0B      		sbc r26,r26
 725 00b8 BB0B      		sbc r27,r27
 726 00ba 00C0      		rjmp .L134
 727               	.LVL35:
 728               	.L56:
 546:Caterina.c    **** 
 547:Caterina.c    ****         // Send confirmation byte back to the host
 548:Caterina.c    ****         WriteNextResponseByte('\r');
 549:Caterina.c    ****     }
 550:Caterina.c    ****     else if (Command == 'p')
 729               		.loc 1 550 0
 730 00bc 8037      		cpi r24,lo8(112)
 731 00be 01F4      		brne .L57
 551:Caterina.c    ****     {
 552:Caterina.c    ****         // Indicate serial programmer back to the host
 553:Caterina.c    ****         WriteNextResponseByte('S');
 732               		.loc 1 553 0
 733 00c0 83E5      		ldi r24,lo8(83)
 734               	.LVL36:
 735 00c2 00C0      		rjmp .L133
 736               	.LVL37:
 737               	.L57:
 554:Caterina.c    ****     }
 555:Caterina.c    ****     else if (Command == 'S')
 738               		.loc 1 555 0
 739 00c4 8335      		cpi r24,lo8(83)
 740 00c6 01F4      		brne .L58
 741 00c8 C0E0      		ldi r28,lo8(.LC0)
 742 00ca D0E0      		ldi r29,hi8(.LC0)
 743 00cc 1C2F      		mov r17,r28
 744 00ce 195F      		subi r17,lo8(-(7))
 745               	.LVL38:
 746               	.L59:
 747               	.LBB151:
 556:Caterina.c    ****     {
 557:Caterina.c    ****         // Write the 7-byte software identifier to the endpoint
 558:Caterina.c    ****         for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 559:Caterina.c    ****           WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 748               		.loc 1 559 0 discriminator 3
 749 00d0 8991      		ld r24,Y+
 750               	.LVL39:
 751 00d2 0E94 0000 		call WriteNextResponseByte
 752               	.LVL40:
 558:Caterina.c    ****           WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 753               		.loc 1 558 0 discriminator 3
 754 00d6 1C13      		cpse r17,r28
 755 00d8 00C0      		rjmp .L59
 756 00da 00C0      		rjmp .L50
 757               	.LVL41:
 758               	.L58:
 759               	.LBE151:
 560:Caterina.c    ****     }
 561:Caterina.c    ****     else if (Command == 'V')
 760               		.loc 1 561 0
 761 00dc 8635      		cpi r24,lo8(86)
 762 00de 01F4      		brne .L60
 562:Caterina.c    ****     {
 563:Caterina.c    ****         WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
 763               		.loc 1 563 0
 764 00e0 81E3      		ldi r24,lo8(49)
 765               	.LVL42:
 766 00e2 0E94 0000 		call WriteNextResponseByte
 767               	.LVL43:
 564:Caterina.c    ****         WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
 768               		.loc 1 564 0
 769 00e6 80E3      		ldi r24,lo8(48)
 770 00e8 00C0      		rjmp .L133
 771               	.LVL44:
 772               	.L60:
 565:Caterina.c    ****     }
 566:Caterina.c    ****     else if (Command == 's')
 773               		.loc 1 566 0
 774 00ea 8337      		cpi r24,lo8(115)
 775 00ec 01F4      		brne .L61
 567:Caterina.c    ****     {
 568:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_3);
 776               		.loc 1 568 0
 777 00ee 87E8      		ldi r24,lo8(-121)
 778               	.LVL45:
 779 00f0 0E94 0000 		call WriteNextResponseByte
 780               	.LVL46:
 569:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_2);
 781               		.loc 1 569 0
 782 00f4 85E9      		ldi r24,lo8(-107)
 783 00f6 0E94 0000 		call WriteNextResponseByte
 784               	.LVL47:
 570:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_1);
 785               		.loc 1 570 0
 786 00fa 8EE1      		ldi r24,lo8(30)
 787 00fc 00C0      		rjmp .L133
 788               	.LVL48:
 789               	.L61:
 571:Caterina.c    ****     }
 572:Caterina.c    ****     else if (Command == 'e')
 790               		.loc 1 572 0
 791 00fe 8536      		cpi r24,lo8(101)
 792 0100 01F4      		brne .L62
 793 0102 E0E0      		ldi r30,0
 794 0104 F0E0      		ldi r31,0
 795               	.LBB152:
 573:Caterina.c    ****     {
 574:Caterina.c    ****         // Clear the application section of flash
 575:Caterina.c    ****         for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress +=
 576:Caterina.c    ****         {
 577:Caterina.c    ****             boot_page_erase(CurrFlashAddress);
 796               		.loc 1 577 0
 797 0106 83E0      		ldi r24,lo8(3)
 798               	.LVL49:
 578:Caterina.c    ****             boot_spm_busy_wait();
 579:Caterina.c    ****             boot_page_write(CurrFlashAddress);
 799               		.loc 1 579 0
 800 0108 95E0      		ldi r25,lo8(5)
 801               	.L65:
 577:Caterina.c    ****             boot_spm_busy_wait();
 802               		.loc 1 577 0
 803               	/* #APP */
 804               	 ;  577 "Caterina.c" 1
 805 010a 8093 5700 		sts 87, r24
 806 010e E895      		spm
 807               		
 808               	 ;  0 "" 2
 809               	/* #NOAPP */
 810               	.L63:
 578:Caterina.c    ****             boot_spm_busy_wait();
 811               		.loc 1 578 0 discriminator 1
 812 0110 07B6      		in __tmp_reg__,0x37
 813 0112 00FC      		sbrc __tmp_reg__,0
 814 0114 00C0      		rjmp .L63
 815               		.loc 1 579 0
 816               	/* #APP */
 817               	 ;  579 "Caterina.c" 1
 818 0116 9093 5700 		sts 87, r25
 819 011a E895      		spm
 820               		
 821               	 ;  0 "" 2
 822               	/* #NOAPP */
 823               	.L64:
 580:Caterina.c    ****             boot_spm_busy_wait();
 824               		.loc 1 580 0 discriminator 1
 825 011c 07B6      		in __tmp_reg__,0x37
 826 011e 00FC      		sbrc __tmp_reg__,0
 827 0120 00C0      		rjmp .L64
 828               	.LVL50:
 829 0122 E058      		subi r30,-128
 830 0124 FF4F      		sbci r31,-1
 575:Caterina.c    ****         {
 831               		.loc 1 575 0 discriminator 2
 832 0126 E115      		cp r30,__zero_reg__
 833 0128 20E7      		ldi r18,112
 834 012a F207      		cpc r31,r18
 835 012c 01F4      		brne .L65
 836 012e 00C0      		rjmp .L132
 837               	.LVL51:
 838               	.L62:
 839               	.LBE152:
 581:Caterina.c    ****         }
 582:Caterina.c    **** 
 583:Caterina.c    ****         // Send confirmation byte back to the host
 584:Caterina.c    ****         WriteNextResponseByte('\r');
 585:Caterina.c    ****     }
 586:Caterina.c    ****     #if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
 587:Caterina.c    ****     else if (Command == 'l')
 588:Caterina.c    ****     {
 589:Caterina.c    ****         // Set the lock bits to those given by the host
 590:Caterina.c    ****         boot_lock_bits_set(FetchNextCommandByte());
 591:Caterina.c    **** 
 592:Caterina.c    ****         // Send confirmation byte back to the host
 593:Caterina.c    ****         WriteNextResponseByte('\r');
 594:Caterina.c    ****     }
 595:Caterina.c    ****     #endif
 596:Caterina.c    ****     else if (Command == 'r')
 840               		.loc 1 596 0
 841 0130 8237      		cpi r24,lo8(114)
 842 0132 01F4      		brne .L66
 843               	.LBB153:
 597:Caterina.c    ****     {
 598:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
 844               		.loc 1 598 0
 845 0134 E1E0      		ldi r30,lo8(1)
 846 0136 F0E0      		ldi r31,0
 847 0138 00C0      		rjmp .L135
 848               	.L66:
 849               	.LBE153:
 599:Caterina.c    ****     }
 600:Caterina.c    ****     else if (Command == 'F')
 850               		.loc 1 600 0
 851 013a 8634      		cpi r24,lo8(70)
 852 013c 01F4      		brne .L67
 853               	.LBB154:
 601:Caterina.c    ****     {
 602:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
 854               		.loc 1 602 0
 855 013e E0E0      		ldi r30,0
 856 0140 F0E0      		ldi r31,0
 857 0142 00C0      		rjmp .L135
 858               	.L67:
 859               	.LBE154:
 603:Caterina.c    ****     }
 604:Caterina.c    ****     else if (Command == 'N')
 860               		.loc 1 604 0
 861 0144 8E34      		cpi r24,lo8(78)
 862 0146 01F4      		brne .L68
 863               	.LBB155:
 605:Caterina.c    ****     {
 606:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
 864               		.loc 1 606 0
 865 0148 E3E0      		ldi r30,lo8(3)
 866 014a F0E0      		ldi r31,0
 867 014c 00C0      		rjmp .L135
 868               	.L68:
 869               	.LBE155:
 607:Caterina.c    ****     }
 608:Caterina.c    ****     else if (Command == 'Q')
 870               		.loc 1 608 0
 871 014e 8135      		cpi r24,lo8(81)
 872 0150 01F4      		brne .L69
 873               	.LBB156:
 609:Caterina.c    ****     {
 610:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
 874               		.loc 1 610 0
 875 0152 E2E0      		ldi r30,lo8(2)
 876 0154 F0E0      		ldi r31,0
 877               	.L135:
 878 0156 89E0      		ldi r24,lo8(9)
 879               	.LVL52:
 880               	/* #APP */
 881               	 ;  610 "Caterina.c" 1
 882 0158 8093 5700 		sts 87, r24
 883 015c 8491      		lpm r24, Z
 884               		
 885               	 ;  0 "" 2
 886               	.LVL53:
 887               	/* #NOAPP */
 888 015e 00C0      		rjmp .L133
 889               	.LVL54:
 890               	.L69:
 891               	.LBE156:
 611:Caterina.c    ****     }
 612:Caterina.c    ****     #if !defined(NO_BLOCK_SUPPORT)
 613:Caterina.c    ****     else if (Command == 'b')
 892               		.loc 1 613 0
 893 0160 8236      		cpi r24,lo8(98)
 894 0162 01F4      		brne .L70
 614:Caterina.c    ****     {
 615:Caterina.c    ****         WriteNextResponseByte('Y');
 895               		.loc 1 615 0
 896 0164 89E5      		ldi r24,lo8(89)
 897               	.LVL55:
 898 0166 0E94 0000 		call WriteNextResponseByte
 899               	.LVL56:
 616:Caterina.c    **** 
 617:Caterina.c    ****         // Send block size to the host
 618:Caterina.c    ****         WriteNextResponseByte(SPM_PAGESIZE >> 8);
 900               		.loc 1 618 0
 901 016a 80E0      		ldi r24,0
 902 016c 0E94 0000 		call WriteNextResponseByte
 903               	.LVL57:
 619:Caterina.c    ****         WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
 904               		.loc 1 619 0
 905 0170 80E8      		ldi r24,lo8(-128)
 906 0172 00C0      		rjmp .L133
 907               	.LVL58:
 908               	.L70:
 620:Caterina.c    ****     }
 621:Caterina.c    ****     else if ((Command == 'B') || (Command == 'g'))
 909               		.loc 1 621 0
 910 0174 8234      		cpi r24,lo8(66)
 911 0176 01F0      		breq .L71
 912               		.loc 1 621 0 is_stmt 0 discriminator 1
 913 0178 8736      		cpi r24,lo8(103)
 914 017a 01F0      		breq .+2
 915 017c 00C0      		rjmp .L72
 916               	.L71:
 622:Caterina.c    ****     {
 623:Caterina.c    ****         // Keep resetting the timeout counter if we're receiving self-programming instructions
 624:Caterina.c    ****         Timeout = 0;
 917               		.loc 1 624 0 is_stmt 1
 918 017e 1092 0000 		sts Timeout+1,__zero_reg__
 919 0182 1092 0000 		sts Timeout,__zero_reg__
 920               	.LVL59:
 921               	.LBB157:
 922               	.LBB158:
 307:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 923               		.loc 1 307 0
 924 0186 0E94 0000 		call FetchNextCommandByte
 925               	.LVL60:
 926 018a 082F      		mov r16,r24
 927               	.LVL61:
 308:Caterina.c    **** 
 928               		.loc 1 308 0
 929 018c 0E94 0000 		call FetchNextCommandByte
 930               	.LVL62:
 931 0190 D82F      		mov r29,r24
 932               	.LVL63:
 310:Caterina.c    **** 
 933               		.loc 1 310 0
 934 0192 0E94 0000 		call FetchNextCommandByte
 935               	.LVL64:
 936 0196 182F      		mov r17,r24
 937               	.LVL65:
 312:Caterina.c    ****     {
 938               		.loc 1 312 0
 939 0198 8BEB      		ldi r24,lo8(-69)
 940 019a 810F      		add r24,r17
 941 019c 8230      		cpi r24,lo8(2)
 942 019e 00F0      		brlo .L73
 943               	.LVL66:
 944               	.L98:
 315:Caterina.c    **** 
 945               		.loc 1 315 0
 946 01a0 8FE3      		ldi r24,lo8(63)
 947 01a2 00C0      		rjmp .L133
 948               	.LVL67:
 949               	.L73:
 307:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 950               		.loc 1 307 0
 951 01a4 2D2F      		mov r18,r29
 952 01a6 30E0      		ldi r19,0
 308:Caterina.c    **** 
 953               		.loc 1 308 0
 954 01a8 302B      		or r19,r16
 322:Caterina.c    **** 
 955               		.loc 1 322 0
 956 01aa 1092 6F00 		sts 111,__zero_reg__
 325:Caterina.c    ****     {
 957               		.loc 1 325 0
 958 01ae C736      		cpi r28,lo8(103)
 959 01b0 01F0      		breq .+2
 960 01b2 00C0      		rjmp .L74
 961               	.LVL68:
 328:Caterina.c    **** 
 962               		.loc 1 328 0
 963 01b4 81E1      		ldi r24,lo8(17)
 964               	/* #APP */
 965               	 ;  328 "Caterina.c" 1
 966 01b6 8093 5700 		sts 87, r24
 967 01ba E895      		spm
 968               		
 969               	 ;  0 "" 2
 970               	/* #NOAPP */
 971 01bc E901      		movw r28,r18
 972               	.LVL69:
 304:Caterina.c    ****     uint8_t  LowByte  = 0;
 973               		.loc 1 304 0
 974 01be 00E0      		ldi r16,0
 975               	.LVL70:
 345:Caterina.c    ****             }
 976               		.loc 1 345 0
 977 01c0 BB24      		clr r11
 978 01c2 B394      		inc r11
 979               	.LVL71:
 980               	.L75:
 330:Caterina.c    ****         {
 981               		.loc 1 330 0
 982 01c4 2097      		sbiw r28,0
 983 01c6 01F4      		brne .+2
 984 01c8 00C0      		rjmp .L80
 985 01ca C090 0000 		lds r12,CurrAddress
 986 01ce D090 0000 		lds r13,CurrAddress+1
 987 01d2 E090 0000 		lds r14,CurrAddress+2
 988 01d6 F090 0000 		lds r15,CurrAddress+3
 332:Caterina.c    ****             {
 989               		.loc 1 332 0
 990 01da 1634      		cpi r17,lo8(70)
 991 01dc 01F4      		brne .L76
 992               	.LVL72:
 993               	.LBB159:
 338:Caterina.c    ****                 #endif
 994               		.loc 1 338 0
 995 01de E02F      		mov r30,r16
 996 01e0 F0E0      		ldi r31,0
 997 01e2 EC29      		or r30,r12
 998 01e4 FD29      		or r31,r13
 999               	/* #APP */
 1000               	 ;  338 "Caterina.c" 1
 1001 01e6 8491      		lpm r24, Z
 1002               		
 1003               	 ;  0 "" 2
 1004               	.LVL73:
 1005               	/* #NOAPP */
 1006               	.LBE159:
 1007 01e8 0E94 0000 		call WriteNextResponseByte
 1008               	.LVL74:
 342:Caterina.c    ****                   CurrAddress += 2;
 1009               		.loc 1 342 0
 1010 01ec 0023      		tst r16
 1011 01ee 01F0      		breq .L77
 343:Caterina.c    **** 
 1012               		.loc 1 343 0
 1013 01f0 82E0      		ldi r24,2
 1014 01f2 C80E      		add r12,r24
 1015 01f4 D11C      		adc r13,__zero_reg__
 1016 01f6 E11C      		adc r14,__zero_reg__
 1017 01f8 F11C      		adc r15,__zero_reg__
 1018               	.LVL75:
 1019 01fa C092 0000 		sts CurrAddress,r12
 1020 01fe D092 0000 		sts CurrAddress+1,r13
 1021 0202 E092 0000 		sts CurrAddress+2,r14
 1022 0206 F092 0000 		sts CurrAddress+3,r15
 1023               	.LVL76:
 1024               	.L77:
 345:Caterina.c    ****             }
 1025               		.loc 1 345 0
 1026 020a 0B25      		eor r16,r11
 1027               	.LVL77:
 1028 020c 00C0      		rjmp .L78
 1029               	.L76:
 350:Caterina.c    **** 
 1030               		.loc 1 350 0
 1031 020e D701      		movw r26,r14
 1032 0210 C601      		movw r24,r12
 1033 0212 B695      		lsr r27
 1034 0214 A795      		ror r26
 1035 0216 9795      		ror r25
 1036 0218 8795      		ror r24
 1037 021a 0E94 0000 		call eeprom_read_byte
 1038               	.LVL78:
 1039 021e 0E94 0000 		call WriteNextResponseByte
 1040               	.LVL79:
 353:Caterina.c    ****             }
 1041               		.loc 1 353 0
 1042 0222 E2E0      		ldi r30,2
 1043 0224 CE0E      		add r12,r30
 1044 0226 D11C      		adc r13,__zero_reg__
 1045 0228 E11C      		adc r14,__zero_reg__
 1046 022a F11C      		adc r15,__zero_reg__
 1047 022c C092 0000 		sts CurrAddress,r12
 1048 0230 D092 0000 		sts CurrAddress+1,r13
 1049 0234 E092 0000 		sts CurrAddress+2,r14
 1050 0238 F092 0000 		sts CurrAddress+3,r15
 1051               	.L78:
 1052 023c 2197      		sbiw r28,1
 1053               	.LVL80:
 1054 023e 00C0      		rjmp .L75
 1055               	.LVL81:
 1056               	.L74:
 1057               	.LBB160:
 359:Caterina.c    **** 
 1058               		.loc 1 359 0
 1059 0240 8090 0000 		lds r8,CurrAddress
 1060 0244 9090 0000 		lds r9,CurrAddress+1
 1061 0248 A090 0000 		lds r10,CurrAddress+2
 1062 024c B090 0000 		lds r11,CurrAddress+3
 361:Caterina.c    ****         {
 1063               		.loc 1 361 0
 1064 0250 1634      		cpi r17,lo8(70)
 1065 0252 01F4      		brne .L81
 363:Caterina.c    ****             boot_spm_busy_wait();
 1066               		.loc 1 363 0
 1067 0254 83E0      		ldi r24,lo8(3)
 1068 0256 F401      		movw r30,r8
 1069               	/* #APP */
 1070               	 ;  363 "Caterina.c" 1
 1071 0258 8093 5700 		sts 87, r24
 1072 025c E895      		spm
 1073               		
 1074               	 ;  0 "" 2
 1075               	/* #NOAPP */
 1076               	.L82:
 364:Caterina.c    ****         }
 1077               		.loc 1 364 0
 1078 025e 07B6      		in __tmp_reg__,0x37
 1079 0260 00FC      		sbrc __tmp_reg__,0
 1080 0262 00C0      		rjmp .L82
 1081               	.L81:
 1082               	.LBE160:
 304:Caterina.c    ****     uint8_t  LowByte  = 0;
 1083               		.loc 1 304 0
 1084 0264 E901      		movw r28,r18
 1085               	.LVL82:
 1086 0266 712C      		mov r7,__zero_reg__
 1087 0268 00E0      		ldi r16,0
 1088               	.LVL83:
 1089               	.LBB161:
 385:Caterina.c    ****             }
 1090               		.loc 1 385 0
 1091 026a 6624      		clr r6
 1092 026c 6394      		inc r6
 1093               	.LVL84:
 1094               	.L83:
 367:Caterina.c    ****         {
 1095               		.loc 1 367 0
 1096 026e 2097      		sbiw r28,0
 1097 0270 01F4      		brne .+2
 1098 0272 00C0      		rjmp .L136
 369:Caterina.c    ****             {
 1099               		.loc 1 369 0
 1100 0274 1634      		cpi r17,lo8(70)
 1101 0276 01F4      		brne .L84
 372:Caterina.c    ****                 {
 1102               		.loc 1 372 0
 1103 0278 0023      		tst r16
 1104 027a 01F0      		breq .L85
 375:Caterina.c    **** 
 1105               		.loc 1 375 0
 1106 027c C090 0000 		lds r12,CurrAddress
 1107 0280 D090 0000 		lds r13,CurrAddress+1
 1108 0284 E090 0000 		lds r14,CurrAddress+2
 1109 0288 F090 0000 		lds r15,CurrAddress+3
 1110 028c 0E94 0000 		call FetchNextCommandByte
 1111               	.LVL85:
 1112 0290 272D      		mov r18,r7
 1113 0292 30E0      		ldi r19,0
 1114 0294 382B      		or r19,r24
 1115 0296 F601      		movw r30,r12
 1116               	/* #APP */
 1117               	 ;  375 "Caterina.c" 1
 1118 0298 0901      		movw  r0, r18
 1119 029a 6092 5700 		sts 87, r6
 1120 029e E895      		spm
 1121 02a0 1124      		clr  r1
 1122               		
 1123               	 ;  0 "" 2
 378:Caterina.c    ****                 }
 1124               		.loc 1 378 0
 1125               	/* #NOAPP */
 1126 02a2 F2E0      		ldi r31,2
 1127 02a4 CF0E      		add r12,r31
 1128 02a6 D11C      		adc r13,__zero_reg__
 1129 02a8 E11C      		adc r14,__zero_reg__
 1130 02aa F11C      		adc r15,__zero_reg__
 1131 02ac C092 0000 		sts CurrAddress,r12
 1132 02b0 D092 0000 		sts CurrAddress+1,r13
 1133 02b4 E092 0000 		sts CurrAddress+2,r14
 1134 02b8 F092 0000 		sts CurrAddress+3,r15
 1135 02bc 00C0      		rjmp .L86
 1136               	.L85:
 382:Caterina.c    ****                 }
 1137               		.loc 1 382 0
 1138 02be 0E94 0000 		call FetchNextCommandByte
 1139               	.LVL86:
 1140 02c2 782E      		mov r7,r24
 1141               	.LVL87:
 1142               	.L86:
 385:Caterina.c    ****             }
 1143               		.loc 1 385 0
 1144 02c4 0625      		eor r16,r6
 1145               	.LVL88:
 1146 02c6 00C0      		rjmp .L87
 1147               	.L84:
 390:Caterina.c    **** 
 1148               		.loc 1 390 0
 1149 02c8 0E94 0000 		call FetchNextCommandByte
 1150               	.LVL89:
 1151 02cc 682F      		mov r22,r24
 1152 02ce 8091 0000 		lds r24,CurrAddress
 1153 02d2 9091 0000 		lds r25,CurrAddress+1
 1154 02d6 A091 0000 		lds r26,CurrAddress+2
 1155 02da B091 0000 		lds r27,CurrAddress+3
 1156 02de B695      		lsr r27
 1157 02e0 A795      		ror r26
 1158 02e2 9795      		ror r25
 1159 02e4 8795      		ror r24
 1160 02e6 0E94 0000 		call eeprom_write_byte
 1161               	.LVL90:
 393:Caterina.c    ****             }
 1162               		.loc 1 393 0
 1163 02ea 8091 0000 		lds r24,CurrAddress
 1164 02ee 9091 0000 		lds r25,CurrAddress+1
 1165 02f2 A091 0000 		lds r26,CurrAddress+2
 1166 02f6 B091 0000 		lds r27,CurrAddress+3
 1167 02fa 0296      		adiw r24,2
 1168 02fc A11D      		adc r26,__zero_reg__
 1169 02fe B11D      		adc r27,__zero_reg__
 1170 0300 8093 0000 		sts CurrAddress,r24
 1171 0304 9093 0000 		sts CurrAddress+1,r25
 1172 0308 A093 0000 		sts CurrAddress+2,r26
 1173 030c B093 0000 		sts CurrAddress+3,r27
 1174               	.L87:
 1175 0310 2197      		sbiw r28,1
 1176               	.LVL91:
 1177 0312 00C0      		rjmp .L83
 1178               	.LVL92:
 1179               	.L136:
 398:Caterina.c    ****         {
 1180               		.loc 1 398 0
 1181 0314 1634      		cpi r17,lo8(70)
 1182 0316 01F4      		brne .L89
 401:Caterina.c    **** 
 1183               		.loc 1 401 0
 1184 0318 85E0      		ldi r24,lo8(5)
 1185 031a F401      		movw r30,r8
 1186               	/* #APP */
 1187               	 ;  401 "Caterina.c" 1
 1188 031c 8093 5700 		sts 87, r24
 1189 0320 E895      		spm
 1190               		
 1191               	 ;  0 "" 2
 1192               	/* #NOAPP */
 1193               	.L90:
 404:Caterina.c    ****         }
 1194               		.loc 1 404 0
 1195 0322 07B6      		in __tmp_reg__,0x37
 1196 0324 00FC      		sbrc __tmp_reg__,0
 1197 0326 00C0      		rjmp .L90
 1198               	.L89:
 408:Caterina.c    ****     }
 1199               		.loc 1 408 0
 1200 0328 8DE0      		ldi r24,lo8(13)
 1201 032a 0E94 0000 		call WriteNextResponseByte
 1202               	.LVL93:
 1203               	.L80:
 1204               	.LBE161:
 412:Caterina.c    **** }
 1205               		.loc 1 412 0
 1206 032e 82E0      		ldi r24,lo8(2)
 1207 0330 8093 6F00 		sts 111,r24
 1208 0334 00C0      		rjmp .L50
 1209               	.LVL94:
 1210               	.L72:
 1211               	.LBE158:
 1212               	.LBE157:
 625:Caterina.c    ****         // Delegate the block write/read to a separate function for clarity
 626:Caterina.c    ****         ReadWriteMemoryBlock(Command);
 627:Caterina.c    ****     }
 628:Caterina.c    ****     #endif
 629:Caterina.c    ****     #if !defined(NO_FLASH_BYTE_SUPPORT)
 630:Caterina.c    ****     else if (Command == 'C')
 1213               		.loc 1 630 0
 1214 0336 8334      		cpi r24,lo8(67)
 1215 0338 01F4      		brne .L91
 631:Caterina.c    ****     {
 632:Caterina.c    ****         // Write the high byte to the current flash page
 633:Caterina.c    ****         boot_page_fill(CurrAddress, FetchNextCommandByte());
 1216               		.loc 1 633 0
 1217 033a C091 0000 		lds r28,CurrAddress
 1218 033e D091 0000 		lds r29,CurrAddress+1
 1219 0342 0E94 0000 		call FetchNextCommandByte
 1220               	.LVL95:
 1221 0346 90E0      		ldi r25,0
 1222 0348 21E0      		ldi r18,lo8(1)
 1223 034a FE01      		movw r30,r28
 1224               	/* #APP */
 1225               	 ;  633 "Caterina.c" 1
 1226 034c 0C01      		movw  r0, r24
 1227 034e 2093 5700 		sts 87, r18
 1228 0352 E895      		spm
 1229 0354 1124      		clr  r1
 1230               		
 1231               	 ;  0 "" 2
 1232               	/* #NOAPP */
 1233 0356 00C0      		rjmp .L132
 1234               	.LVL96:
 1235               	.L91:
 634:Caterina.c    **** 
 635:Caterina.c    ****         // Send confirmation byte back to the host
 636:Caterina.c    ****         WriteNextResponseByte('\r');
 637:Caterina.c    ****     }
 638:Caterina.c    ****     else if (Command == 'c')
 1236               		.loc 1 638 0
 1237 0358 8336      		cpi r24,lo8(99)
 1238 035a 01F4      		brne .L92
 639:Caterina.c    ****     {
 640:Caterina.c    ****         // Write the low byte to the current flash page
 641:Caterina.c    ****         boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
 1239               		.loc 1 641 0
 1240 035c C090 0000 		lds r12,CurrAddress
 1241 0360 D090 0000 		lds r13,CurrAddress+1
 1242 0364 E090 0000 		lds r14,CurrAddress+2
 1243 0368 F090 0000 		lds r15,CurrAddress+3
 1244 036c 0E94 0000 		call FetchNextCommandByte
 1245               	.LVL97:
 1246 0370 F601      		movw r30,r12
 1247 0372 E160      		ori r30,1
 1248 0374 90E0      		ldi r25,0
 1249 0376 21E0      		ldi r18,lo8(1)
 1250               	/* #APP */
 1251               	 ;  641 "Caterina.c" 1
 1252 0378 0C01      		movw  r0, r24
 1253 037a 2093 5700 		sts 87, r18
 1254 037e E895      		spm
 1255 0380 1124      		clr  r1
 1256               		
 1257               	 ;  0 "" 2
 642:Caterina.c    **** 
 643:Caterina.c    ****         // Increment the address
 644:Caterina.c    ****         CurrAddress += 2;
 1258               		.loc 1 644 0
 1259               	/* #NOAPP */
 1260 0382 F2E0      		ldi r31,2
 1261 0384 CF0E      		add r12,r31
 1262 0386 D11C      		adc r13,__zero_reg__
 1263 0388 E11C      		adc r14,__zero_reg__
 1264 038a F11C      		adc r15,__zero_reg__
 1265 038c C092 0000 		sts CurrAddress,r12
 1266 0390 D092 0000 		sts CurrAddress+1,r13
 1267 0394 E092 0000 		sts CurrAddress+2,r14
 1268 0398 F092 0000 		sts CurrAddress+3,r15
 1269 039c 00C0      		rjmp .L132
 1270               	.LVL98:
 1271               	.L92:
 645:Caterina.c    **** 
 646:Caterina.c    ****         // Send confirmation byte back to the host
 647:Caterina.c    ****         WriteNextResponseByte('\r');
 648:Caterina.c    ****     }
 649:Caterina.c    ****     else if (Command == 'm')
 1272               		.loc 1 649 0
 1273 039e 8D36      		cpi r24,lo8(109)
 1274 03a0 01F4      		brne .L93
 650:Caterina.c    ****     {
 651:Caterina.c    ****         // Commit the flash page to memory
 652:Caterina.c    ****         boot_page_write(CurrAddress);
 1275               		.loc 1 652 0
 1276 03a2 E091 0000 		lds r30,CurrAddress
 1277 03a6 F091 0000 		lds r31,CurrAddress+1
 1278 03aa 85E0      		ldi r24,lo8(5)
 1279               	.LVL99:
 1280               	/* #APP */
 1281               	 ;  652 "Caterina.c" 1
 1282 03ac 8093 5700 		sts 87, r24
 1283 03b0 E895      		spm
 1284               		
 1285               	 ;  0 "" 2
 1286               	/* #NOAPP */
 1287               	.L94:
 653:Caterina.c    **** 
 654:Caterina.c    ****         // Wait until write operation has completed
 655:Caterina.c    ****         boot_spm_busy_wait();
 1288               		.loc 1 655 0 discriminator 1
 1289 03b2 07B6      		in __tmp_reg__,0x37
 1290 03b4 00FC      		sbrc __tmp_reg__,0
 1291 03b6 00C0      		rjmp .L94
 1292 03b8 00C0      		rjmp .L132
 1293               	.LVL100:
 1294               	.L93:
 656:Caterina.c    **** 
 657:Caterina.c    ****         // Send confirmation byte back to the host
 658:Caterina.c    ****         WriteNextResponseByte('\r');
 659:Caterina.c    ****     }
 660:Caterina.c    ****     else if (Command == 'R')
 1295               		.loc 1 660 0
 1296 03ba 8235      		cpi r24,lo8(82)
 1297 03bc 01F4      		brne .L95
 1298               	.LBB162:
 1299               	.LBB163:
 661:Caterina.c    ****     {
 662:Caterina.c    ****         #if (FLASHEND > 0xFFFF)
 663:Caterina.c    ****         uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
 664:Caterina.c    ****         #else
 665:Caterina.c    ****         uint16_t ProgramWord = pgm_read_word(CurrAddress);
 1300               		.loc 1 665 0
 1301 03be E091 0000 		lds r30,CurrAddress
 1302 03c2 F091 0000 		lds r31,CurrAddress+1
 1303               	.LVL101:
 1304               	/* #APP */
 1305               	 ;  665 "Caterina.c" 1
 1306 03c6 C591      		lpm r28, Z+
 1307 03c8 D491      		lpm r29, Z
 1308               		
 1309               	 ;  0 "" 2
 1310               	.LVL102:
 1311               	/* #NOAPP */
 1312               	.LBE163:
 666:Caterina.c    ****         #endif
 667:Caterina.c    **** 
 668:Caterina.c    ****         WriteNextResponseByte(ProgramWord >> 8);
 1313               		.loc 1 668 0
 1314 03ca 8D2F      		mov r24,r29
 1315               	.LVL103:
 1316 03cc 0E94 0000 		call WriteNextResponseByte
 1317               	.LVL104:
 669:Caterina.c    ****         WriteNextResponseByte(ProgramWord & 0xFF);
 1318               		.loc 1 669 0
 1319 03d0 8C2F      		mov r24,r28
 1320 03d2 00C0      		rjmp .L133
 1321               	.LVL105:
 1322               	.L95:
 1323               	.LBE162:
 670:Caterina.c    ****     }
 671:Caterina.c    ****     #endif
 672:Caterina.c    ****     #if !defined(NO_EEPROM_BYTE_SUPPORT)
 673:Caterina.c    ****     else if (Command == 'D')
 1324               		.loc 1 673 0
 1325 03d4 8434      		cpi r24,lo8(68)
 1326 03d6 01F4      		brne .L96
 674:Caterina.c    ****     {
 675:Caterina.c    ****         // Read the byte from the endpoint and write it to the EEPROM
 676:Caterina.c    ****         eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1327               		.loc 1 676 0
 1328 03d8 0E94 0000 		call FetchNextCommandByte
 1329               	.LVL106:
 1330 03dc 682F      		mov r22,r24
 1331 03de 8091 0000 		lds r24,CurrAddress
 1332 03e2 9091 0000 		lds r25,CurrAddress+1
 1333 03e6 A091 0000 		lds r26,CurrAddress+2
 1334 03ea B091 0000 		lds r27,CurrAddress+3
 1335 03ee B695      		lsr r27
 1336 03f0 A795      		ror r26
 1337 03f2 9795      		ror r25
 1338 03f4 8795      		ror r24
 1339 03f6 0E94 0000 		call eeprom_write_byte
 1340               	.LVL107:
 677:Caterina.c    **** 
 678:Caterina.c    ****         // Increment the address after use
 679:Caterina.c    ****         CurrAddress += 2;
 1341               		.loc 1 679 0
 1342 03fa 8091 0000 		lds r24,CurrAddress
 1343 03fe 9091 0000 		lds r25,CurrAddress+1
 1344 0402 A091 0000 		lds r26,CurrAddress+2
 1345 0406 B091 0000 		lds r27,CurrAddress+3
 1346 040a 0296      		adiw r24,2
 1347 040c A11D      		adc r26,__zero_reg__
 1348 040e B11D      		adc r27,__zero_reg__
 1349               	.LVL108:
 1350               	.L134:
 1351 0410 8093 0000 		sts CurrAddress,r24
 1352 0414 9093 0000 		sts CurrAddress+1,r25
 1353 0418 A093 0000 		sts CurrAddress+2,r26
 1354 041c B093 0000 		sts CurrAddress+3,r27
 1355 0420 00C0      		rjmp .L132
 1356               	.LVL109:
 1357               	.L96:
 680:Caterina.c    **** 
 681:Caterina.c    ****         // Send confirmation byte back to the host
 682:Caterina.c    ****         WriteNextResponseByte('\r');
 683:Caterina.c    ****     }
 684:Caterina.c    ****     else if (Command == 'd')
 1358               		.loc 1 684 0
 1359 0422 8436      		cpi r24,lo8(100)
 1360 0424 01F4      		brne .L97
 685:Caterina.c    ****     {
 686:Caterina.c    ****         // Read the EEPROM byte and write it to the endpoint
 687:Caterina.c    ****         WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
 1361               		.loc 1 687 0
 1362 0426 C090 0000 		lds r12,CurrAddress
 1363 042a D090 0000 		lds r13,CurrAddress+1
 1364 042e E090 0000 		lds r14,CurrAddress+2
 1365 0432 F090 0000 		lds r15,CurrAddress+3
 1366 0436 D701      		movw r26,r14
 1367 0438 C601      		movw r24,r12
 1368               	.LVL110:
 1369 043a B695      		lsr r27
 1370 043c A795      		ror r26
 1371 043e 9795      		ror r25
 1372 0440 8795      		ror r24
 1373 0442 0E94 0000 		call eeprom_read_byte
 1374               	.LVL111:
 1375 0446 0E94 0000 		call WriteNextResponseByte
 1376               	.LVL112:
 688:Caterina.c    **** 
 689:Caterina.c    ****         // Increment the address after use
 690:Caterina.c    ****         CurrAddress += 2;
 1377               		.loc 1 690 0
 1378 044a 22E0      		ldi r18,2
 1379 044c C20E      		add r12,r18
 1380 044e D11C      		adc r13,__zero_reg__
 1381 0450 E11C      		adc r14,__zero_reg__
 1382 0452 F11C      		adc r15,__zero_reg__
 1383 0454 C092 0000 		sts CurrAddress,r12
 1384 0458 D092 0000 		sts CurrAddress+1,r13
 1385 045c E092 0000 		sts CurrAddress+2,r14
 1386 0460 F092 0000 		sts CurrAddress+3,r15
 1387 0464 00C0      		rjmp .L50
 1388               	.LVL113:
 1389               	.L97:
 691:Caterina.c    ****     }
 692:Caterina.c    **** #endif
 693:Caterina.c    ****     else if (Command != 27)
 1390               		.loc 1 693 0
 1391 0466 8B31      		cpi r24,lo8(27)
 1392 0468 01F0      		breq .+2
 1393 046a 00C0      		rjmp .L98
 1394               	.LVL114:
 1395               	.L50:
 1396               	.LBB164:
 1397               	.LBB165:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1398               		.loc 2 330 0
 1399 046c 83E0      		ldi r24,lo8(3)
 1400 046e 8093 E900 		sts 233,r24
 1401               	.LBE165:
 1402               	.LBE164:
 1403               	.LBB166:
 1404               	.LBB167:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1405               		.loc 2 420 0
 1406 0472 9091 E800 		lds r25,232
 1407               	.LVL115:
 1408               	.LBE167:
 1409               	.LBE166:
 1410               	.LBB168:
 1411               	.LBB169:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1412               		.loc 2 516 0
 1413 0476 8091 E800 		lds r24,232
 1414 047a 8E77      		andi r24,lo8(126)
 1415 047c 8093 E800 		sts 232,r24
 1416               	.LBE169:
 1417               	.LBE168:
 694:Caterina.c    ****     {
 695:Caterina.c    ****         // Unknown (non-sync) command, return fail code
 696:Caterina.c    ****         WriteNextResponseByte('?');
 697:Caterina.c    ****     }
 698:Caterina.c    **** 
 699:Caterina.c    **** 
 700:Caterina.c    ****     /* Select the IN endpoint */
 701:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 702:Caterina.c    **** 
 703:Caterina.c    ****     /* Remember if the endpoint is completely full before clearing it */
 704:Caterina.c    ****     bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
 705:Caterina.c    **** 
 706:Caterina.c    ****     /* Send the endpoint data to the host */
 707:Caterina.c    ****     Endpoint_ClearIN();
 708:Caterina.c    **** 
 709:Caterina.c    ****     /* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to s
 710:Caterina.c    ****     if (IsEndpointFull)
 1418               		.loc 1 710 0
 1419 0480 95FD      		sbrc r25,5
 1420 0482 00C0      		rjmp .L104
 1421               	.L100:
 1422               	.LBB170:
 1423               	.LBB171:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1424               		.loc 2 467 0
 1425 0484 8091 E800 		lds r24,232
 1426               	.LBE171:
 1427               	.LBE170:
 711:Caterina.c    ****     {
 712:Caterina.c    ****         while (!(Endpoint_IsINReady()))
 1428               		.loc 1 712 0
 1429 0488 80FD      		sbrc r24,0
 1430 048a 00C0      		rjmp .L137
 713:Caterina.c    ****         {
 714:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
 1431               		.loc 1 714 0
 1432 048c 8EB3      		in r24,0x1e
 1433 048e 8111      		cpse r24,__zero_reg__
 1434 0490 00C0      		rjmp .L100
 1435 0492 00C0      		rjmp .L44
 1436               	.L137:
 1437               	.LBB172:
 1438               	.LBB173:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1439               		.loc 2 516 0
 1440 0494 8091 E800 		lds r24,232
 1441 0498 8E77      		andi r24,lo8(126)
 1442 049a 8093 E800 		sts 232,r24
 1443 049e 00C0      		rjmp .L104
 1444               	.L105:
 1445               	.LBE173:
 1446               	.LBE172:
 715:Caterina.c    ****               return;
 716:Caterina.c    ****         }
 717:Caterina.c    **** 
 718:Caterina.c    ****         Endpoint_ClearIN();
 719:Caterina.c    ****     }
 720:Caterina.c    **** 
 721:Caterina.c    ****     /* Wait until the data has been sent to the host */
 722:Caterina.c    ****     while (!(Endpoint_IsINReady()))
 723:Caterina.c    ****     {
 724:Caterina.c    ****         if (USB_DeviceState == DEVICE_STATE_Unattached)
 1447               		.loc 1 724 0
 1448 04a0 8EB3      		in r24,0x1e
 1449 04a2 8823      		tst r24
 1450 04a4 01F0      		breq .L44
 1451               	.L104:
 1452               	.LBB174:
 1453               	.LBB175:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1454               		.loc 2 467 0
 1455 04a6 8091 E800 		lds r24,232
 1456               	.LBE175:
 1457               	.LBE174:
 722:Caterina.c    ****     {
 1458               		.loc 1 722 0
 1459 04aa 80FF      		sbrs r24,0
 1460 04ac 00C0      		rjmp .L105
 1461               	.LVL116:
 1462               	.LBB176:
 1463               	.LBB177:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1464               		.loc 2 330 0
 1465 04ae 84E0      		ldi r24,lo8(4)
 1466 04b0 8093 E900 		sts 233,r24
 1467               	.LBE177:
 1468               	.LBE176:
 1469               	.LBB178:
 1470               	.LBB179:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1471               		.loc 2 531 0
 1472 04b4 8091 E800 		lds r24,232
 1473 04b8 8B77      		andi r24,lo8(123)
 1474 04ba 8093 E800 		sts 232,r24
 1475               	.LVL117:
 1476               	.L44:
 1477               	/* epilogue start */
 1478               	.LBE179:
 1479               	.LBE178:
 725:Caterina.c    ****           return;
 726:Caterina.c    ****     }
 727:Caterina.c    **** 
 728:Caterina.c    ****     /* Select the OUT endpoint */
 729:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 730:Caterina.c    **** 
 731:Caterina.c    ****     /* Acknowledge the command from the host */
 732:Caterina.c    ****     Endpoint_ClearOUT();
 733:Caterina.c    **** }
 1480               		.loc 1 733 0
 1481 04be DF91      		pop r29
 1482 04c0 CF91      		pop r28
 1483 04c2 1F91      		pop r17
 1484 04c4 0F91      		pop r16
 1485 04c6 FF90      		pop r15
 1486 04c8 EF90      		pop r14
 1487 04ca DF90      		pop r13
 1488 04cc CF90      		pop r12
 1489 04ce BF90      		pop r11
 1490 04d0 AF90      		pop r10
 1491 04d2 9F90      		pop r9
 1492 04d4 8F90      		pop r8
 1493 04d6 7F90      		pop r7
 1494 04d8 6F90      		pop r6
 1495 04da 0895      		ret
 1496               		.cfi_endproc
 1497               	.LFE109:
 1499               		.section	.text.startup.main,"ax",@progbits
 1500               	.global	main
 1502               	main:
 1503               	.LFB101:
 142:Caterina.c    ****     //uint8_t  mcusr_state = MCUSR;							// store the initial state of the Status register
 1504               		.loc 1 142 0
 1505               		.cfi_startproc
 1506               	/* prologue: function */
 1507               	/* frame size = 0 */
 1508               	/* stack size = 0 */
 1509               	.L__stack_usage = 0
 147:Caterina.c    ****     /* Watchdog may be configured with a 15 ms period so must disable it before going any further *
 1510               		.loc 1 147 0
 1511 0000 14BE      		out 0x34,__zero_reg__
 1512               	.LBB180:
 1513               	.LBB181:
 1514               		.file 3 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1515               		.loc 3 467 0
 1516               	/* #APP */
 1517               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 1518 0002 0FB6      		in __tmp_reg__,__SREG__
 1519 0004 F894      		cli
 1520 0006 A895      		wdr
 1521 0008 8091 6000 		lds r24,96
 1522 000c 8861      		ori r24,24
 1523 000e 8093 6000 		sts 96,r24
 1524 0012 1092 6000 		sts 96,__zero_reg__
 1525 0016 0FBE      		out __SREG__,__tmp_reg__
 1526               		
 1527               	 ;  0 "" 2
 1528               	.LVL118:
 1529               	/* #NOAPP */
 1530               	.LBE181:
 1531               	.LBE180:
 152:Caterina.c    ****     _delay_ms(10);    // allow time for caps to charge
 1532               		.loc 1 152 0
 1533 0018 6A98      		cbi 0xd,2
 1534 001a 729A      		sbi 0xe,2
 1535               	.LVL119:
 1536               	.LBB182:
 1537               	.LBB183:
 1538               		.file 4 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1539               		.loc 4 163 0
 1540 001c 8FE1      		ldi r24,lo8(19999)
 1541 001e 9EE4      		ldi r25,hi8(19999)
 1542 0020 0197      	1:	sbiw r24,1
 1543 0022 01F4      		brne 1b
 1544 0024 00C0      		rjmp .
 1545 0026 0000      		nop
 1546               	.LBE183:
 1547               	.LBE182:
 155:Caterina.c    ****     {
 1548               		.loc 1 155 0
 1549 0028 629B      		sbis 0xc,2
 1550 002a 00C0      		rjmp .L139
 1551               	.LVL120:
 1552               	.LBB184:
 155:Caterina.c    ****     {
 1553               		.loc 1 155 0 is_stmt 0 discriminator 1
 1554 002c E0E0      		ldi r30,0
 1555 002e F0E0      		ldi r31,0
 1556               	/* #APP */
 1557               	 ;  155 "Caterina.c" 1
 1558 0030 8591      		lpm r24, Z+
 1559 0032 9491      		lpm r25, Z
 1560               		
 1561               	 ;  0 "" 2
 1562               	.LVL121:
 1563               	/* #NOAPP */
 1564               	.LBE184:
 1565 0034 0196      		adiw r24,1
 1566 0036 01F4      		brne .L143
 1567               	.LVL122:
 1568               	.L139:
 163:Caterina.c    **** 
 1569               		.loc 1 163 0 is_stmt 1
 1570 0038 0E94 0000 		call SetupHardware
 1571               	.LVL123:
 166:Caterina.c    **** 
 1572               		.loc 1 166 0
 1573               	/* #APP */
 1574               	 ;  166 "Caterina.c" 1
 1575 003c 7894      		sei
 1576               	 ;  0 "" 2
 1577               	/* #NOAPP */
 1578               	.L140:
 168:Caterina.c    ****             CDC_Task();
 1579               		.loc 1 168 0
 1580 003e 6299      		sbic 0xc,2
 1581 0040 00C0      		rjmp .L143
 169:Caterina.c    ****             USB_USBTask();
 1582               		.loc 1 169 0
 1583 0042 0E94 0000 		call CDC_Task
 1584               	.LVL124:
 170:Caterina.c    ****             if (Timeout > TIMEOUT_PERIOD)
 1585               		.loc 1 170 0
 1586 0046 0E94 0000 		call USB_USBTask
 1587               	.LVL125:
 171:Caterina.c    ****             RunBootloader = false;
 1588               		.loc 1 171 0
 1589 004a 8091 0000 		lds r24,Timeout
 1590 004e 9091 0000 		lds r25,Timeout+1
 1591 0052 893E      		cpi r24,-23
 1592 0054 9140      		sbci r25,1
 1593 0056 00F0      		brlo .L141
 172:Caterina.c    **** 
 1594               		.loc 1 172 0
 1595 0058 1092 0000 		sts RunBootloader,__zero_reg__
 1596               	.L141:
 174:Caterina.c    ****         }
 1597               		.loc 1 174 0
 1598 005c 0E94 0000 		call LEDPulse
 1599               	.LVL126:
 1600 0060 00C0      		rjmp .L140
 1601               	.L143:
 1602               	.LBB185:
 1603               	.LBB186:
 1604               		.file 5 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \copydetails Group_USBManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \ingroup Group_USBManagement
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \defgroup Group_USBManagement_AVR8 USB Interface Management (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  @{
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #ifndef __USBCONTROLLER_AVR8_H__
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #define __USBCONTROLLER_AVR8_H__
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Includes: */
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBMode.h"
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../Events.h"
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBTask.h"
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBInterrupt.h"
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Host.h"
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../OTG.h"
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Pipe.h"
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../HostStandardReq.h"
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../PipeStream.h"
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Device.h"
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Endpoint.h"
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../DeviceStandardReq.h"
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../EndpointStream.h"
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(__cplusplus)
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			extern "C" {
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Preprocessor Checks and Defines: */
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(F_USB)
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error F_USB is not defined. You must define F_USB to the frequency of the unprescaled USB contr
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if (F_USB == 8000000)
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#elif (F_USB == 16000000)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(USB_PLL_PSC)
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error No PLL prescale value available for chosen F_USB value and AVR model.
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Macros: */
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** \name USB Controller Option Masks */
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@{
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be enabled to regulate the data pin voltages from the VBUS level down to a 
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the range allowable by the USB standard.
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@}
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Determines if the VBUS line is currently high (i.e. the USB host is supplying power).
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void)
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void)
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  |=  (1 << DETACH);
 1605               		.loc 5 182 0
 1606 0062 8091 E000 		lds r24,224
 1607 0066 8160      		ori r24,lo8(1)
 1608 0068 8093 E000 		sts 224,r24
 1609               	.LBE186:
 1610               	.LBE185:
 181:Caterina.c    **** }
 1611               		.loc 1 181 0
 1612 006c 0E94 0000 		call StartSketch
 1613               	.LVL127:
 182:Caterina.c    **** 
 1614               		.loc 1 182 0
 1615 0070 80E0      		ldi r24,0
 1616 0072 90E0      		ldi r25,0
 1617 0074 0895      		ret
 1618               		.cfi_endproc
 1619               	.LFE101:
 1621               		.comm	LLEDPulse,2,1
 1622               	.global	Timeout
 1623               		.section .bss
 1626               	Timeout:
 1627 0000 0000      		.zero	2
 1628               	.global	RxLEDPulse
 1631               	RxLEDPulse:
 1632 0002 0000      		.zero	2
 1633               	.global	TxLEDPulse
 1636               	TxLEDPulse:
 1637 0004 0000      		.zero	2
 1638               		.data
 1641               	RunBootloader:
 1642 0000 01        		.byte	1
 1643               		.local	CurrAddress
 1644               		.comm	CurrAddress,4,1
 1647               	LineEncoding:
 1648 0001 00        		.byte	0
 1649 0002 00        		.byte	0
 1650 0003 00        		.byte	0
 1651 0004 00        		.byte	0
 1652 0005 00        		.byte	0
 1653 0006 00        		.byte	0
 1654 0007 08        		.byte	8
 1655               		.text
 1656               	.Letext0:
 1657               		.file 6 "/usr/lib/avr/include/stdint.h"
 1658               		.file 7 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1659               		.file 8 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1660               		.file 9 "../../LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1661               		.file 10 "../../LUFA-111009/LUFA/Drivers/USB/Core/USBTask.h"
 1662               		.file 11 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1663               		.file 12 "/usr/lib/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Caterina.c
     /tmp/ccwmAzRr.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwmAzRr.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwmAzRr.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwmAzRr.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwmAzRr.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwmAzRr.s:12     .text.FetchNextCommandByte:0000000000000000 FetchNextCommandByte
     /tmp/ccwmAzRr.s:78     .text.WriteNextResponseByte:0000000000000000 WriteNextResponseByte
     /tmp/ccwmAzRr.s:1636   .bss:0000000000000004 TxLEDPulse
     /tmp/ccwmAzRr.s:152    .text.StartSketch:0000000000000000 StartSketch
     /tmp/ccwmAzRr.s:198    .text.LEDPulse:0000000000000000 LEDPulse
                            *COM*:0000000000000002 LLEDPulse
     /tmp/ccwmAzRr.s:243    .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/ccwmAzRr.s:292    .text.__vector_17:0000000000000000 __vector_17
     /tmp/ccwmAzRr.s:1631   .bss:0000000000000002 RxLEDPulse
     /tmp/ccwmAzRr.s:1626   .bss:0000000000000000 Timeout
     /tmp/ccwmAzRr.s:405    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccwmAzRr.s:448    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccwmAzRr.s:1647   .data:0000000000000001 LineEncoding
     /tmp/ccwmAzRr.s:533    .text.CDC_Task:0000000000000000 CDC_Task
                             .bss:0000000000000006 CurrAddress
     /tmp/ccwmAzRr.s:1502   .text.startup.main:0000000000000000 main
     /tmp/ccwmAzRr.s:1641   .data:0000000000000000 RunBootloader

UNDEFINED SYMBOLS
USB_Init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
eeprom_read_byte
eeprom_write_byte
USB_USBTask
__do_copy_data
__do_clear_bss
