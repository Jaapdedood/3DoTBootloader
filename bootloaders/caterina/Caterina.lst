   1               		.file	"Caterina.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.FetchNextCommandByte,"ax",@progbits
  12               	FetchNextCommandByte:
  13               	.LFB112:
  14               		.file 1 "Caterina.c"
   1:Caterina.c    **** /*
   2:Caterina.c    ****              LUFA Library
   3:Caterina.c    ****      Copyright (C) Dean Camera, 2011.
   4:Caterina.c    **** 
   5:Caterina.c    ****   dean [at] fourwalledcubicle [dot] com
   6:Caterina.c    ****            www.lufa-lib.org
   7:Caterina.c    **** */
   8:Caterina.c    **** 
   9:Caterina.c    **** /*
  10:Caterina.c    ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Caterina.c    **** 
  12:Caterina.c    ****   Permission to use, copy, modify, distribute, and sell this
  13:Caterina.c    ****   software and its documentation for any purpose is hereby granted
  14:Caterina.c    ****   without fee, provided that the above copyright notice appear in
  15:Caterina.c    ****   all copies and that both that the copyright notice and this
  16:Caterina.c    ****   permission notice and warranty disclaimer appear in supporting
  17:Caterina.c    ****   documentation, and that the name of the author not be used in
  18:Caterina.c    ****   advertising or publicity pertaining to distribution of the
  19:Caterina.c    ****   software without specific, written prior permission.
  20:Caterina.c    **** 
  21:Caterina.c    ****   The author disclaim all warranties with regard to this
  22:Caterina.c    ****   software, including all implied warranties of merchantability
  23:Caterina.c    ****   and fitness.  In no event shall the author be liable for any
  24:Caterina.c    ****   special, indirect or consequential damages or any damages
  25:Caterina.c    ****   whatsoever resulting from loss of use, data or profits, whether
  26:Caterina.c    ****   in an action of contract, negligence or other tortious action,
  27:Caterina.c    ****   arising out of or in connection with the use or performance of
  28:Caterina.c    ****   this software.
  29:Caterina.c    **** */
  30:Caterina.c    **** 
  31:Caterina.c    **** /*
  32:Caterina.c    **** Copyright (c) 2014 Pololu Corporation.  For more information, see
  33:Caterina.c    **** 
  34:Caterina.c    **** 
  35:Caterina.c    **** http://www.pololu.com/
  36:Caterina.c    **** http://forum.pololu.com/
  37:Caterina.c    **** 
  38:Caterina.c    **** Permission is hereby granted, free of charge, to any person
  39:Caterina.c    **** obtaining a copy of this software and associated documentation
  40:Caterina.c    **** files (the "Software"), to deal in the Software without
  41:Caterina.c    **** restriction, including without limitation the rights to use,
  42:Caterina.c    **** copy, modify, merge, publish, distribute, sublicense, and/or sell
  43:Caterina.c    **** copies of the Software, and to permit persons to whom the
  44:Caterina.c    **** Software is furnished to do so, subject to the following
  45:Caterina.c    **** conditions:
  46:Caterina.c    **** 
  47:Caterina.c    **** The above copyright notice and this permission notice shall be
  48:Caterina.c    **** included in all copies or substantial portions of the Software.
  49:Caterina.c    **** 
  50:Caterina.c    **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  51:Caterina.c    **** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  52:Caterina.c    **** OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  53:Caterina.c    **** NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  54:Caterina.c    **** HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  55:Caterina.c    **** WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  56:Caterina.c    **** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  57:Caterina.c    **** OTHER DEALINGS IN THE SOFTWARE.
  58:Caterina.c    **** */
  59:Caterina.c    **** 
  60:Caterina.c    **** /*
  61:Caterina.c    **** File modified by Jaap de Dood to remain in Bootloader while 3DoT power switch is in "Program" Posit
  62:Caterina.c    **** */
  63:Caterina.c    **** 
  64:Caterina.c    **** /** \file
  65:Caterina.c    ****  *
  66:Caterina.c    ****  *  Main source file for the CDC class bootloader. This file contains the complete bootloader logic
  67:Caterina.c    ****  */
  68:Caterina.c    **** 
  69:Caterina.c    **** #define  INCLUDE_FROM_CATERINA_C
  70:Caterina.c    **** #include "Caterina.h"
  71:Caterina.c    **** #include <util/delay.h> // for _delay_ms()
  72:Caterina.c    **** 
  73:Caterina.c    **** /** Contains the current baud rate and other settings of the first virtual serial port. This must b
  74:Caterina.c    ****  *  operating systems will not open the port unless the settings can be set successfully.
  75:Caterina.c    ****  */
  76:Caterina.c    **** static CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 0,
  77:Caterina.c    ****                                            .CharFormat  = CDC_LINEENCODING_OneStopBit,
  78:Caterina.c    ****                                            .ParityType  = CDC_PARITY_None,
  79:Caterina.c    ****                                            .DataBits    = 8                            };
  80:Caterina.c    **** 
  81:Caterina.c    **** /** Current address counter. This stores the current address of the FLASH or EEPROM as set by the h
  82:Caterina.c    ****  *  and is used when reading or writing to the AVRs memory (either FLASH or EEPROM depending on the
  83:Caterina.c    ****  *  command.)
  84:Caterina.c    ****  */
  85:Caterina.c    **** static uint32_t CurrAddress;
  86:Caterina.c    **** 
  87:Caterina.c    **** /** Flag to indicate if the bootloader should be running, or should exit and allow the application 
  88:Caterina.c    ****  *  via a watchdog reset. When cleared the bootloader will exit, starting the watchdog and entering
  89:Caterina.c    ****  *  loop until the AVR restarts and the application runs.
  90:Caterina.c    ****  */
  91:Caterina.c    **** //static bool RunBootloader = true;
  92:Caterina.c    **** 
  93:Caterina.c    **** /* Pulse generation counters to keep track of the time remaining for each pulse type */
  94:Caterina.c    **** #define TX_RX_LED_PULSE_PERIOD 100
  95:Caterina.c    **** uint16_t TxLEDPulse = 0; // time remaining for Tx LED pulse
  96:Caterina.c    **** uint16_t RxLEDPulse = 0; // time remaining for Rx LED pulse
  97:Caterina.c    **** 
  98:Caterina.c    **** /* Bootloader timeout timer */
  99:Caterina.c    **** #define TIMEOUT_PERIOD	488
 100:Caterina.c    **** uint16_t Timeout = 0;
 101:Caterina.c    **** 
 102:Caterina.c    **** /* MCP4017 current limit R = 100k(POT_STEPS/128), see TPS2553 datasheet for R/Ilim graph */
 103:Caterina.c    **** #define POT_STEPS 0x73 // ~250mA
 104:Caterina.c    **** #define SLA_W 0x5E // SLA = 0x2F, MSB transmitted first, W = 0
 105:Caterina.c    **** 
 106:Caterina.c    **** void StartSketch(void)
 107:Caterina.c    **** {
 108:Caterina.c    ****     cli();
 109:Caterina.c    **** 
 110:Caterina.c    ****     /* Undo TIMER1 setup and clear the count before running the sketch */
 111:Caterina.c    ****     TIMSK1 = 0;
 112:Caterina.c    ****     TCCR1B = 0;
 113:Caterina.c    ****     TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 114:Caterina.c    ****     TCNT1L = 0;
 115:Caterina.c    **** 
 116:Caterina.c    ****     /* Relocate the interrupt vector table to the application section */
 117:Caterina.c    ****     MCUCR = (1 << IVCE);
 118:Caterina.c    ****     MCUCR = 0;
 119:Caterina.c    **** 
 120:Caterina.c    ****     L_LED_OFF();
 121:Caterina.c    ****     TX_LED_OFF();
 122:Caterina.c    ****     RX_LED_OFF();
 123:Caterina.c    **** 
 124:Caterina.c    ****     /* jump to beginning of application space */
 125:Caterina.c    ****     __asm__ volatile("jmp 0x0000");
 126:Caterina.c    **** }
 127:Caterina.c    **** 
 128:Caterina.c    **** void TWIInit(void)
 129:Caterina.c    **** {
 130:Caterina.c    ****     /* Set SCL frequency to 200kHz */
 131:Caterina.c    ****     TWSR = 0x00;
 132:Caterina.c    ****     TWBR = 0x0C;
 133:Caterina.c    ****     /* Enable TWI */
 134:Caterina.c    ****     TWCR = (1<<TWEN);
 135:Caterina.c    **** }
 136:Caterina.c    **** 
 137:Caterina.c    **** void TWIStart(void)
 138:Caterina.c    **** {
 139:Caterina.c    ****     /* Send START condition */
 140:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 141:Caterina.c    ****     /* Wait for TWINT Flag set. This indicates that the START condition has been transmitted */
 142:Caterina.c    ****     while(!(TWCR & (1<<TWINT)));
 143:Caterina.c    **** }
 144:Caterina.c    **** 
 145:Caterina.c    **** void TWIStop(void)
 146:Caterina.c    **** {
 147:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 148:Caterina.c    **** }
 149:Caterina.c    **** 
 150:Caterina.c    **** void TWIWrite(uint8_t u8data)
 151:Caterina.c    **** {
 152:Caterina.c    ****     /* Load data into TWDR Register. Clear TWINT bit in TWCR to start transmission */
 153:Caterina.c    ****     TWDR = u8data;
 154:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN);
 155:Caterina.c    ****     /* Wait for TWINT Flag set. This indicates that the data has been transmitted, and ACK/NACK has
 156:Caterina.c    ****     while(!(TWCR & (1<<TWINT)));
 157:Caterina.c    **** }
 158:Caterina.c    **** 
 159:Caterina.c    **** void SetupCurrentLimit(void)
 160:Caterina.c    **** {
 161:Caterina.c    ****     TWIStart();
 162:Caterina.c    ****     /* Check value of TWI Status Register. Mask prescaler bits. If status different from START go t
 163:Caterina.c    ****     /* if ((TWSR & 0xF8) != START){
 164:Caterina.c    ****        return ERROR;
 165:Caterina.c    ****        }*/
 166:Caterina.c    ****     TWIWrite(SLA_W);
 167:Caterina.c    ****     /* Check value of TWI Status Register. Mask prescaler bits. If status different from MT_SLA_ACK
 168:Caterina.c    ****     /*if((TWSR & 0xF8) != MT_SLA_ACK){
 169:Caterina.c    ****       return ERROR;
 170:Caterina.c    ****       }*/
 171:Caterina.c    ****     TWIWrite(POT_STEPS);
 172:Caterina.c    ****     /* Check value of TWI Status Register. Mask prescaler bits. If status different from MT_DATA_AC
 173:Caterina.c    ****     /*if((TWSR & 0xF8) != MT_DATA_ACK){
 174:Caterina.c    ****       return ERROR;
 175:Caterina.c    ****       }*/
 176:Caterina.c    ****     TWIStop();
 177:Caterina.c    **** }
 178:Caterina.c    **** 
 179:Caterina.c    **** /*	Breathing animation on L LED indicates bootloader is running */
 180:Caterina.c    **** uint16_t LLEDPulse;
 181:Caterina.c    **** void LEDPulse(void)
 182:Caterina.c    **** {
 183:Caterina.c    ****     LLEDPulse++;
 184:Caterina.c    ****     uint8_t p = LLEDPulse >> 8;
 185:Caterina.c    ****     if (p > 127)
 186:Caterina.c    ****         p = 254-p;
 187:Caterina.c    ****     p += p;
 188:Caterina.c    ****     if (((uint8_t)LLEDPulse) > p)
 189:Caterina.c    ****         L_LED_OFF();
 190:Caterina.c    ****     else
 191:Caterina.c    ****         L_LED_ON();
 192:Caterina.c    **** }
 193:Caterina.c    **** 
 194:Caterina.c    **** /** Main program entry point. This routine configures the hardware required by the bootloader, then
 195:Caterina.c    ****  *  runs the bootloader processing routine until it times out or is instructed to exit.
 196:Caterina.c    ****  */
 197:Caterina.c    **** int main(void)
 198:Caterina.c    **** {
 199:Caterina.c    ****     /* Clear all reset flags - some may be used by sketch */
 200:Caterina.c    ****     MCUSR = 0;
 201:Caterina.c    ****     /* Watchdog may be configured with a 15 ms period so must disable it before going any further *
 202:Caterina.c    ****     wdt_disable();
 203:Caterina.c    **** 
 204:Caterina.c    ****     /* Initialize BootMode switch pin*/
 205:Caterina.c    ****     BootMode_Init();
 206:Caterina.c    ****     _delay_ms(10);    // allow time for caps to charge
 207:Caterina.c    **** 
 208:Caterina.c    ****     if ((isBootMode() || (pgm_read_word(0) == 0xFFFF)))
 209:Caterina.c    ****     {
 210:Caterina.c    ****         // Switch is in Boot mode position or there is no sketch
 211:Caterina.c    **** 
 212:Caterina.c    ****         /* Setup hardware required for the bootloader */
 213:Caterina.c    ****         SetupHardware();
 214:Caterina.c    **** 
 215:Caterina.c    ****         /* Enable global interrupts so that the USB stack can function */
 216:Caterina.c    ****         sei();
 217:Caterina.c    **** 
 218:Caterina.c    ****         while(isBootMode()){
 219:Caterina.c    ****             CDC_Task();
 220:Caterina.c    ****             USB_USBTask();
 221:Caterina.c    **** 
 222:Caterina.c    ****             LEDPulse();
 223:Caterina.c    ****         }
 224:Caterina.c    ****     }
 225:Caterina.c    **** /* Disconnect from the host - USB interface will be reset later along with the AVR */
 226:Caterina.c    ****     USB_Detach();
 227:Caterina.c    **** 
 228:Caterina.c    ****     SetupCurrentLimit();
 229:Caterina.c    **** /* Jump to beginning of application space to run the sketch - do not reset */
 230:Caterina.c    ****     StartSketch();
 231:Caterina.c    **** }
 232:Caterina.c    **** 
 233:Caterina.c    **** /** Configures all hardware re
 234:Caterina.c    ****     quired for the bootloader. */
 235:Caterina.c    **** void SetupHardware(void)
 236:Caterina.c    **** {
 237:Caterina.c    ****     /* Disable clock division */
 238:Caterina.c    ****     //clock_prescale_set(clock_div_1); // redundant
 239:Caterina.c    ****     CPU_PRESCALE(0);
 240:Caterina.c    **** 
 241:Caterina.c    ****     /* Relocate the interrupt vector table to the bootloader section */
 242:Caterina.c    ****     MCUCR = (1 << IVCE);
 243:Caterina.c    ****     MCUCR = (1 << IVSEL);
 244:Caterina.c    **** 
 245:Caterina.c    ****     LED_SETUP();
 246:Caterina.c    ****     L_LED_OFF();
 247:Caterina.c    ****     TX_LED_OFF();
 248:Caterina.c    ****     RX_LED_OFF();
 249:Caterina.c    **** 
 250:Caterina.c    ****     /* Initialize TIMER1 to handle bootloader timeout and LED tasks.
 251:Caterina.c    ****      * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
 252:Caterina.c    ****      * Our chosen compare match generates an interrupt every 1 ms.
 253:Caterina.c    ****      * This interrupt is disabled selectively when doing memory reading, erasing,
 254:Caterina.c    ****      * or writing since SPM has tight timing requirements.
 255:Caterina.c    ****      */
 256:Caterina.c    ****     OCR1AH = 0;
 257:Caterina.c    ****     OCR1AL = 250;
 258:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 259:Caterina.c    ****     TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 260:Caterina.c    **** 
 261:Caterina.c    ****     /* Initialize USB Subsystem */
 262:Caterina.c    ****     USB_Init();
 263:Caterina.c    **** }
 264:Caterina.c    **** 
 265:Caterina.c    **** //uint16_t ctr = 0;
 266:Caterina.c    **** ISR(TIMER1_COMPA_vect, ISR_BLOCK)
 267:Caterina.c    **** {
 268:Caterina.c    ****     /* Reset counter */
 269:Caterina.c    ****     TCNT1H = 0;
 270:Caterina.c    ****     TCNT1L = 0;
 271:Caterina.c    **** 
 272:Caterina.c    ****     /* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
 273:Caterina.c    ****     if (TxLEDPulse && !(--TxLEDPulse))
 274:Caterina.c    ****         TX_LED_OFF();
 275:Caterina.c    ****     if (RxLEDPulse && !(--RxLEDPulse))
 276:Caterina.c    ****         RX_LED_OFF();
 277:Caterina.c    **** 
 278:Caterina.c    ****     if (pgm_read_word(0) != 0xFFFF)
 279:Caterina.c    ****         Timeout++;
 280:Caterina.c    **** }
 281:Caterina.c    **** 
 282:Caterina.c    **** /** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints re
 283:Caterina.c    ****  *  to relay data to and from the attached USB host.
 284:Caterina.c    ****  */
 285:Caterina.c    **** void EVENT_USB_Device_ConfigurationChanged(void)
 286:Caterina.c    **** {
 287:Caterina.c    ****     /* Setup CDC Notification, Rx and Tx Endpoints */
 288:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
 289:Caterina.c    ****                                ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
 290:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 291:Caterina.c    **** 
 292:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
 293:Caterina.c    ****                                ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
 294:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 295:Caterina.c    **** 
 296:Caterina.c    ****     Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
 297:Caterina.c    ****                                ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
 298:Caterina.c    ****                                ENDPOINT_BANK_SINGLE);
 299:Caterina.c    **** }
 300:Caterina.c    **** 
 301:Caterina.c    **** /** Event handler for the USB_ControlRequest event. This is used to catch and process control reque
 302:Caterina.c    ****  *  the device from the USB host before passing along unhandled control requests to the library for
 303:Caterina.c    ****  *  internally.
 304:Caterina.c    ****  */
 305:Caterina.c    **** void EVENT_USB_Device_ControlRequest(void)
 306:Caterina.c    **** {
 307:Caterina.c    ****     /* Ignore any requests that aren't directed to the CDC interface */
 308:Caterina.c    ****     if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
 309:Caterina.c    ****         (REQTYPE_CLASS | REQREC_INTERFACE))
 310:Caterina.c    ****     {
 311:Caterina.c    ****         return;
 312:Caterina.c    ****     }
 313:Caterina.c    **** 
 314:Caterina.c    ****     /* Process CDC specific control requests */
 315:Caterina.c    ****     switch (USB_ControlRequest.bRequest)
 316:Caterina.c    ****     {
 317:Caterina.c    ****         case CDC_REQ_GetLineEncoding:
 318:Caterina.c    ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 319:Caterina.c    ****             {
 320:Caterina.c    ****                 Endpoint_ClearSETUP();
 321:Caterina.c    **** 
 322:Caterina.c    ****                 /* Write the line coding data to the control endpoint */
 323:Caterina.c    ****                 Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 324:Caterina.c    ****                 Endpoint_ClearOUT();
 325:Caterina.c    ****             }
 326:Caterina.c    **** 
 327:Caterina.c    ****             break;
 328:Caterina.c    ****         case CDC_REQ_SetLineEncoding:
 329:Caterina.c    ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 330:Caterina.c    ****             {
 331:Caterina.c    ****                 Endpoint_ClearSETUP();
 332:Caterina.c    **** 
 333:Caterina.c    ****                 /* Read the line coding data in from the host into the global struct */
 334:Caterina.c    ****                 Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 335:Caterina.c    ****                 Endpoint_ClearIN();
 336:Caterina.c    ****             }
 337:Caterina.c    **** 
 338:Caterina.c    ****             break;
 339:Caterina.c    ****     }
 340:Caterina.c    **** }
 341:Caterina.c    **** 
 342:Caterina.c    **** #if !defined(NO_BLOCK_SUPPORT)
 343:Caterina.c    **** /** Reads or writes a block of EEPROM or FLASH memory to or from the appropriate CDC data endpoint,
 344:Caterina.c    ****  *  on the AVR910 protocol command issued.
 345:Caterina.c    ****  *
 346:Caterina.c    ****  *  \param[in] Command  Single character AVR910 protocol command indicating what memory operation t
 347:Caterina.c    ****  */
 348:Caterina.c    **** static void ReadWriteMemoryBlock(const uint8_t Command)
 349:Caterina.c    **** {
 350:Caterina.c    ****     uint16_t BlockSize;
 351:Caterina.c    ****     char     MemoryType;
 352:Caterina.c    **** 
 353:Caterina.c    ****     bool     HighByte = false;
 354:Caterina.c    ****     uint8_t  LowByte  = 0;
 355:Caterina.c    **** 
 356:Caterina.c    ****     BlockSize  = (FetchNextCommandByte() << 8);
 357:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 358:Caterina.c    **** 
 359:Caterina.c    ****     MemoryType =  FetchNextCommandByte();
 360:Caterina.c    **** 
 361:Caterina.c    ****     if ((MemoryType != 'E') && (MemoryType != 'F'))
 362:Caterina.c    ****     {
 363:Caterina.c    ****         /* Send error byte back to the host */
 364:Caterina.c    ****         WriteNextResponseByte('?');
 365:Caterina.c    **** 
 366:Caterina.c    ****         return;
 367:Caterina.c    ****     }
 368:Caterina.c    **** 
 369:Caterina.c    ****     /* Disable timer 1 interrupt - can't afford to process nonessential interrupts
 370:Caterina.c    ****      * while doing SPM tasks */
 371:Caterina.c    ****     TIMSK1 = 0;
 372:Caterina.c    **** 
 373:Caterina.c    ****     /* Check if command is to read memory */
 374:Caterina.c    ****     if (Command == 'g')
 375:Caterina.c    ****     {
 376:Caterina.c    ****         /* Re-enable RWW section */
 377:Caterina.c    ****         boot_rww_enable();
 378:Caterina.c    **** 
 379:Caterina.c    ****         while (BlockSize--)
 380:Caterina.c    ****         {
 381:Caterina.c    ****             if (MemoryType == 'F')
 382:Caterina.c    ****             {
 383:Caterina.c    ****                 /* Read the next FLASH byte from the current FLASH page */
 384:Caterina.c    ****                 #if (FLASHEND > 0xFFFF)
 385:Caterina.c    ****                 WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
 386:Caterina.c    ****                 #else
 387:Caterina.c    ****                 WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
 388:Caterina.c    ****                 #endif
 389:Caterina.c    **** 
 390:Caterina.c    ****                 /* If both bytes in current word have been read, increment the address counter */
 391:Caterina.c    ****                 if (HighByte)
 392:Caterina.c    ****                   CurrAddress += 2;
 393:Caterina.c    **** 
 394:Caterina.c    ****                 HighByte = !HighByte;
 395:Caterina.c    ****             }
 396:Caterina.c    ****             else
 397:Caterina.c    ****             {
 398:Caterina.c    ****                 /* Read the next EEPROM byte into the endpoint */
 399:Caterina.c    ****                 WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
 400:Caterina.c    **** 
 401:Caterina.c    ****                 /* Increment the address counter after use */
 402:Caterina.c    ****                 CurrAddress += 2;
 403:Caterina.c    ****             }
 404:Caterina.c    ****         }
 405:Caterina.c    ****     }
 406:Caterina.c    ****     else
 407:Caterina.c    ****     {
 408:Caterina.c    ****         uint32_t PageStartAddress = CurrAddress;
 409:Caterina.c    **** 
 410:Caterina.c    ****         if (MemoryType == 'F')
 411:Caterina.c    ****         {
 412:Caterina.c    ****             boot_page_erase(PageStartAddress);
 413:Caterina.c    ****             boot_spm_busy_wait();
 414:Caterina.c    ****         }
 415:Caterina.c    **** 
 416:Caterina.c    ****         while (BlockSize--)
 417:Caterina.c    ****         {
 418:Caterina.c    ****             if (MemoryType == 'F')
 419:Caterina.c    ****             {
 420:Caterina.c    ****                 /* If both bytes in current word have been written, increment the address counter *
 421:Caterina.c    ****                 if (HighByte)
 422:Caterina.c    ****                 {
 423:Caterina.c    ****                     /* Write the next FLASH word to the current FLASH page */
 424:Caterina.c    ****                     boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
 425:Caterina.c    **** 
 426:Caterina.c    ****                     /* Increment the address counter after use */
 427:Caterina.c    ****                     CurrAddress += 2;
 428:Caterina.c    ****                 }
 429:Caterina.c    ****                 else
 430:Caterina.c    ****                 {
 431:Caterina.c    ****                     LowByte = FetchNextCommandByte();
 432:Caterina.c    ****                 }
 433:Caterina.c    **** 
 434:Caterina.c    ****                 HighByte = !HighByte;
 435:Caterina.c    ****             }
 436:Caterina.c    ****             else
 437:Caterina.c    ****             {
 438:Caterina.c    ****                 /* Write the next EEPROM byte from the endpoint */
 439:Caterina.c    ****                 eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte())
 440:Caterina.c    **** 
 441:Caterina.c    ****                 /* Increment the address counter after use */
 442:Caterina.c    ****                 CurrAddress += 2;
 443:Caterina.c    ****             }
 444:Caterina.c    ****         }
 445:Caterina.c    **** 
 446:Caterina.c    ****         /* If in FLASH programming mode, commit the page after writing */
 447:Caterina.c    ****         if (MemoryType == 'F')
 448:Caterina.c    ****         {
 449:Caterina.c    ****             /* Commit the flash page to memory */
 450:Caterina.c    ****             boot_page_write(PageStartAddress);
 451:Caterina.c    **** 
 452:Caterina.c    ****             /* Wait until write operation has completed */
 453:Caterina.c    ****             boot_spm_busy_wait();
 454:Caterina.c    ****         }
 455:Caterina.c    **** 
 456:Caterina.c    ****         /* Send response byte back to the host */
 457:Caterina.c    ****         WriteNextResponseByte('\r');
 458:Caterina.c    ****     }
 459:Caterina.c    **** 
 460:Caterina.c    ****     /* Re-enable timer 1 interrupt disabled earlier in this routine */
 461:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);
 462:Caterina.c    **** }
 463:Caterina.c    **** #endif
 464:Caterina.c    **** 
 465:Caterina.c    **** /** Retrieves the next byte from the host in the CDC data OUT endpoint, and clears the endpoint ban
 466:Caterina.c    ****  *  to allow reception of the next data packet from the host.
 467:Caterina.c    ****  *
 468:Caterina.c    ****  *  \return Next received byte from the host in the CDC data OUT endpoint
 469:Caterina.c    ****  */
 470:Caterina.c    **** static uint8_t FetchNextCommandByte(void)
 471:Caterina.c    **** {
  15               		.loc 1 471 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.LBB80:
  23               	.LBB81:
  24               		.file 2 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
  25               		.loc 2 330 0
  26 0000 84E0      		ldi r24,lo8(4)
  27 0002 8093 E900 		sts 233,r24
  28               	.L2:
  29               	.LBE81:
  30               	.LBE80:
  31               	.LBB82:
  32               	.LBB83:
 331:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  33               		.loc 2 420 0
  34 0006 8091 E800 		lds r24,232
  35               	.LBE83:
  36               	.LBE82:
 472:Caterina.c    ****     /* Select the OUT endpoint so that the next data byte can be read */
 473:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 474:Caterina.c    **** 
 475:Caterina.c    ****     /* If OUT endpoint empty, clear it and wait for the next packet from the host */
 476:Caterina.c    ****     while (!(Endpoint_IsReadWriteAllowed()))
  37               		.loc 1 476 0
  38 000a 85FD      		sbrc r24,5
  39 000c 00C0      		rjmp .L11
  40               	.LBB84:
  41               	.LBB85:
 421:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
  42               		.loc 2 531 0
  43 000e 8091 E800 		lds r24,232
  44 0012 8B77      		andi r24,lo8(123)
  45 0014 8093 E800 		sts 232,r24
  46               	.L3:
  47               	.LBE85:
  48               	.LBE84:
  49               	.LBB86:
  50               	.LBB87:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  51               		.loc 2 479 0
  52 0018 8091 E800 		lds r24,232
  53               	.LBE87:
  54               	.LBE86:
 477:Caterina.c    ****     {
 478:Caterina.c    ****         Endpoint_ClearOUT();
 479:Caterina.c    **** 
 480:Caterina.c    ****         while (!(Endpoint_IsOUTReceived()))
  55               		.loc 1 480 0
  56 001c 82FD      		sbrc r24,2
  57 001e 00C0      		rjmp .L2
 481:Caterina.c    ****         {
 482:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
  58               		.loc 1 482 0
  59 0020 8EB3      		in r24,0x1e
  60 0022 8111      		cpse r24,__zero_reg__
  61 0024 00C0      		rjmp .L3
  62 0026 00C0      		rjmp .L4
  63               	.L11:
  64               	.LBB88:
  65               	.LBB89:
 532:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  66               		.loc 2 612 0
  67 0028 8091 F100 		lds r24,241
  68               	.L4:
  69               	.LBE89:
  70               	.LBE88:
 483:Caterina.c    ****               return 0;
 484:Caterina.c    ****         }
 485:Caterina.c    ****     }
 486:Caterina.c    **** 
 487:Caterina.c    ****     /* Fetch the next byte from the OUT endpoint */
 488:Caterina.c    ****     return Endpoint_Read_8();
 489:Caterina.c    **** }
  71               		.loc 1 489 0
  72 002c 0895      		ret
  73               		.cfi_endproc
  74               	.LFE112:
  76               		.section	.text.WriteNextResponseByte,"ax",@progbits
  78               	WriteNextResponseByte:
  79               	.LFB113:
 490:Caterina.c    **** 
 491:Caterina.c    **** /** Writes the next response byte to the CDC data IN endpoint, and sends the endpoint back if neede
 492:Caterina.c    ****  *  bank when full ready for the next byte in the packet to the host.
 493:Caterina.c    ****  *
 494:Caterina.c    ****  *  \param[in] Response  Next response byte to send to the host
 495:Caterina.c    ****  */
 496:Caterina.c    **** static void WriteNextResponseByte(const uint8_t Response)
 497:Caterina.c    **** {
  80               		.loc 1 497 0
  81               		.cfi_startproc
  82               	.LVL1:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  87               	.LBB90:
  88               	.LBB91:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
  89               		.loc 2 330 0
  90 0000 93E0      		ldi r25,lo8(3)
  91 0002 9093 E900 		sts 233,r25
  92               	.LVL2:
  93               	.LBE91:
  94               	.LBE90:
  95               	.LBB92:
  96               	.LBB93:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  97               		.loc 2 420 0
  98 0006 9091 E800 		lds r25,232
  99               	.LBE93:
 100               	.LBE92:
 498:Caterina.c    ****     /* Select the IN endpoint so that the next data byte can be written */
 499:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 500:Caterina.c    **** 
 501:Caterina.c    ****     /* If IN endpoint full, clear it and wait until ready for the next packet to the host */
 502:Caterina.c    ****     if (!(Endpoint_IsReadWriteAllowed()))
 101               		.loc 1 502 0
 102 000a 95FF      		sbrs r25,5
 103 000c 00C0      		rjmp .L13
 104               	.L17:
 105               	.LVL3:
 106               	.LBB94:
 107               	.LBB95:
 613:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 108               		.loc 2 624 0
 109 000e 8093 F100 		sts 241,r24
 110               	.LVL4:
 111               	.LBE95:
 112               	.LBE94:
 503:Caterina.c    ****     {
 504:Caterina.c    ****         Endpoint_ClearIN();
 505:Caterina.c    **** 
 506:Caterina.c    ****         while (!(Endpoint_IsINReady()))
 507:Caterina.c    ****         {
 508:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
 509:Caterina.c    ****               return;
 510:Caterina.c    ****         }
 511:Caterina.c    ****     }
 512:Caterina.c    **** 
 513:Caterina.c    ****     /* Write the next byte to the IN endpoint */
 514:Caterina.c    ****     Endpoint_Write_8(Response);
 515:Caterina.c    **** 
 516:Caterina.c    ****     TX_LED_ON();
 113               		.loc 1 516 0
 114 0012 5D98      		cbi 0xb,5
 517:Caterina.c    ****     TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 115               		.loc 1 517 0
 116 0014 84E6      		ldi r24,lo8(100)
 117 0016 90E0      		ldi r25,0
 118               	.LVL5:
 119 0018 9093 0000 		sts TxLEDPulse+1,r25
 120 001c 8093 0000 		sts TxLEDPulse,r24
 121               	.LVL6:
 122 0020 0895      		ret
 123               	.LVL7:
 124               	.L13:
 125               	.LBB96:
 126               	.LBB97:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 127               		.loc 2 516 0
 128 0022 9091 E800 		lds r25,232
 129 0026 9E77      		andi r25,lo8(126)
 130 0028 9093 E800 		sts 232,r25
 131               	.L15:
 132               	.LBE97:
 133               	.LBE96:
 134               	.LBB98:
 135               	.LBB99:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 136               		.loc 2 467 0
 137 002c 9091 E800 		lds r25,232
 138               	.LBE99:
 139               	.LBE98:
 506:Caterina.c    ****         {
 140               		.loc 1 506 0
 141 0030 90FD      		sbrc r25,0
 142 0032 00C0      		rjmp .L17
 508:Caterina.c    ****               return;
 143               		.loc 1 508 0
 144 0034 9EB3      		in r25,0x1e
 145 0036 9111      		cpse r25,__zero_reg__
 146 0038 00C0      		rjmp .L15
 147 003a 0895      		ret
 148               		.cfi_endproc
 149               	.LFE113:
 151               		.section	.text.StartSketch,"ax",@progbits
 152               	.global	StartSketch
 154               	StartSketch:
 155               	.LFB99:
 107:Caterina.c    ****     cli();
 156               		.loc 1 107 0
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 108:Caterina.c    **** 
 162               		.loc 1 108 0
 163               	/* #APP */
 164               	 ;  108 "Caterina.c" 1
 165 0000 F894      		cli
 166               	 ;  0 "" 2
 111:Caterina.c    ****     TCCR1B = 0;
 167               		.loc 1 111 0
 168               	/* #NOAPP */
 169 0002 1092 6F00 		sts 111,__zero_reg__
 112:Caterina.c    ****     TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
 170               		.loc 1 112 0
 171 0006 1092 8100 		sts 129,__zero_reg__
 113:Caterina.c    ****     TCNT1L = 0;
 172               		.loc 1 113 0
 173 000a 1092 8500 		sts 133,__zero_reg__
 114:Caterina.c    **** 
 174               		.loc 1 114 0
 175 000e 1092 8400 		sts 132,__zero_reg__
 117:Caterina.c    ****     MCUCR = 0;
 176               		.loc 1 117 0
 177 0012 81E0      		ldi r24,lo8(1)
 178 0014 85BF      		out 0x35,r24
 118:Caterina.c    **** 
 179               		.loc 1 118 0
 180 0016 15BE      		out 0x35,__zero_reg__
 120:Caterina.c    ****     TX_LED_OFF();
 181               		.loc 1 120 0
 182 0018 4798      		cbi 0x8,7
 121:Caterina.c    ****     RX_LED_OFF();
 183               		.loc 1 121 0
 184 001a 5D9A      		sbi 0xb,5
 122:Caterina.c    **** 
 185               		.loc 1 122 0
 186 001c 289A      		sbi 0x5,0
 125:Caterina.c    **** }
 187               		.loc 1 125 0
 188               	/* #APP */
 189               	 ;  125 "Caterina.c" 1
 190 001e 0C94 0000 		jmp 0x0000
 191               	 ;  0 "" 2
 192               	/* #NOAPP */
 193 0022 0895      		ret
 194               		.cfi_endproc
 195               	.LFE99:
 197               		.section	.text.TWIInit,"ax",@progbits
 198               	.global	TWIInit
 200               	TWIInit:
 201               	.LFB100:
 129:Caterina.c    ****     /* Set SCL frequency to 200kHz */
 202               		.loc 1 129 0
 203               		.cfi_startproc
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 131:Caterina.c    ****     TWBR = 0x0C;
 208               		.loc 1 131 0
 209 0000 1092 B900 		sts 185,__zero_reg__
 132:Caterina.c    ****     /* Enable TWI */
 210               		.loc 1 132 0
 211 0004 8CE0      		ldi r24,lo8(12)
 212 0006 8093 B800 		sts 184,r24
 134:Caterina.c    **** }
 213               		.loc 1 134 0
 214 000a 84E0      		ldi r24,lo8(4)
 215 000c 8093 BC00 		sts 188,r24
 216 0010 0895      		ret
 217               		.cfi_endproc
 218               	.LFE100:
 220               		.section	.text.TWIStart,"ax",@progbits
 221               	.global	TWIStart
 223               	TWIStart:
 224               	.LFB101:
 138:Caterina.c    ****     /* Send START condition */
 225               		.loc 1 138 0
 226               		.cfi_startproc
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
 140:Caterina.c    ****     /* Wait for TWINT Flag set. This indicates that the START condition has been transmitted */
 231               		.loc 1 140 0
 232 0000 84EA      		ldi r24,lo8(-92)
 233 0002 8093 BC00 		sts 188,r24
 234               	.L24:
 142:Caterina.c    **** }
 235               		.loc 1 142 0 discriminator 1
 236 0006 8091 BC00 		lds r24,188
 237 000a 87FF      		sbrs r24,7
 238 000c 00C0      		rjmp .L24
 239               	/* epilogue start */
 143:Caterina.c    **** 
 240               		.loc 1 143 0
 241 000e 0895      		ret
 242               		.cfi_endproc
 243               	.LFE101:
 245               		.section	.text.TWIStop,"ax",@progbits
 246               	.global	TWIStop
 248               	TWIStop:
 249               	.LFB102:
 146:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 250               		.loc 1 146 0
 251               		.cfi_startproc
 252               	/* prologue: function */
 253               	/* frame size = 0 */
 254               	/* stack size = 0 */
 255               	.L__stack_usage = 0
 147:Caterina.c    **** }
 256               		.loc 1 147 0
 257 0000 84E9      		ldi r24,lo8(-108)
 258 0002 8093 BC00 		sts 188,r24
 259 0006 0895      		ret
 260               		.cfi_endproc
 261               	.LFE102:
 263               		.section	.text.TWIWrite,"ax",@progbits
 264               	.global	TWIWrite
 266               	TWIWrite:
 267               	.LFB103:
 151:Caterina.c    ****     /* Load data into TWDR Register. Clear TWINT bit in TWCR to start transmission */
 268               		.loc 1 151 0
 269               		.cfi_startproc
 270               	.LVL8:
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
 153:Caterina.c    ****     TWCR = (1<<TWINT)|(1<<TWEN);
 275               		.loc 1 153 0
 276 0000 8093 BB00 		sts 187,r24
 154:Caterina.c    ****     /* Wait for TWINT Flag set. This indicates that the data has been transmitted, and ACK/NACK has
 277               		.loc 1 154 0
 278 0004 84E8      		ldi r24,lo8(-124)
 279               	.LVL9:
 280 0006 8093 BC00 		sts 188,r24
 281               	.LVL10:
 282               	.L28:
 156:Caterina.c    **** }
 283               		.loc 1 156 0 discriminator 1
 284 000a 8091 BC00 		lds r24,188
 285 000e 87FF      		sbrs r24,7
 286 0010 00C0      		rjmp .L28
 287               	/* epilogue start */
 157:Caterina.c    **** 
 288               		.loc 1 157 0
 289 0012 0895      		ret
 290               		.cfi_endproc
 291               	.LFE103:
 293               		.section	.text.SetupCurrentLimit,"ax",@progbits
 294               	.global	SetupCurrentLimit
 296               	SetupCurrentLimit:
 297               	.LFB104:
 160:Caterina.c    ****     TWIStart();
 298               		.loc 1 160 0
 299               		.cfi_startproc
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 0 */
 303               	.L__stack_usage = 0
 161:Caterina.c    ****     /* Check value of TWI Status Register. Mask prescaler bits. If status different from START go t
 304               		.loc 1 161 0
 305 0000 0E94 0000 		call TWIStart
 306               	.LVL11:
 166:Caterina.c    ****     /* Check value of TWI Status Register. Mask prescaler bits. If status different from MT_SLA_ACK
 307               		.loc 1 166 0
 308 0004 8EE5      		ldi r24,lo8(94)
 309 0006 0E94 0000 		call TWIWrite
 310               	.LVL12:
 171:Caterina.c    ****     /* Check value of TWI Status Register. Mask prescaler bits. If status different from MT_DATA_AC
 311               		.loc 1 171 0
 312 000a 83E7      		ldi r24,lo8(115)
 313 000c 0E94 0000 		call TWIWrite
 314               	.LVL13:
 315               	.LBB102:
 316               	.LBB103:
 147:Caterina.c    **** }
 317               		.loc 1 147 0
 318 0010 84E9      		ldi r24,lo8(-108)
 319 0012 8093 BC00 		sts 188,r24
 320 0016 0895      		ret
 321               	.LBE103:
 322               	.LBE102:
 323               		.cfi_endproc
 324               	.LFE104:
 326               		.section	.text.LEDPulse,"ax",@progbits
 327               	.global	LEDPulse
 329               	LEDPulse:
 330               	.LFB105:
 182:Caterina.c    ****     LLEDPulse++;
 331               		.loc 1 182 0
 332               		.cfi_startproc
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 0 */
 336               	.L__stack_usage = 0
 183:Caterina.c    ****     uint8_t p = LLEDPulse >> 8;
 337               		.loc 1 183 0
 338 0000 2091 0000 		lds r18,LLEDPulse
 339 0004 3091 0000 		lds r19,LLEDPulse+1
 340 0008 2F5F      		subi r18,-1
 341 000a 3F4F      		sbci r19,-1
 342 000c 3093 0000 		sts LLEDPulse+1,r19
 343 0010 2093 0000 		sts LLEDPulse,r18
 184:Caterina.c    ****     if (p > 127)
 344               		.loc 1 184 0
 345 0014 832F      		mov r24,r19
 346               	.LVL14:
 185:Caterina.c    ****         p = 254-p;
 347               		.loc 1 185 0
 348 0016 37FF      		sbrs r19,7
 349 0018 00C0      		rjmp .L32
 186:Caterina.c    ****     p += p;
 350               		.loc 1 186 0
 351 001a 8EEF      		ldi r24,lo8(-2)
 352 001c 831B      		sub r24,r19
 353               	.LVL15:
 354               	.L32:
 188:Caterina.c    ****         L_LED_OFF();
 355               		.loc 1 188 0
 356 001e 3327      		clr r19
 357 0020 880F      		lsl r24
 358               	.LVL16:
 359 0022 90E0      		ldi r25,0
 360 0024 8217      		cp r24,r18
 361 0026 9307      		cpc r25,r19
 362 0028 04F4      		brge .L33
 189:Caterina.c    ****     else
 363               		.loc 1 189 0
 364 002a 4798      		cbi 0x8,7
 365 002c 0895      		ret
 366               	.L33:
 191:Caterina.c    **** }
 367               		.loc 1 191 0
 368 002e 479A      		sbi 0x8,7
 369 0030 0895      		ret
 370               		.cfi_endproc
 371               	.LFE105:
 373               		.section	.text.SetupHardware,"ax",@progbits
 374               	.global	SetupHardware
 376               	SetupHardware:
 377               	.LFB107:
 236:Caterina.c    ****     /* Disable clock division */
 378               		.loc 1 236 0
 379               		.cfi_startproc
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
 239:Caterina.c    **** 
 384               		.loc 1 239 0
 385 0000 E1E6      		ldi r30,lo8(97)
 386 0002 F0E0      		ldi r31,0
 387 0004 80E8      		ldi r24,lo8(-128)
 388 0006 8083      		st Z,r24
 389 0008 1082      		st Z,__zero_reg__
 242:Caterina.c    ****     MCUCR = (1 << IVSEL);
 390               		.loc 1 242 0
 391 000a 81E0      		ldi r24,lo8(1)
 392 000c 85BF      		out 0x35,r24
 243:Caterina.c    **** 
 393               		.loc 1 243 0
 394 000e 82E0      		ldi r24,lo8(2)
 395 0010 85BF      		out 0x35,r24
 245:Caterina.c    ****     L_LED_OFF();
 396               		.loc 1 245 0
 397 0012 3F9A      		sbi 0x7,7
 398 0014 209A      		sbi 0x4,0
 399 0016 559A      		sbi 0xa,5
 246:Caterina.c    ****     TX_LED_OFF();
 400               		.loc 1 246 0
 401 0018 4798      		cbi 0x8,7
 247:Caterina.c    ****     RX_LED_OFF();
 402               		.loc 1 247 0
 403 001a 5D9A      		sbi 0xb,5
 248:Caterina.c    **** 
 404               		.loc 1 248 0
 405 001c 289A      		sbi 0x5,0
 256:Caterina.c    ****     OCR1AL = 250;
 406               		.loc 1 256 0
 407 001e 1092 8900 		sts 137,__zero_reg__
 257:Caterina.c    ****     TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
 408               		.loc 1 257 0
 409 0022 9AEF      		ldi r25,lo8(-6)
 410 0024 9093 8800 		sts 136,r25
 258:Caterina.c    ****     TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
 411               		.loc 1 258 0
 412 0028 8093 6F00 		sts 111,r24
 259:Caterina.c    **** 
 413               		.loc 1 259 0
 414 002c 83E0      		ldi r24,lo8(3)
 415 002e 8093 8100 		sts 129,r24
 262:Caterina.c    **** }
 416               		.loc 1 262 0
 417 0032 0C94 0000 		jmp USB_Init
 418               	.LVL17:
 419               		.cfi_endproc
 420               	.LFE107:
 422               		.section	.text.__vector_17,"ax",@progbits
 423               	.global	__vector_17
 425               	__vector_17:
 426               	.LFB108:
 267:Caterina.c    ****     /* Reset counter */
 427               		.loc 1 267 0
 428               		.cfi_startproc
 429 0000 1F92      		push r1
 430               	.LCFI0:
 431               		.cfi_def_cfa_offset 3
 432               		.cfi_offset 1, -2
 433 0002 0F92      		push r0
 434               	.LCFI1:
 435               		.cfi_def_cfa_offset 4
 436               		.cfi_offset 0, -3
 437 0004 0FB6      		in r0,__SREG__
 438 0006 0F92      		push r0
 439 0008 1124      		clr __zero_reg__
 440 000a 2F93      		push r18
 441               	.LCFI2:
 442               		.cfi_def_cfa_offset 5
 443               		.cfi_offset 18, -4
 444 000c 8F93      		push r24
 445               	.LCFI3:
 446               		.cfi_def_cfa_offset 6
 447               		.cfi_offset 24, -5
 448 000e 9F93      		push r25
 449               	.LCFI4:
 450               		.cfi_def_cfa_offset 7
 451               		.cfi_offset 25, -6
 452 0010 EF93      		push r30
 453               	.LCFI5:
 454               		.cfi_def_cfa_offset 8
 455               		.cfi_offset 30, -7
 456 0012 FF93      		push r31
 457               	.LCFI6:
 458               		.cfi_def_cfa_offset 9
 459               		.cfi_offset 31, -8
 460               	/* prologue: Signal */
 461               	/* frame size = 0 */
 462               	/* stack size = 8 */
 463               	.L__stack_usage = 8
 269:Caterina.c    ****     TCNT1L = 0;
 464               		.loc 1 269 0
 465 0014 1092 8500 		sts 133,__zero_reg__
 270:Caterina.c    **** 
 466               		.loc 1 270 0
 467 0018 1092 8400 		sts 132,__zero_reg__
 273:Caterina.c    ****         TX_LED_OFF();
 468               		.loc 1 273 0
 469 001c 8091 0000 		lds r24,TxLEDPulse
 470 0020 9091 0000 		lds r25,TxLEDPulse+1
 471 0024 0097      		sbiw r24,0
 472 0026 01F0      		breq .L38
 273:Caterina.c    ****         TX_LED_OFF();
 473               		.loc 1 273 0 is_stmt 0 discriminator 1
 474 0028 0197      		sbiw r24,1
 475 002a 9093 0000 		sts TxLEDPulse+1,r25
 476 002e 8093 0000 		sts TxLEDPulse,r24
 477 0032 892B      		or r24,r25
 478 0034 01F4      		brne .L38
 274:Caterina.c    ****     if (RxLEDPulse && !(--RxLEDPulse))
 479               		.loc 1 274 0 is_stmt 1
 480 0036 5D9A      		sbi 0xb,5
 481               	.L38:
 275:Caterina.c    ****         RX_LED_OFF();
 482               		.loc 1 275 0
 483 0038 8091 0000 		lds r24,RxLEDPulse
 484 003c 9091 0000 		lds r25,RxLEDPulse+1
 485 0040 0097      		sbiw r24,0
 486 0042 01F0      		breq .L41
 275:Caterina.c    ****         RX_LED_OFF();
 487               		.loc 1 275 0 is_stmt 0 discriminator 1
 488 0044 0197      		sbiw r24,1
 489 0046 9093 0000 		sts RxLEDPulse+1,r25
 490 004a 8093 0000 		sts RxLEDPulse,r24
 491 004e 892B      		or r24,r25
 492 0050 01F4      		brne .L41
 276:Caterina.c    **** 
 493               		.loc 1 276 0 is_stmt 1
 494 0052 289A      		sbi 0x5,0
 495               	.L41:
 496               	.LVL18:
 497               	.LBB104:
 278:Caterina.c    ****         Timeout++;
 498               		.loc 1 278 0
 499 0054 E0E0      		ldi r30,0
 500 0056 F0E0      		ldi r31,0
 501               	/* #APP */
 502               	 ;  278 "Caterina.c" 1
 503 0058 8591      		lpm r24, Z+
 504 005a 9491      		lpm r25, Z
 505               		
 506               	 ;  0 "" 2
 507               	.LVL19:
 508               	/* #NOAPP */
 509               	.LBE104:
 510 005c 0196      		adiw r24,1
 511 005e 01F0      		breq .L36
 279:Caterina.c    **** }
 512               		.loc 1 279 0
 513 0060 8091 0000 		lds r24,Timeout
 514 0064 9091 0000 		lds r25,Timeout+1
 515               	.LVL20:
 516 0068 0196      		adiw r24,1
 517 006a 9093 0000 		sts Timeout+1,r25
 518 006e 8093 0000 		sts Timeout,r24
 519               	.L36:
 520               	/* epilogue start */
 280:Caterina.c    **** 
 521               		.loc 1 280 0
 522 0072 FF91      		pop r31
 523 0074 EF91      		pop r30
 524 0076 9F91      		pop r25
 525 0078 8F91      		pop r24
 526 007a 2F91      		pop r18
 527 007c 0F90      		pop r0
 528 007e 0FBE      		out __SREG__,r0
 529 0080 0F90      		pop r0
 530 0082 1F90      		pop r1
 531 0084 1895      		reti
 532               		.cfi_endproc
 533               	.LFE108:
 535               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 536               	.global	EVENT_USB_Device_ConfigurationChanged
 538               	EVENT_USB_Device_ConfigurationChanged:
 539               	.LFB109:
 286:Caterina.c    ****     /* Setup CDC Notification, Rx and Tx Endpoints */
 540               		.loc 1 286 0
 541               		.cfi_startproc
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 0 */
 545               	.L__stack_usage = 0
 546               	.LVL21:
 547               	.LBB105:
 548               	.LBB106:
 276:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 549               		.loc 2 276 0
 550 0000 42E0      		ldi r20,lo8(2)
 551 0002 61EC      		ldi r22,lo8(-63)
 552 0004 82E0      		ldi r24,lo8(2)
 553 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 554               	.LVL22:
 555               	.LBE106:
 556               	.LBE105:
 557               	.LBB107:
 558               	.LBB108:
 559 000a 42E1      		ldi r20,lo8(18)
 560 000c 61E8      		ldi r22,lo8(-127)
 561 000e 83E0      		ldi r24,lo8(3)
 562 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 563               	.LVL23:
 564               	.LBE108:
 565               	.LBE107:
 566               	.LBB109:
 567               	.LBB110:
 568 0014 42E1      		ldi r20,lo8(18)
 569 0016 60E8      		ldi r22,lo8(-128)
 570 0018 84E0      		ldi r24,lo8(4)
 571 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 572               	.LVL24:
 573               	.LBE110:
 574               	.LBE109:
 575               		.cfi_endproc
 576               	.LFE109:
 578               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 579               	.global	EVENT_USB_Device_ControlRequest
 581               	EVENT_USB_Device_ControlRequest:
 582               	.LFB110:
 306:Caterina.c    ****     /* Ignore any requests that aren't directed to the CDC interface */
 583               		.loc 1 306 0
 584               		.cfi_startproc
 585               	/* prologue: function */
 586               	/* frame size = 0 */
 587               	/* stack size = 0 */
 588               	.L__stack_usage = 0
 308:Caterina.c    ****         (REQTYPE_CLASS | REQREC_INTERFACE))
 589               		.loc 1 308 0
 590 0000 8091 0000 		lds r24,USB_ControlRequest
 591 0004 982F      		mov r25,r24
 592 0006 9F77      		andi r25,lo8(127)
 593 0008 9132      		cpi r25,lo8(33)
 594 000a 01F4      		brne .L48
 315:Caterina.c    ****     {
 595               		.loc 1 315 0
 596 000c 9091 0000 		lds r25,USB_ControlRequest+1
 597 0010 9032      		cpi r25,lo8(32)
 598 0012 01F0      		breq .L50
 599 0014 9132      		cpi r25,lo8(33)
 600 0016 01F4      		brne .L48
 318:Caterina.c    ****             {
 601               		.loc 1 318 0
 602 0018 813A      		cpi r24,lo8(-95)
 603 001a 01F4      		brne .L48
 604               	.LBB111:
 605               	.LBB112:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 606               		.loc 2 504 0
 607 001c 8091 E800 		lds r24,232
 608 0020 877F      		andi r24,lo8(-9)
 609 0022 8093 E800 		sts 232,r24
 610               	.LBE112:
 611               	.LBE111:
 323:Caterina.c    ****                 Endpoint_ClearOUT();
 612               		.loc 1 323 0
 613 0026 67E0      		ldi r22,lo8(7)
 614 0028 70E0      		ldi r23,0
 615 002a 80E0      		ldi r24,lo8(LineEncoding)
 616 002c 90E0      		ldi r25,hi8(LineEncoding)
 617 002e 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 618               	.LVL25:
 619               	.LBB113:
 620               	.LBB114:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 621               		.loc 2 531 0
 622 0032 8091 E800 		lds r24,232
 623 0036 8B77      		andi r24,lo8(123)
 624 0038 00C0      		rjmp .L52
 625               	.L50:
 626               	.LBE114:
 627               	.LBE113:
 329:Caterina.c    ****             {
 628               		.loc 1 329 0
 629 003a 8132      		cpi r24,lo8(33)
 630 003c 01F4      		brne .L48
 631               	.LBB115:
 632               	.LBB116:
 504:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 633               		.loc 2 504 0
 634 003e 8091 E800 		lds r24,232
 635 0042 877F      		andi r24,lo8(-9)
 636 0044 8093 E800 		sts 232,r24
 637               	.LBE116:
 638               	.LBE115:
 334:Caterina.c    ****                 Endpoint_ClearIN();
 639               		.loc 1 334 0
 640 0048 67E0      		ldi r22,lo8(7)
 641 004a 70E0      		ldi r23,0
 642 004c 80E0      		ldi r24,lo8(LineEncoding)
 643 004e 90E0      		ldi r25,hi8(LineEncoding)
 644 0050 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 645               	.LVL26:
 646               	.LBB117:
 647               	.LBB118:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 648               		.loc 2 516 0
 649 0054 8091 E800 		lds r24,232
 650 0058 8E77      		andi r24,lo8(126)
 651               	.L52:
 652 005a 8093 E800 		sts 232,r24
 653               	.L48:
 654 005e 0895      		ret
 655               	.LBE118:
 656               	.LBE117:
 657               		.cfi_endproc
 658               	.LFE110:
 660               		.section	.rodata.str1.1,"aMS",@progbits,1
 661               	.LC0:
 662 0000 4341 5445 		.string	"CATERINA"
 662      5249 4E41 
 662      00
 663               		.section	.text.CDC_Task,"ax",@progbits
 664               	.global	CDC_Task
 666               	CDC_Task:
 667               	.LFB114:
 518:Caterina.c    **** }
 519:Caterina.c    **** 
 520:Caterina.c    **** #define STK_OK              0x10
 521:Caterina.c    **** #define STK_INSYNC          0x14  // ' '
 522:Caterina.c    **** #define CRC_EOP             0x20  // 'SPACE'
 523:Caterina.c    **** #define STK_GET_SYNC        0x30  // '0'
 524:Caterina.c    **** 
 525:Caterina.c    **** #define STK_GET_PARAMETER   0x41  // 'A'
 526:Caterina.c    **** #define STK_SET_DEVICE      0x42  // 'B'
 527:Caterina.c    **** #define STK_SET_DEVICE_EXT  0x45  // 'E'
 528:Caterina.c    **** #define STK_LOAD_ADDRESS    0x55  // 'U'
 529:Caterina.c    **** #define STK_UNIVERSAL       0x56  // 'V'
 530:Caterina.c    **** #define STK_PROG_PAGE       0x64  // 'd'
 531:Caterina.c    **** #define STK_READ_PAGE       0x74  // 't'
 532:Caterina.c    **** #define STK_READ_SIGN       0x75  // 'u'
 533:Caterina.c    **** 
 534:Caterina.c    **** /** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the requi
 535:Caterina.c    ****  *  and send the appropriate response back to the host.
 536:Caterina.c    ****  */
 537:Caterina.c    **** void CDC_Task(void)
 538:Caterina.c    **** {
 668               		.loc 1 538 0
 669               		.cfi_startproc
 670 0000 4F92      		push r4
 671               	.LCFI7:
 672               		.cfi_def_cfa_offset 3
 673               		.cfi_offset 4, -2
 674 0002 5F92      		push r5
 675               	.LCFI8:
 676               		.cfi_def_cfa_offset 4
 677               		.cfi_offset 5, -3
 678 0004 6F92      		push r6
 679               	.LCFI9:
 680               		.cfi_def_cfa_offset 5
 681               		.cfi_offset 6, -4
 682 0006 7F92      		push r7
 683               	.LCFI10:
 684               		.cfi_def_cfa_offset 6
 685               		.cfi_offset 7, -5
 686 0008 8F92      		push r8
 687               	.LCFI11:
 688               		.cfi_def_cfa_offset 7
 689               		.cfi_offset 8, -6
 690 000a 9F92      		push r9
 691               	.LCFI12:
 692               		.cfi_def_cfa_offset 8
 693               		.cfi_offset 9, -7
 694 000c AF92      		push r10
 695               	.LCFI13:
 696               		.cfi_def_cfa_offset 9
 697               		.cfi_offset 10, -8
 698 000e BF92      		push r11
 699               	.LCFI14:
 700               		.cfi_def_cfa_offset 10
 701               		.cfi_offset 11, -9
 702 0010 CF92      		push r12
 703               	.LCFI15:
 704               		.cfi_def_cfa_offset 11
 705               		.cfi_offset 12, -10
 706 0012 DF92      		push r13
 707               	.LCFI16:
 708               		.cfi_def_cfa_offset 12
 709               		.cfi_offset 13, -11
 710 0014 EF92      		push r14
 711               	.LCFI17:
 712               		.cfi_def_cfa_offset 13
 713               		.cfi_offset 14, -12
 714 0016 FF92      		push r15
 715               	.LCFI18:
 716               		.cfi_def_cfa_offset 14
 717               		.cfi_offset 15, -13
 718 0018 0F93      		push r16
 719               	.LCFI19:
 720               		.cfi_def_cfa_offset 15
 721               		.cfi_offset 16, -14
 722 001a 1F93      		push r17
 723               	.LCFI20:
 724               		.cfi_def_cfa_offset 16
 725               		.cfi_offset 17, -15
 726 001c CF93      		push r28
 727               	.LCFI21:
 728               		.cfi_def_cfa_offset 17
 729               		.cfi_offset 28, -16
 730 001e DF93      		push r29
 731               	.LCFI22:
 732               		.cfi_def_cfa_offset 18
 733               		.cfi_offset 29, -17
 734               	/* prologue: function */
 735               	/* frame size = 0 */
 736               	/* stack size = 16 */
 737               	.L__stack_usage = 16
 738               	.LVL27:
 739               	.LBB151:
 740               	.LBB152:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 741               		.loc 2 330 0
 742 0020 84E0      		ldi r24,lo8(4)
 743 0022 8093 E900 		sts 233,r24
 744               	.LVL28:
 745               	.LBE152:
 746               	.LBE151:
 747               	.LBB153:
 748               	.LBB154:
 479:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 749               		.loc 2 479 0
 750 0026 8091 E800 		lds r24,232
 751               	.LBE154:
 752               	.LBE153:
 539:Caterina.c    ****     /* Select the OUT endpoint */
 540:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 541:Caterina.c    **** 
 542:Caterina.c    ****     /* Check if endpoint has a command in it sent from the host */
 543:Caterina.c    ****     if (!(Endpoint_IsOUTReceived()))
 753               		.loc 1 543 0
 754 002a 82FF      		sbrs r24,2
 755 002c 00C0      		rjmp .L53
 544:Caterina.c    ****       return;
 545:Caterina.c    **** 
 546:Caterina.c    ****     RX_LED_ON();
 756               		.loc 1 546 0
 757 002e 2898      		cbi 0x5,0
 547:Caterina.c    ****     RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
 758               		.loc 1 547 0
 759 0030 84E6      		ldi r24,lo8(100)
 760 0032 90E0      		ldi r25,0
 761 0034 9093 0000 		sts RxLEDPulse+1,r25
 762 0038 8093 0000 		sts RxLEDPulse,r24
 548:Caterina.c    **** 
 549:Caterina.c    ****     /* Read in the bootloader command (first byte sent from host) */
 550:Caterina.c    ****     uint8_t Command = FetchNextCommandByte();
 763               		.loc 1 550 0
 764 003c 0E94 0000 		call FetchNextCommandByte
 765               	.LVL29:
 766 0040 C82F      		mov r28,r24
 767               	.LVL30:
 551:Caterina.c    **** 
 552:Caterina.c    ****     if (Command == 'E')
 768               		.loc 1 552 0
 769 0042 8534      		cpi r24,lo8(69)
 770 0044 01F4      		brne .L56
 553:Caterina.c    ****     {
 554:Caterina.c    ****         /* We nearly run out the bootloader timeout clock,
 555:Caterina.c    ****         * leaving just a few hundred milliseconds so the
 556:Caterina.c    ****         * bootloder has time to respond and service any
 557:Caterina.c    ****         * subsequent requests */
 558:Caterina.c    ****         Timeout = TIMEOUT_PERIOD - 500;
 771               		.loc 1 558 0
 772 0046 84EF      		ldi r24,lo8(-12)
 773 0048 9FEF      		ldi r25,lo8(-1)
 774               	.LVL31:
 775 004a 9093 0000 		sts Timeout+1,r25
 776 004e 8093 0000 		sts Timeout,r24
 777               	.L57:
 559:Caterina.c    **** 
 560:Caterina.c    ****         /* Re-enable RWW section - must be done here in case
 561:Caterina.c    ****          * user has disabled verification on upload.  */
 562:Caterina.c    ****         boot_rww_enable_safe();
 778               		.loc 1 562 0 discriminator 1
 779 0052 07B6      		in __tmp_reg__,0x37
 780 0054 00FC      		sbrc __tmp_reg__,0
 781 0056 00C0      		rjmp .L57
 782               	.L58:
 783               		.loc 1 562 0 is_stmt 0 discriminator 3
 784 0058 F999      		sbic 0x1f,1
 785 005a 00C0      		rjmp .L58
 786               		.loc 1 562 0 discriminator 4
 787 005c 81E1      		ldi r24,lo8(17)
 788               	/* #APP */
 789               	 ;  562 "Caterina.c" 1
 790 005e 8093 5700 		sts 87, r24
 791 0062 E895      		spm
 792               		
 793               	 ;  0 "" 2
 794               	/* #NOAPP */
 795 0064 00C0      		rjmp .L142
 796               	.LVL32:
 797               	.L56:
 563:Caterina.c    **** 
 564:Caterina.c    ****         // Send confirmation byte back to the host
 565:Caterina.c    ****         WriteNextResponseByte('\r');
 566:Caterina.c    ****     }
 567:Caterina.c    ****     else if (Command == 'T')
 798               		.loc 1 567 0 is_stmt 1
 799 0066 8435      		cpi r24,lo8(84)
 800 0068 01F4      		brne .L60
 568:Caterina.c    ****     {
 569:Caterina.c    ****         FetchNextCommandByte();
 801               		.loc 1 569 0
 802 006a 0E94 0000 		call FetchNextCommandByte
 803               	.LVL33:
 804               	.L142:
 570:Caterina.c    **** 
 571:Caterina.c    ****         // Send confirmation byte back to the host
 572:Caterina.c    ****         WriteNextResponseByte('\r');
 805               		.loc 1 572 0
 806 006e 8DE0      		ldi r24,lo8(13)
 807               	.L143:
 808 0070 0E94 0000 		call WriteNextResponseByte
 809               	.LVL34:
 810 0074 00C0      		rjmp .L59
 811               	.LVL35:
 812               	.L60:
 573:Caterina.c    ****     }
 574:Caterina.c    ****     else if ((Command == 'L') || (Command == 'P'))
 813               		.loc 1 574 0
 814 0076 8C34      		cpi r24,lo8(76)
 815 0078 01F0      		breq .L142
 816               		.loc 1 574 0 is_stmt 0 discriminator 1
 817 007a 8035      		cpi r24,lo8(80)
 818 007c 01F0      		breq .L142
 575:Caterina.c    ****     {
 576:Caterina.c    ****         // Send confirmation byte back to the host
 577:Caterina.c    ****         WriteNextResponseByte('\r');
 578:Caterina.c    ****     }
 579:Caterina.c    ****     else if (Command == 't')
 819               		.loc 1 579 0 is_stmt 1
 820 007e 8437      		cpi r24,lo8(116)
 821 0080 01F4      		brne .L63
 580:Caterina.c    ****     {
 581:Caterina.c    ****         // Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader
 582:Caterina.c    ****         WriteNextResponseByte(0x44);
 822               		.loc 1 582 0
 823 0082 84E4      		ldi r24,lo8(68)
 824               	.LVL36:
 825 0084 0E94 0000 		call WriteNextResponseByte
 826               	.LVL37:
 583:Caterina.c    ****         WriteNextResponseByte(0x00);
 827               		.loc 1 583 0
 828 0088 80E0      		ldi r24,0
 829 008a 00C0      		rjmp .L143
 830               	.LVL38:
 831               	.L63:
 584:Caterina.c    ****     }
 585:Caterina.c    ****     else if (Command == 'a')
 832               		.loc 1 585 0
 833 008c 8136      		cpi r24,lo8(97)
 834 008e 01F4      		brne .L64
 586:Caterina.c    ****     {
 587:Caterina.c    ****         // Indicate auto-address increment is supported
 588:Caterina.c    ****         WriteNextResponseByte('Y');
 835               		.loc 1 588 0
 836 0090 89E5      		ldi r24,lo8(89)
 837               	.LVL39:
 838 0092 00C0      		rjmp .L143
 839               	.LVL40:
 840               	.L64:
 589:Caterina.c    ****     }
 590:Caterina.c    ****     else if (Command == 'A')
 841               		.loc 1 590 0
 842 0094 8134      		cpi r24,lo8(65)
 843 0096 01F4      		brne .L65
 591:Caterina.c    ****     {
 592:Caterina.c    ****         // Set the current address to that given by the host
 593:Caterina.c    ****         CurrAddress   = (FetchNextCommandByte() << 9);
 844               		.loc 1 593 0
 845 0098 0E94 0000 		call FetchNextCommandByte
 846               	.LVL41:
 847 009c C82F      		mov r28,r24
 848               	.LVL42:
 594:Caterina.c    ****         CurrAddress  |= (FetchNextCommandByte() << 1);
 849               		.loc 1 594 0
 850 009e 0E94 0000 		call FetchNextCommandByte
 851               	.LVL43:
 852 00a2 2C2F      		mov r18,r28
 853 00a4 30E0      		ldi r19,0
 854 00a6 322F      		mov r19,r18
 855 00a8 2227      		clr r18
 856 00aa 330F      		lsl r19
 857 00ac 90E0      		ldi r25,0
 858 00ae 880F      		lsl r24
 859 00b0 991F      		rol r25
 860 00b2 822B      		or r24,r18
 861 00b4 932B      		or r25,r19
 862 00b6 092E      		mov __tmp_reg__,r25
 863 00b8 000C      		lsl r0
 864 00ba AA0B      		sbc r26,r26
 865 00bc BB0B      		sbc r27,r27
 866 00be 00C0      		rjmp .L144
 867               	.LVL44:
 868               	.L65:
 595:Caterina.c    **** 
 596:Caterina.c    ****         // Send confirmation byte back to the host
 597:Caterina.c    ****         WriteNextResponseByte('\r');
 598:Caterina.c    ****     }
 599:Caterina.c    ****     else if (Command == 'p')
 869               		.loc 1 599 0
 870 00c0 8037      		cpi r24,lo8(112)
 871 00c2 01F4      		brne .L66
 600:Caterina.c    ****     {
 601:Caterina.c    ****         // Indicate serial programmer back to the host
 602:Caterina.c    ****         WriteNextResponseByte('S');
 872               		.loc 1 602 0
 873 00c4 83E5      		ldi r24,lo8(83)
 874               	.LVL45:
 875 00c6 00C0      		rjmp .L143
 876               	.LVL46:
 877               	.L66:
 603:Caterina.c    ****     }
 604:Caterina.c    ****     else if (Command == 'S')
 878               		.loc 1 604 0
 879 00c8 8335      		cpi r24,lo8(83)
 880 00ca 01F4      		brne .L67
 881 00cc C0E0      		ldi r28,lo8(.LC0)
 882 00ce D0E0      		ldi r29,hi8(.LC0)
 883               	.LVL47:
 884               	.L68:
 885               	.LBB155:
 605:Caterina.c    ****     {
 606:Caterina.c    ****         // Write the 7-byte software identifier to the endpoint
 607:Caterina.c    ****         for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
 608:Caterina.c    ****           WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 886               		.loc 1 608 0 discriminator 3
 887 00d0 8991      		ld r24,Y+
 888               	.LVL48:
 889 00d2 0E94 0000 		call WriteNextResponseByte
 890               	.LVL49:
 607:Caterina.c    ****           WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
 891               		.loc 1 607 0 discriminator 3
 892 00d6 20E0      		ldi r18,hi8(.LC0+7)
 893 00d8 C030      		cpi r28,lo8(.LC0+7)
 894 00da D207      		cpc r29,r18
 895 00dc 01F4      		brne .L68
 896 00de 00C0      		rjmp .L59
 897               	.LVL50:
 898               	.L67:
 899               	.LBE155:
 609:Caterina.c    ****     }
 610:Caterina.c    ****     else if (Command == 'V')
 900               		.loc 1 610 0
 901 00e0 8635      		cpi r24,lo8(86)
 902 00e2 01F4      		brne .L69
 611:Caterina.c    ****     {
 612:Caterina.c    ****         WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
 903               		.loc 1 612 0
 904 00e4 81E3      		ldi r24,lo8(49)
 905               	.LVL51:
 906 00e6 0E94 0000 		call WriteNextResponseByte
 907               	.LVL52:
 613:Caterina.c    ****         WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
 908               		.loc 1 613 0
 909 00ea 80E3      		ldi r24,lo8(48)
 910 00ec 00C0      		rjmp .L143
 911               	.LVL53:
 912               	.L69:
 614:Caterina.c    ****     }
 615:Caterina.c    ****     else if (Command == 's')
 913               		.loc 1 615 0
 914 00ee 8337      		cpi r24,lo8(115)
 915 00f0 01F4      		brne .L70
 616:Caterina.c    ****     {
 617:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_3);
 916               		.loc 1 617 0
 917 00f2 87E8      		ldi r24,lo8(-121)
 918               	.LVL54:
 919 00f4 0E94 0000 		call WriteNextResponseByte
 920               	.LVL55:
 618:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_2);
 921               		.loc 1 618 0
 922 00f8 85E9      		ldi r24,lo8(-107)
 923 00fa 0E94 0000 		call WriteNextResponseByte
 924               	.LVL56:
 619:Caterina.c    ****         WriteNextResponseByte(AVR_SIGNATURE_1);
 925               		.loc 1 619 0
 926 00fe 8EE1      		ldi r24,lo8(30)
 927 0100 00C0      		rjmp .L143
 928               	.LVL57:
 929               	.L70:
 620:Caterina.c    ****     }
 621:Caterina.c    ****     else if (Command == 'e')
 930               		.loc 1 621 0
 931 0102 8536      		cpi r24,lo8(101)
 932 0104 01F4      		brne .L71
 933 0106 E0E0      		ldi r30,0
 934 0108 F0E0      		ldi r31,0
 935               	.LBB156:
 622:Caterina.c    ****     {
 623:Caterina.c    ****         // Clear the application section of flash
 624:Caterina.c    ****         for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress +=
 625:Caterina.c    ****         {
 626:Caterina.c    ****             boot_page_erase(CurrFlashAddress);
 936               		.loc 1 626 0
 937 010a 83E0      		ldi r24,lo8(3)
 938               	.LVL58:
 627:Caterina.c    ****             boot_spm_busy_wait();
 628:Caterina.c    ****             boot_page_write(CurrFlashAddress);
 939               		.loc 1 628 0
 940 010c 95E0      		ldi r25,lo8(5)
 941               	.L74:
 626:Caterina.c    ****             boot_spm_busy_wait();
 942               		.loc 1 626 0
 943               	/* #APP */
 944               	 ;  626 "Caterina.c" 1
 945 010e 8093 5700 		sts 87, r24
 946 0112 E895      		spm
 947               		
 948               	 ;  0 "" 2
 949               	/* #NOAPP */
 950               	.L72:
 627:Caterina.c    ****             boot_spm_busy_wait();
 951               		.loc 1 627 0 discriminator 1
 952 0114 07B6      		in __tmp_reg__,0x37
 953 0116 00FC      		sbrc __tmp_reg__,0
 954 0118 00C0      		rjmp .L72
 955               		.loc 1 628 0
 956               	/* #APP */
 957               	 ;  628 "Caterina.c" 1
 958 011a 9093 5700 		sts 87, r25
 959 011e E895      		spm
 960               		
 961               	 ;  0 "" 2
 962               	/* #NOAPP */
 963               	.L73:
 629:Caterina.c    ****             boot_spm_busy_wait();
 964               		.loc 1 629 0 discriminator 1
 965 0120 07B6      		in __tmp_reg__,0x37
 966 0122 00FC      		sbrc __tmp_reg__,0
 967 0124 00C0      		rjmp .L73
 968               	.LVL59:
 969 0126 E058      		subi r30,-128
 970 0128 FF4F      		sbci r31,-1
 624:Caterina.c    ****         {
 971               		.loc 1 624 0 discriminator 2
 972 012a E115      		cp r30,__zero_reg__
 973 012c 40E7      		ldi r20,112
 974 012e F407      		cpc r31,r20
 975 0130 01F4      		brne .L74
 976 0132 00C0      		rjmp .L142
 977               	.LVL60:
 978               	.L71:
 979               	.LBE156:
 630:Caterina.c    ****         }
 631:Caterina.c    **** 
 632:Caterina.c    ****         // Send confirmation byte back to the host
 633:Caterina.c    ****         WriteNextResponseByte('\r');
 634:Caterina.c    ****     }
 635:Caterina.c    ****     #if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
 636:Caterina.c    ****     else if (Command == 'l')
 637:Caterina.c    ****     {
 638:Caterina.c    ****         // Set the lock bits to those given by the host
 639:Caterina.c    ****         boot_lock_bits_set(FetchNextCommandByte());
 640:Caterina.c    **** 
 641:Caterina.c    ****         // Send confirmation byte back to the host
 642:Caterina.c    ****         WriteNextResponseByte('\r');
 643:Caterina.c    ****     }
 644:Caterina.c    ****     #endif
 645:Caterina.c    ****     else if (Command == 'r')
 980               		.loc 1 645 0
 981 0134 8237      		cpi r24,lo8(114)
 982 0136 01F4      		brne .L75
 983               	.LBB157:
 646:Caterina.c    ****     {
 647:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
 984               		.loc 1 647 0
 985 0138 E1E0      		ldi r30,lo8(1)
 986 013a F0E0      		ldi r31,0
 987 013c 00C0      		rjmp .L145
 988               	.L75:
 989               	.LBE157:
 648:Caterina.c    ****     }
 649:Caterina.c    ****     else if (Command == 'F')
 990               		.loc 1 649 0
 991 013e 8634      		cpi r24,lo8(70)
 992 0140 01F4      		brne .L76
 993               	.LBB158:
 650:Caterina.c    ****     {
 651:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
 994               		.loc 1 651 0
 995 0142 E0E0      		ldi r30,0
 996 0144 F0E0      		ldi r31,0
 997 0146 00C0      		rjmp .L145
 998               	.L76:
 999               	.LBE158:
 652:Caterina.c    ****     }
 653:Caterina.c    ****     else if (Command == 'N')
 1000               		.loc 1 653 0
 1001 0148 8E34      		cpi r24,lo8(78)
 1002 014a 01F4      		brne .L77
 1003               	.LBB159:
 654:Caterina.c    ****     {
 655:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
 1004               		.loc 1 655 0
 1005 014c E3E0      		ldi r30,lo8(3)
 1006 014e F0E0      		ldi r31,0
 1007 0150 00C0      		rjmp .L145
 1008               	.L77:
 1009               	.LBE159:
 656:Caterina.c    ****     }
 657:Caterina.c    ****     else if (Command == 'Q')
 1010               		.loc 1 657 0
 1011 0152 8135      		cpi r24,lo8(81)
 1012 0154 01F4      		brne .L78
 1013               	.LBB160:
 658:Caterina.c    ****     {
 659:Caterina.c    ****         WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
 1014               		.loc 1 659 0
 1015 0156 E2E0      		ldi r30,lo8(2)
 1016 0158 F0E0      		ldi r31,0
 1017               	.L145:
 1018 015a 89E0      		ldi r24,lo8(9)
 1019               	.LVL61:
 1020               	/* #APP */
 1021               	 ;  659 "Caterina.c" 1
 1022 015c 8093 5700 		sts 87, r24
 1023 0160 8491      		lpm r24, Z
 1024               		
 1025               	 ;  0 "" 2
 1026               	.LVL62:
 1027               	/* #NOAPP */
 1028 0162 00C0      		rjmp .L143
 1029               	.LVL63:
 1030               	.L78:
 1031               	.LBE160:
 660:Caterina.c    ****     }
 661:Caterina.c    ****     #if !defined(NO_BLOCK_SUPPORT)
 662:Caterina.c    ****     else if (Command == 'b')
 1032               		.loc 1 662 0
 1033 0164 8236      		cpi r24,lo8(98)
 1034 0166 01F4      		brne .L79
 663:Caterina.c    ****     {
 664:Caterina.c    ****         WriteNextResponseByte('Y');
 1035               		.loc 1 664 0
 1036 0168 89E5      		ldi r24,lo8(89)
 1037               	.LVL64:
 1038 016a 0E94 0000 		call WriteNextResponseByte
 1039               	.LVL65:
 665:Caterina.c    **** 
 666:Caterina.c    ****         // Send block size to the host
 667:Caterina.c    ****         WriteNextResponseByte(SPM_PAGESIZE >> 8);
 1040               		.loc 1 667 0
 1041 016e 80E0      		ldi r24,0
 1042 0170 0E94 0000 		call WriteNextResponseByte
 1043               	.LVL66:
 668:Caterina.c    ****         WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
 1044               		.loc 1 668 0
 1045 0174 80E8      		ldi r24,lo8(-128)
 1046 0176 00C0      		rjmp .L143
 1047               	.LVL67:
 1048               	.L79:
 669:Caterina.c    ****     }
 670:Caterina.c    ****     else if ((Command == 'B') || (Command == 'g'))
 1049               		.loc 1 670 0
 1050 0178 8234      		cpi r24,lo8(66)
 1051 017a 01F0      		breq .L80
 1052               		.loc 1 670 0 is_stmt 0 discriminator 1
 1053 017c 8736      		cpi r24,lo8(103)
 1054 017e 01F0      		breq .+2
 1055 0180 00C0      		rjmp .L81
 1056               	.L80:
 671:Caterina.c    ****     {
 672:Caterina.c    ****         // Keep resetting the timeout counter if we're receiving self-programming instructions
 673:Caterina.c    ****         Timeout = 0;
 1057               		.loc 1 673 0 is_stmt 1
 1058 0182 1092 0000 		sts Timeout+1,__zero_reg__
 1059 0186 1092 0000 		sts Timeout,__zero_reg__
 1060               	.LVL68:
 1061               	.LBB161:
 1062               	.LBB162:
 356:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 1063               		.loc 1 356 0
 1064 018a 0E94 0000 		call FetchNextCommandByte
 1065               	.LVL69:
 1066 018e 082F      		mov r16,r24
 1067               	.LVL70:
 357:Caterina.c    **** 
 1068               		.loc 1 357 0
 1069 0190 0E94 0000 		call FetchNextCommandByte
 1070               	.LVL71:
 1071 0194 D82F      		mov r29,r24
 1072               	.LVL72:
 359:Caterina.c    **** 
 1073               		.loc 1 359 0
 1074 0196 0E94 0000 		call FetchNextCommandByte
 1075               	.LVL73:
 1076 019a 182F      		mov r17,r24
 1077               	.LVL74:
 361:Caterina.c    ****     {
 1078               		.loc 1 361 0
 1079 019c 8BEB      		ldi r24,lo8(-69)
 1080 019e 810F      		add r24,r17
 1081 01a0 8230      		cpi r24,lo8(2)
 1082 01a2 00F0      		brlo .L82
 1083               	.LVL75:
 1084               	.L107:
 364:Caterina.c    **** 
 1085               		.loc 1 364 0
 1086 01a4 8FE3      		ldi r24,lo8(63)
 1087 01a6 00C0      		rjmp .L143
 1088               	.LVL76:
 1089               	.L82:
 356:Caterina.c    ****     BlockSize |=  FetchNextCommandByte();
 1090               		.loc 1 356 0
 1091 01a8 8D2F      		mov r24,r29
 1092 01aa 90E0      		ldi r25,0
 357:Caterina.c    **** 
 1093               		.loc 1 357 0
 1094 01ac 902B      		or r25,r16
 371:Caterina.c    **** 
 1095               		.loc 1 371 0
 1096 01ae 1092 6F00 		sts 111,__zero_reg__
 374:Caterina.c    ****     {
 1097               		.loc 1 374 0
 1098 01b2 C736      		cpi r28,lo8(103)
 1099 01b4 01F0      		breq .+2
 1100 01b6 00C0      		rjmp .L83
 1101               	.LVL77:
 377:Caterina.c    **** 
 1102               		.loc 1 377 0
 1103 01b8 21E1      		ldi r18,lo8(17)
 1104               	/* #APP */
 1105               	 ;  377 "Caterina.c" 1
 1106 01ba 2093 5700 		sts 87, r18
 1107 01be E895      		spm
 1108               		
 1109               	 ;  0 "" 2
 1110               	/* #NOAPP */
 1111 01c0 EC01      		movw r28,r24
 1112               	.LVL78:
 353:Caterina.c    ****     uint8_t  LowByte  = 0;
 1113               		.loc 1 353 0
 1114 01c2 B12C      		mov r11,__zero_reg__
 394:Caterina.c    ****             }
 1115               		.loc 1 394 0
 1116 01c4 01E0      		ldi r16,lo8(1)
 1117               	.LVL79:
 1118               	.L84:
 379:Caterina.c    ****         {
 1119               		.loc 1 379 0
 1120 01c6 2097      		sbiw r28,0
 1121 01c8 01F4      		brne .+2
 1122 01ca 00C0      		rjmp .L89
 1123 01cc C090 0000 		lds r12,CurrAddress
 1124 01d0 D090 0000 		lds r13,CurrAddress+1
 1125 01d4 E090 0000 		lds r14,CurrAddress+2
 1126 01d8 F090 0000 		lds r15,CurrAddress+3
 381:Caterina.c    ****             {
 1127               		.loc 1 381 0
 1128 01dc 1634      		cpi r17,lo8(70)
 1129 01de 01F4      		brne .L85
 1130               	.LVL80:
 1131               	.LBB163:
 387:Caterina.c    ****                 #endif
 1132               		.loc 1 387 0
 1133 01e0 EB2D      		mov r30,r11
 1134 01e2 F0E0      		ldi r31,0
 1135 01e4 EC29      		or r30,r12
 1136 01e6 FD29      		or r31,r13
 1137               	/* #APP */
 1138               	 ;  387 "Caterina.c" 1
 1139 01e8 8491      		lpm r24, Z
 1140               		
 1141               	 ;  0 "" 2
 1142               	.LVL81:
 1143               	/* #NOAPP */
 1144               	.LBE163:
 1145 01ea 0E94 0000 		call WriteNextResponseByte
 1146               	.LVL82:
 391:Caterina.c    ****                   CurrAddress += 2;
 1147               		.loc 1 391 0
 1148 01ee BB20      		tst r11
 1149 01f0 01F0      		breq .L86
 392:Caterina.c    **** 
 1150               		.loc 1 392 0
 1151 01f2 52E0      		ldi r21,2
 1152 01f4 C50E      		add r12,r21
 1153 01f6 D11C      		adc r13,__zero_reg__
 1154 01f8 E11C      		adc r14,__zero_reg__
 1155 01fa F11C      		adc r15,__zero_reg__
 1156               	.LVL83:
 1157 01fc C092 0000 		sts CurrAddress,r12
 1158 0200 D092 0000 		sts CurrAddress+1,r13
 1159 0204 E092 0000 		sts CurrAddress+2,r14
 1160 0208 F092 0000 		sts CurrAddress+3,r15
 1161               	.LVL84:
 1162               	.L86:
 394:Caterina.c    ****             }
 1163               		.loc 1 394 0
 1164 020c B026      		eor r11,r16
 1165               	.LVL85:
 1166 020e 00C0      		rjmp .L87
 1167               	.L85:
 399:Caterina.c    **** 
 1168               		.loc 1 399 0
 1169 0210 D701      		movw r26,r14
 1170 0212 C601      		movw r24,r12
 1171 0214 B695      		lsr r27
 1172 0216 A795      		ror r26
 1173 0218 9795      		ror r25
 1174 021a 8795      		ror r24
 1175 021c 0E94 0000 		call eeprom_read_byte
 1176               	.LVL86:
 1177 0220 0E94 0000 		call WriteNextResponseByte
 1178               	.LVL87:
 402:Caterina.c    ****             }
 1179               		.loc 1 402 0
 1180 0224 82E0      		ldi r24,2
 1181 0226 C80E      		add r12,r24
 1182 0228 D11C      		adc r13,__zero_reg__
 1183 022a E11C      		adc r14,__zero_reg__
 1184 022c F11C      		adc r15,__zero_reg__
 1185 022e C092 0000 		sts CurrAddress,r12
 1186 0232 D092 0000 		sts CurrAddress+1,r13
 1187 0236 E092 0000 		sts CurrAddress+2,r14
 1188 023a F092 0000 		sts CurrAddress+3,r15
 1189               	.L87:
 1190 023e 2197      		sbiw r28,1
 1191               	.LVL88:
 1192 0240 00C0      		rjmp .L84
 1193               	.LVL89:
 1194               	.L83:
 1195               	.LBB164:
 408:Caterina.c    **** 
 1196               		.loc 1 408 0
 1197 0242 8090 0000 		lds r8,CurrAddress
 1198 0246 9090 0000 		lds r9,CurrAddress+1
 1199 024a A090 0000 		lds r10,CurrAddress+2
 1200 024e B090 0000 		lds r11,CurrAddress+3
 410:Caterina.c    ****         {
 1201               		.loc 1 410 0
 1202 0252 1634      		cpi r17,lo8(70)
 1203 0254 01F4      		brne .L115
 412:Caterina.c    ****             boot_spm_busy_wait();
 1204               		.loc 1 412 0
 1205 0256 23E0      		ldi r18,lo8(3)
 1206 0258 F401      		movw r30,r8
 1207               	/* #APP */
 1208               	 ;  412 "Caterina.c" 1
 1209 025a 2093 5700 		sts 87, r18
 1210 025e E895      		spm
 1211               		
 1212               	 ;  0 "" 2
 1213               	/* #NOAPP */
 1214               	.L91:
 413:Caterina.c    ****         }
 1215               		.loc 1 413 0
 1216 0260 07B6      		in __tmp_reg__,0x37
 1217 0262 00FC      		sbrc __tmp_reg__,0
 1218 0264 00C0      		rjmp .L91
 1219               	.L115:
 410:Caterina.c    ****         {
 1220               		.loc 1 410 0
 1221 0266 E12C      		mov r14,__zero_reg__
 1222 0268 F12C      		mov r15,__zero_reg__
 1223 026a EC01      		movw r28,r24
 1224               	.LVL90:
 434:Caterina.c    ****             }
 1225               		.loc 1 434 0
 1226 026c 01E0      		ldi r16,lo8(1)
 1227               	.LVL91:
 1228               	.L92:
 416:Caterina.c    ****         {
 1229               		.loc 1 416 0
 1230 026e 2097      		sbiw r28,0
 1231 0270 01F4      		brne .+2
 1232 0272 00C0      		rjmp .L146
 418:Caterina.c    ****             {
 1233               		.loc 1 418 0
 1234 0274 1634      		cpi r17,lo8(70)
 1235 0276 01F4      		brne .L93
 421:Caterina.c    ****                 {
 1236               		.loc 1 421 0
 1237 0278 FF20      		tst r15
 1238 027a 01F0      		breq .L94
 424:Caterina.c    **** 
 1239               		.loc 1 424 0
 1240 027c 4090 0000 		lds r4,CurrAddress
 1241 0280 5090 0000 		lds r5,CurrAddress+1
 1242 0284 6090 0000 		lds r6,CurrAddress+2
 1243 0288 7090 0000 		lds r7,CurrAddress+3
 1244 028c 0E94 0000 		call FetchNextCommandByte
 1245               	.LVL92:
 1246 0290 2E2D      		mov r18,r14
 1247 0292 30E0      		ldi r19,0
 1248 0294 A901      		movw r20,r18
 1249 0296 582B      		or r21,r24
 1250 0298 F201      		movw r30,r4
 1251               	/* #APP */
 1252               	 ;  424 "Caterina.c" 1
 1253 029a 0A01      		movw  r0, r20
 1254 029c 0093 5700 		sts 87, r16
 1255 02a0 E895      		spm
 1256 02a2 1124      		clr  r1
 1257               		
 1258               	 ;  0 "" 2
 427:Caterina.c    ****                 }
 1259               		.loc 1 427 0
 1260               	/* #NOAPP */
 1261 02a4 F2E0      		ldi r31,2
 1262 02a6 4F0E      		add r4,r31
 1263 02a8 511C      		adc r5,__zero_reg__
 1264 02aa 611C      		adc r6,__zero_reg__
 1265 02ac 711C      		adc r7,__zero_reg__
 1266 02ae 4092 0000 		sts CurrAddress,r4
 1267 02b2 5092 0000 		sts CurrAddress+1,r5
 1268 02b6 6092 0000 		sts CurrAddress+2,r6
 1269 02ba 7092 0000 		sts CurrAddress+3,r7
 1270 02be 00C0      		rjmp .L95
 1271               	.L94:
 431:Caterina.c    ****                 }
 1272               		.loc 1 431 0
 1273 02c0 0E94 0000 		call FetchNextCommandByte
 1274               	.LVL93:
 1275 02c4 E82E      		mov r14,r24
 1276               	.LVL94:
 1277               	.L95:
 434:Caterina.c    ****             }
 1278               		.loc 1 434 0
 1279 02c6 F026      		eor r15,r16
 1280               	.LVL95:
 1281 02c8 00C0      		rjmp .L96
 1282               	.L93:
 439:Caterina.c    **** 
 1283               		.loc 1 439 0
 1284 02ca 0E94 0000 		call FetchNextCommandByte
 1285               	.LVL96:
 1286 02ce 682F      		mov r22,r24
 1287 02d0 8091 0000 		lds r24,CurrAddress
 1288 02d4 9091 0000 		lds r25,CurrAddress+1
 1289 02d8 A091 0000 		lds r26,CurrAddress+2
 1290 02dc B091 0000 		lds r27,CurrAddress+3
 1291 02e0 B695      		lsr r27
 1292 02e2 A795      		ror r26
 1293 02e4 9795      		ror r25
 1294 02e6 8795      		ror r24
 1295 02e8 0E94 0000 		call eeprom_write_byte
 1296               	.LVL97:
 442:Caterina.c    ****             }
 1297               		.loc 1 442 0
 1298 02ec 8091 0000 		lds r24,CurrAddress
 1299 02f0 9091 0000 		lds r25,CurrAddress+1
 1300 02f4 A091 0000 		lds r26,CurrAddress+2
 1301 02f8 B091 0000 		lds r27,CurrAddress+3
 1302 02fc 0296      		adiw r24,2
 1303 02fe A11D      		adc r26,__zero_reg__
 1304 0300 B11D      		adc r27,__zero_reg__
 1305 0302 8093 0000 		sts CurrAddress,r24
 1306 0306 9093 0000 		sts CurrAddress+1,r25
 1307 030a A093 0000 		sts CurrAddress+2,r26
 1308 030e B093 0000 		sts CurrAddress+3,r27
 1309               	.L96:
 1310 0312 2197      		sbiw r28,1
 1311               	.LVL98:
 1312 0314 00C0      		rjmp .L92
 1313               	.LVL99:
 1314               	.L146:
 447:Caterina.c    ****         {
 1315               		.loc 1 447 0
 1316 0316 1634      		cpi r17,lo8(70)
 1317 0318 01F4      		brne .L98
 450:Caterina.c    **** 
 1318               		.loc 1 450 0
 1319 031a 85E0      		ldi r24,lo8(5)
 1320 031c F401      		movw r30,r8
 1321               	/* #APP */
 1322               	 ;  450 "Caterina.c" 1
 1323 031e 8093 5700 		sts 87, r24
 1324 0322 E895      		spm
 1325               		
 1326               	 ;  0 "" 2
 1327               	/* #NOAPP */
 1328               	.L99:
 453:Caterina.c    ****         }
 1329               		.loc 1 453 0
 1330 0324 07B6      		in __tmp_reg__,0x37
 1331 0326 00FC      		sbrc __tmp_reg__,0
 1332 0328 00C0      		rjmp .L99
 1333               	.L98:
 457:Caterina.c    ****     }
 1334               		.loc 1 457 0
 1335 032a 8DE0      		ldi r24,lo8(13)
 1336 032c 0E94 0000 		call WriteNextResponseByte
 1337               	.LVL100:
 1338               	.L89:
 1339               	.LBE164:
 461:Caterina.c    **** }
 1340               		.loc 1 461 0
 1341 0330 82E0      		ldi r24,lo8(2)
 1342 0332 8093 6F00 		sts 111,r24
 1343 0336 00C0      		rjmp .L59
 1344               	.LVL101:
 1345               	.L81:
 1346               	.LBE162:
 1347               	.LBE161:
 674:Caterina.c    ****         // Delegate the block write/read to a separate function for clarity
 675:Caterina.c    ****         ReadWriteMemoryBlock(Command);
 676:Caterina.c    ****     }
 677:Caterina.c    ****     #endif
 678:Caterina.c    ****     #if !defined(NO_FLASH_BYTE_SUPPORT)
 679:Caterina.c    ****     else if (Command == 'C')
 1348               		.loc 1 679 0
 1349 0338 8334      		cpi r24,lo8(67)
 1350 033a 01F4      		brne .L100
 680:Caterina.c    ****     {
 681:Caterina.c    ****         // Write the high byte to the current flash page
 682:Caterina.c    ****         boot_page_fill(CurrAddress, FetchNextCommandByte());
 1351               		.loc 1 682 0
 1352 033c C091 0000 		lds r28,CurrAddress
 1353 0340 D091 0000 		lds r29,CurrAddress+1
 1354 0344 0E94 0000 		call FetchNextCommandByte
 1355               	.LVL102:
 1356 0348 90E0      		ldi r25,0
 1357 034a 21E0      		ldi r18,lo8(1)
 1358 034c FE01      		movw r30,r28
 1359               	/* #APP */
 1360               	 ;  682 "Caterina.c" 1
 1361 034e 0C01      		movw  r0, r24
 1362 0350 2093 5700 		sts 87, r18
 1363 0354 E895      		spm
 1364 0356 1124      		clr  r1
 1365               		
 1366               	 ;  0 "" 2
 1367               	/* #NOAPP */
 1368 0358 00C0      		rjmp .L142
 1369               	.LVL103:
 1370               	.L100:
 683:Caterina.c    **** 
 684:Caterina.c    ****         // Send confirmation byte back to the host
 685:Caterina.c    ****         WriteNextResponseByte('\r');
 686:Caterina.c    ****     }
 687:Caterina.c    ****     else if (Command == 'c')
 1371               		.loc 1 687 0
 1372 035a 8336      		cpi r24,lo8(99)
 1373 035c 01F4      		brne .L101
 688:Caterina.c    ****     {
 689:Caterina.c    ****         // Write the low byte to the current flash page
 690:Caterina.c    ****         boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
 1374               		.loc 1 690 0
 1375 035e C090 0000 		lds r12,CurrAddress
 1376 0362 D090 0000 		lds r13,CurrAddress+1
 1377 0366 E090 0000 		lds r14,CurrAddress+2
 1378 036a F090 0000 		lds r15,CurrAddress+3
 1379 036e 0E94 0000 		call FetchNextCommandByte
 1380               	.LVL104:
 1381 0372 F601      		movw r30,r12
 1382 0374 E160      		ori r30,1
 1383 0376 90E0      		ldi r25,0
 1384 0378 21E0      		ldi r18,lo8(1)
 1385               	/* #APP */
 1386               	 ;  690 "Caterina.c" 1
 1387 037a 0C01      		movw  r0, r24
 1388 037c 2093 5700 		sts 87, r18
 1389 0380 E895      		spm
 1390 0382 1124      		clr  r1
 1391               		
 1392               	 ;  0 "" 2
 691:Caterina.c    **** 
 692:Caterina.c    ****         // Increment the address
 693:Caterina.c    ****         CurrAddress += 2;
 1393               		.loc 1 693 0
 1394               	/* #NOAPP */
 1395 0384 F2E0      		ldi r31,2
 1396 0386 CF0E      		add r12,r31
 1397 0388 D11C      		adc r13,__zero_reg__
 1398 038a E11C      		adc r14,__zero_reg__
 1399 038c F11C      		adc r15,__zero_reg__
 1400 038e C092 0000 		sts CurrAddress,r12
 1401 0392 D092 0000 		sts CurrAddress+1,r13
 1402 0396 E092 0000 		sts CurrAddress+2,r14
 1403 039a F092 0000 		sts CurrAddress+3,r15
 1404 039e 00C0      		rjmp .L142
 1405               	.LVL105:
 1406               	.L101:
 694:Caterina.c    **** 
 695:Caterina.c    ****         // Send confirmation byte back to the host
 696:Caterina.c    ****         WriteNextResponseByte('\r');
 697:Caterina.c    ****     }
 698:Caterina.c    ****     else if (Command == 'm')
 1407               		.loc 1 698 0
 1408 03a0 8D36      		cpi r24,lo8(109)
 1409 03a2 01F4      		brne .L102
 699:Caterina.c    ****     {
 700:Caterina.c    ****         // Commit the flash page to memory
 701:Caterina.c    ****         boot_page_write(CurrAddress);
 1410               		.loc 1 701 0
 1411 03a4 E091 0000 		lds r30,CurrAddress
 1412 03a8 F091 0000 		lds r31,CurrAddress+1
 1413 03ac 85E0      		ldi r24,lo8(5)
 1414               	.LVL106:
 1415               	/* #APP */
 1416               	 ;  701 "Caterina.c" 1
 1417 03ae 8093 5700 		sts 87, r24
 1418 03b2 E895      		spm
 1419               		
 1420               	 ;  0 "" 2
 1421               	/* #NOAPP */
 1422               	.L103:
 702:Caterina.c    **** 
 703:Caterina.c    ****         // Wait until write operation has completed
 704:Caterina.c    ****         boot_spm_busy_wait();
 1423               		.loc 1 704 0 discriminator 1
 1424 03b4 07B6      		in __tmp_reg__,0x37
 1425 03b6 00FC      		sbrc __tmp_reg__,0
 1426 03b8 00C0      		rjmp .L103
 1427 03ba 00C0      		rjmp .L142
 1428               	.LVL107:
 1429               	.L102:
 705:Caterina.c    **** 
 706:Caterina.c    ****         // Send confirmation byte back to the host
 707:Caterina.c    ****         WriteNextResponseByte('\r');
 708:Caterina.c    ****     }
 709:Caterina.c    ****     else if (Command == 'R')
 1430               		.loc 1 709 0
 1431 03bc 8235      		cpi r24,lo8(82)
 1432 03be 01F4      		brne .L104
 1433               	.LBB165:
 1434               	.LBB166:
 710:Caterina.c    ****     {
 711:Caterina.c    ****         #if (FLASHEND > 0xFFFF)
 712:Caterina.c    ****         uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
 713:Caterina.c    ****         #else
 714:Caterina.c    ****         uint16_t ProgramWord = pgm_read_word(CurrAddress);
 1435               		.loc 1 714 0
 1436 03c0 E091 0000 		lds r30,CurrAddress
 1437 03c4 F091 0000 		lds r31,CurrAddress+1
 1438               	.LVL108:
 1439               	/* #APP */
 1440               	 ;  714 "Caterina.c" 1
 1441 03c8 C591      		lpm r28, Z+
 1442 03ca D491      		lpm r29, Z
 1443               		
 1444               	 ;  0 "" 2
 1445               	.LVL109:
 1446               	/* #NOAPP */
 1447               	.LBE166:
 715:Caterina.c    ****         #endif
 716:Caterina.c    **** 
 717:Caterina.c    ****         WriteNextResponseByte(ProgramWord >> 8);
 1448               		.loc 1 717 0
 1449 03cc 8D2F      		mov r24,r29
 1450               	.LVL110:
 1451 03ce 0E94 0000 		call WriteNextResponseByte
 1452               	.LVL111:
 718:Caterina.c    ****         WriteNextResponseByte(ProgramWord & 0xFF);
 1453               		.loc 1 718 0
 1454 03d2 8C2F      		mov r24,r28
 1455 03d4 00C0      		rjmp .L143
 1456               	.LVL112:
 1457               	.L104:
 1458               	.LBE165:
 719:Caterina.c    ****     }
 720:Caterina.c    ****     #endif
 721:Caterina.c    ****     #if !defined(NO_EEPROM_BYTE_SUPPORT)
 722:Caterina.c    ****     else if (Command == 'D')
 1459               		.loc 1 722 0
 1460 03d6 8434      		cpi r24,lo8(68)
 1461 03d8 01F4      		brne .L105
 723:Caterina.c    ****     {
 724:Caterina.c    ****         // Read the byte from the endpoint and write it to the EEPROM
 725:Caterina.c    ****         eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
 1462               		.loc 1 725 0
 1463 03da 0E94 0000 		call FetchNextCommandByte
 1464               	.LVL113:
 1465 03de 682F      		mov r22,r24
 1466 03e0 8091 0000 		lds r24,CurrAddress
 1467 03e4 9091 0000 		lds r25,CurrAddress+1
 1468 03e8 A091 0000 		lds r26,CurrAddress+2
 1469 03ec B091 0000 		lds r27,CurrAddress+3
 1470 03f0 B695      		lsr r27
 1471 03f2 A795      		ror r26
 1472 03f4 9795      		ror r25
 1473 03f6 8795      		ror r24
 1474 03f8 0E94 0000 		call eeprom_write_byte
 1475               	.LVL114:
 726:Caterina.c    **** 
 727:Caterina.c    ****         // Increment the address after use
 728:Caterina.c    ****         CurrAddress += 2;
 1476               		.loc 1 728 0
 1477 03fc 8091 0000 		lds r24,CurrAddress
 1478 0400 9091 0000 		lds r25,CurrAddress+1
 1479 0404 A091 0000 		lds r26,CurrAddress+2
 1480 0408 B091 0000 		lds r27,CurrAddress+3
 1481 040c 0296      		adiw r24,2
 1482 040e A11D      		adc r26,__zero_reg__
 1483 0410 B11D      		adc r27,__zero_reg__
 1484               	.LVL115:
 1485               	.L144:
 1486 0412 8093 0000 		sts CurrAddress,r24
 1487 0416 9093 0000 		sts CurrAddress+1,r25
 1488 041a A093 0000 		sts CurrAddress+2,r26
 1489 041e B093 0000 		sts CurrAddress+3,r27
 1490 0422 00C0      		rjmp .L142
 1491               	.LVL116:
 1492               	.L105:
 729:Caterina.c    **** 
 730:Caterina.c    ****         // Send confirmation byte back to the host
 731:Caterina.c    ****         WriteNextResponseByte('\r');
 732:Caterina.c    ****     }
 733:Caterina.c    ****     else if (Command == 'd')
 1493               		.loc 1 733 0
 1494 0424 8436      		cpi r24,lo8(100)
 1495 0426 01F4      		brne .L106
 734:Caterina.c    ****     {
 735:Caterina.c    ****         // Read the EEPROM byte and write it to the endpoint
 736:Caterina.c    ****         WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
 1496               		.loc 1 736 0
 1497 0428 C090 0000 		lds r12,CurrAddress
 1498 042c D090 0000 		lds r13,CurrAddress+1
 1499 0430 E090 0000 		lds r14,CurrAddress+2
 1500 0434 F090 0000 		lds r15,CurrAddress+3
 1501 0438 D701      		movw r26,r14
 1502 043a C601      		movw r24,r12
 1503               	.LVL117:
 1504 043c B695      		lsr r27
 1505 043e A795      		ror r26
 1506 0440 9795      		ror r25
 1507 0442 8795      		ror r24
 1508 0444 0E94 0000 		call eeprom_read_byte
 1509               	.LVL118:
 1510 0448 0E94 0000 		call WriteNextResponseByte
 1511               	.LVL119:
 737:Caterina.c    **** 
 738:Caterina.c    ****         // Increment the address after use
 739:Caterina.c    ****         CurrAddress += 2;
 1512               		.loc 1 739 0
 1513 044c 22E0      		ldi r18,2
 1514 044e C20E      		add r12,r18
 1515 0450 D11C      		adc r13,__zero_reg__
 1516 0452 E11C      		adc r14,__zero_reg__
 1517 0454 F11C      		adc r15,__zero_reg__
 1518 0456 C092 0000 		sts CurrAddress,r12
 1519 045a D092 0000 		sts CurrAddress+1,r13
 1520 045e E092 0000 		sts CurrAddress+2,r14
 1521 0462 F092 0000 		sts CurrAddress+3,r15
 1522 0466 00C0      		rjmp .L59
 1523               	.LVL120:
 1524               	.L106:
 740:Caterina.c    ****     }
 741:Caterina.c    **** #endif
 742:Caterina.c    ****     else if (Command != 27)
 1525               		.loc 1 742 0
 1526 0468 8B31      		cpi r24,lo8(27)
 1527 046a 01F0      		breq .+2
 1528 046c 00C0      		rjmp .L107
 1529               	.LVL121:
 1530               	.L59:
 1531               	.LBB167:
 1532               	.LBB168:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1533               		.loc 2 330 0
 1534 046e 83E0      		ldi r24,lo8(3)
 1535 0470 8093 E900 		sts 233,r24
 1536               	.LVL122:
 1537               	.LBE168:
 1538               	.LBE167:
 1539               	.LBB169:
 1540               	.LBB170:
 420:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1541               		.loc 2 420 0
 1542 0474 9091 E800 		lds r25,232
 1543               	.LVL123:
 1544               	.LBE170:
 1545               	.LBE169:
 1546               	.LBB171:
 1547               	.LBB172:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1548               		.loc 2 516 0
 1549 0478 8091 E800 		lds r24,232
 1550 047c 8E77      		andi r24,lo8(126)
 1551 047e 8093 E800 		sts 232,r24
 1552               	.LBE172:
 1553               	.LBE171:
 743:Caterina.c    ****     {
 744:Caterina.c    ****         // Unknown (non-sync) command, return fail code
 745:Caterina.c    ****         WriteNextResponseByte('?');
 746:Caterina.c    ****     }
 747:Caterina.c    **** 
 748:Caterina.c    **** 
 749:Caterina.c    ****     /* Select the IN endpoint */
 750:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_TX_EPNUM);
 751:Caterina.c    **** 
 752:Caterina.c    ****     /* Remember if the endpoint is completely full before clearing it */
 753:Caterina.c    ****     bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
 754:Caterina.c    **** 
 755:Caterina.c    ****     /* Send the endpoint data to the host */
 756:Caterina.c    ****     Endpoint_ClearIN();
 757:Caterina.c    **** 
 758:Caterina.c    ****     /* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to s
 759:Caterina.c    ****     if (IsEndpointFull)
 1554               		.loc 1 759 0
 1555 0482 95FD      		sbrc r25,5
 1556 0484 00C0      		rjmp .L113
 1557               	.L109:
 1558               	.LBB173:
 1559               	.LBB174:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1560               		.loc 2 467 0
 1561 0486 8091 E800 		lds r24,232
 1562               	.LBE174:
 1563               	.LBE173:
 760:Caterina.c    ****     {
 761:Caterina.c    ****         while (!(Endpoint_IsINReady()))
 1564               		.loc 1 761 0
 1565 048a 80FD      		sbrc r24,0
 1566 048c 00C0      		rjmp .L147
 762:Caterina.c    ****         {
 763:Caterina.c    ****             if (USB_DeviceState == DEVICE_STATE_Unattached)
 1567               		.loc 1 763 0
 1568 048e 8EB3      		in r24,0x1e
 1569 0490 8111      		cpse r24,__zero_reg__
 1570 0492 00C0      		rjmp .L109
 1571 0494 00C0      		rjmp .L53
 1572               	.L147:
 1573               	.LBB175:
 1574               	.LBB176:
 516:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1575               		.loc 2 516 0
 1576 0496 8091 E800 		lds r24,232
 1577 049a 8E77      		andi r24,lo8(126)
 1578 049c 8093 E800 		sts 232,r24
 1579 04a0 00C0      		rjmp .L113
 1580               	.L114:
 1581               	.LBE176:
 1582               	.LBE175:
 764:Caterina.c    ****               return;
 765:Caterina.c    ****         }
 766:Caterina.c    **** 
 767:Caterina.c    ****         Endpoint_ClearIN();
 768:Caterina.c    ****     }
 769:Caterina.c    **** 
 770:Caterina.c    ****     /* Wait until the data has been sent to the host */
 771:Caterina.c    ****     while (!(Endpoint_IsINReady()))
 772:Caterina.c    ****     {
 773:Caterina.c    ****         if (USB_DeviceState == DEVICE_STATE_Unattached)
 1583               		.loc 1 773 0
 1584 04a2 8EB3      		in r24,0x1e
 1585 04a4 8823      		tst r24
 1586 04a6 01F0      		breq .L53
 1587               	.L113:
 1588               	.LBB177:
 1589               	.LBB178:
 467:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1590               		.loc 2 467 0
 1591 04a8 8091 E800 		lds r24,232
 1592               	.LBE178:
 1593               	.LBE177:
 771:Caterina.c    ****     {
 1594               		.loc 1 771 0
 1595 04ac 80FF      		sbrs r24,0
 1596 04ae 00C0      		rjmp .L114
 1597               	.LVL124:
 1598               	.LBB179:
 1599               	.LBB180:
 330:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1600               		.loc 2 330 0
 1601 04b0 84E0      		ldi r24,lo8(4)
 1602 04b2 8093 E900 		sts 233,r24
 1603               	.LVL125:
 1604               	.LBE180:
 1605               	.LBE179:
 1606               	.LBB181:
 1607               	.LBB182:
 531:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1608               		.loc 2 531 0
 1609 04b6 8091 E800 		lds r24,232
 1610 04ba 8B77      		andi r24,lo8(123)
 1611 04bc 8093 E800 		sts 232,r24
 1612               	.LVL126:
 1613               	.L53:
 1614               	/* epilogue start */
 1615               	.LBE182:
 1616               	.LBE181:
 774:Caterina.c    ****           return;
 775:Caterina.c    ****     }
 776:Caterina.c    **** 
 777:Caterina.c    ****     /* Select the OUT endpoint */
 778:Caterina.c    ****     Endpoint_SelectEndpoint(CDC_RX_EPNUM);
 779:Caterina.c    **** 
 780:Caterina.c    ****     /* Acknowledge the command from the host */
 781:Caterina.c    ****     Endpoint_ClearOUT();
 782:Caterina.c    **** }
 1617               		.loc 1 782 0
 1618 04c0 DF91      		pop r29
 1619 04c2 CF91      		pop r28
 1620 04c4 1F91      		pop r17
 1621 04c6 0F91      		pop r16
 1622 04c8 FF90      		pop r15
 1623 04ca EF90      		pop r14
 1624 04cc DF90      		pop r13
 1625 04ce CF90      		pop r12
 1626 04d0 BF90      		pop r11
 1627 04d2 AF90      		pop r10
 1628 04d4 9F90      		pop r9
 1629 04d6 8F90      		pop r8
 1630 04d8 7F90      		pop r7
 1631 04da 6F90      		pop r6
 1632 04dc 5F90      		pop r5
 1633 04de 4F90      		pop r4
 1634 04e0 0895      		ret
 1635               		.cfi_endproc
 1636               	.LFE114:
 1638               		.section	.text.startup.main,"ax",@progbits
 1639               	.global	main
 1641               	main:
 1642               	.LFB106:
 198:Caterina.c    ****     /* Clear all reset flags - some may be used by sketch */
 1643               		.loc 1 198 0
 1644               		.cfi_startproc
 1645               	/* prologue: function */
 1646               	/* frame size = 0 */
 1647               	/* stack size = 0 */
 1648               	.L__stack_usage = 0
 200:Caterina.c    ****     /* Watchdog may be configured with a 15 ms period so must disable it before going any further *
 1649               		.loc 1 200 0
 1650 0000 14BE      		out 0x34,__zero_reg__
 1651               	.LBB183:
 1652               	.LBB184:
 1653               		.file 3 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/lib/avr/include/avr/wdt.h **** 
 103:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/lib/avr/include/avr/wdt.h **** #else
 106:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/lib/avr/include/avr/wdt.h **** #endif
 108:/usr/lib/avr/include/avr/wdt.h **** 
 109:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/lib/avr/include/avr/wdt.h **** #else
 114:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/lib/avr/include/avr/wdt.h **** #endif
 116:/usr/lib/avr/include/avr/wdt.h **** 
 117:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/lib/avr/include/avr/wdt.h **** #else
 120:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/lib/avr/include/avr/wdt.h **** #endif
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/lib/avr/include/avr/wdt.h **** 
 125:/usr/lib/avr/include/avr/wdt.h **** 
 126:/usr/lib/avr/include/avr/wdt.h **** /**
 127:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/lib/avr/include/avr/wdt.h **** */
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** 
 138:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/lib/avr/include/avr/wdt.h **** 
 140:/usr/lib/avr/include/avr/wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:/usr/lib/avr/include/avr/wdt.h **** 
 142:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 143:/usr/lib/avr/include/avr/wdt.h **** do { \
 144:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 145:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 146:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"									"\n\t" \
 147:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:/usr/lib/avr/include/avr/wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:/usr/lib/avr/include/avr/wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:/usr/lib/avr/include/avr/wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:/usr/lib/avr/include/avr/wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h **** 	: [tmp]					"=r" (temp) \
 155:/usr/lib/avr/include/avr/wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:/usr/lib/avr/include/avr/wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:/usr/lib/avr/include/avr/wdt.h **** ); \
 162:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 163:/usr/lib/avr/include/avr/wdt.h **** 
 164:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 165:/usr/lib/avr/include/avr/wdt.h **** do { \
 166:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 167:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 168:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"								"\n\t" \
 169:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:/usr/lib/avr/include/avr/wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]            "=r" (temp) \
 174:/usr/lib/avr/include/avr/wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:/usr/lib/avr/include/avr/wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:/usr/lib/avr/include/avr/wdt.h **** ); \
 179:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 180:/usr/lib/avr/include/avr/wdt.h **** 
 181:/usr/lib/avr/include/avr/wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:/usr/lib/avr/include/avr/wdt.h **** 
 183:/usr/lib/avr/include/avr/wdt.h **** /*
 184:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 185:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 187:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 188:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 191:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 194:/usr/lib/avr/include/avr/wdt.h **** */
 195:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 196:/usr/lib/avr/include/avr/wdt.h **** do { \
 197:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 198:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 199:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 208:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 216:/usr/lib/avr/include/avr/wdt.h **** ); \
 217:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 218:/usr/lib/avr/include/avr/wdt.h **** 
 219:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 220:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 221:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:/usr/lib/avr/include/avr/wdt.h ****     : \
 227:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 233:/usr/lib/avr/include/avr/wdt.h **** );
 234:/usr/lib/avr/include/avr/wdt.h **** 
 235:/usr/lib/avr/include/avr/wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:/usr/lib/avr/include/avr/wdt.h **** 
 237:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 238:/usr/lib/avr/include/avr/wdt.h **** 
 239:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 240:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 241:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 243:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 244:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 248:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 254:/usr/lib/avr/include/avr/wdt.h **** )
 255:/usr/lib/avr/include/avr/wdt.h **** 
 256:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 257:/usr/lib/avr/include/avr/wdt.h **** do { \
 258:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 259:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 260:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 262:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 263:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 269:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 275:/usr/lib/avr/include/avr/wdt.h **** ); \
 276:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 277:/usr/lib/avr/include/avr/wdt.h **** 
 278:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 279:/usr/lib/avr/include/avr/wdt.h **** 
 280:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 281:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 282:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 283:/usr/lib/avr/include/avr/wdt.h **** {
 284:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:/usr/lib/avr/include/avr/wdt.h **** 	{
 286:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 287:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 289:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 290:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 294:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 300:/usr/lib/avr/include/avr/wdt.h **** 			);
 301:/usr/lib/avr/include/avr/wdt.h **** 	}
 302:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:/usr/lib/avr/include/avr/wdt.h **** 	{
 304:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 305:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 307:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 308:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 312:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 318:/usr/lib/avr/include/avr/wdt.h **** 			);
 319:/usr/lib/avr/include/avr/wdt.h **** 	}
 320:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:/usr/lib/avr/include/avr/wdt.h **** 	{
 322:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 323:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 330:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 336:/usr/lib/avr/include/avr/wdt.h **** 			);
 337:/usr/lib/avr/include/avr/wdt.h **** 	}
 338:/usr/lib/avr/include/avr/wdt.h **** 	else
 339:/usr/lib/avr/include/avr/wdt.h ****  	{
 340:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 341:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 348:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 			);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** }
 357:/usr/lib/avr/include/avr/wdt.h **** 
 358:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 359:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 360:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 361:/usr/lib/avr/include/avr/wdt.h **** {
 362:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:/usr/lib/avr/include/avr/wdt.h **** 	{
 364:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 365:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 366:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 369:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 375:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 381:/usr/lib/avr/include/avr/wdt.h **** 				);
 382:/usr/lib/avr/include/avr/wdt.h **** 	}
 383:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:/usr/lib/avr/include/avr/wdt.h **** 	{
 385:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 386:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 387:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 390:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 396:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 402:/usr/lib/avr/include/avr/wdt.h **** 				);
 403:/usr/lib/avr/include/avr/wdt.h **** 	}
 404:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:/usr/lib/avr/include/avr/wdt.h **** 	{
 406:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 407:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 408:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 417:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 423:/usr/lib/avr/include/avr/wdt.h **** 				);
 424:/usr/lib/avr/include/avr/wdt.h **** 	}
 425:/usr/lib/avr/include/avr/wdt.h **** 	else
 426:/usr/lib/avr/include/avr/wdt.h **** 	{
 427:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 428:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 429:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 438:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 444:/usr/lib/avr/include/avr/wdt.h **** 				);
 445:/usr/lib/avr/include/avr/wdt.h **** 	}
 446:/usr/lib/avr/include/avr/wdt.h **** }
 447:/usr/lib/avr/include/avr/wdt.h **** 
 448:/usr/lib/avr/include/avr/wdt.h **** #else
 449:/usr/lib/avr/include/avr/wdt.h **** 
 450:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 451:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 452:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 453:/usr/lib/avr/include/avr/wdt.h **** {
 454:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:/usr/lib/avr/include/avr/wdt.h **** 	{
 456:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 457:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 459:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 460:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 461:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 462:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 463:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 464:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 465:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 466:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 467:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 468:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 469:/usr/lib/avr/include/avr/wdt.h **** 		);
 470:/usr/lib/avr/include/avr/wdt.h **** 	}
 471:/usr/lib/avr/include/avr/wdt.h **** 	else
 472:/usr/lib/avr/include/avr/wdt.h **** 	{
 473:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 474:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 475:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 476:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 477:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 478:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 479:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 480:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 481:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 482:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 483:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 484:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 485:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 486:/usr/lib/avr/include/avr/wdt.h **** 		);
 487:/usr/lib/avr/include/avr/wdt.h **** 	}
 488:/usr/lib/avr/include/avr/wdt.h **** }
 489:/usr/lib/avr/include/avr/wdt.h **** 
 490:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 491:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 492:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 493:/usr/lib/avr/include/avr/wdt.h **** {
 494:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 495:/usr/lib/avr/include/avr/wdt.h **** 	{
 496:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 497:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 498:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 499:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 500:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 501:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 502:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 503:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 504:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 505:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 506:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 507:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 508:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 509:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 510:/usr/lib/avr/include/avr/wdt.h **** 		);
 511:/usr/lib/avr/include/avr/wdt.h **** 	}
 512:/usr/lib/avr/include/avr/wdt.h **** 	else
 513:/usr/lib/avr/include/avr/wdt.h **** 	{
 514:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 515:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1654               		.loc 3 515 0
 1655               	/* #APP */
 1656               	 ;  515 "/usr/lib/avr/include/avr/wdt.h" 1
 1657 0002 0FB6      		in __tmp_reg__,__SREG__
 1658 0004 F894      		cli
 1659 0006 A895      		wdr
 1660 0008 8091 6000 		lds r24,96
 1661 000c 8861      		ori r24,24
 1662 000e 8093 6000 		sts 96,r24
 1663 0012 1092 6000 		sts 96,__zero_reg__
 1664 0016 0FBE      		out __SREG__,__tmp_reg__
 1665               		
 1666               	 ;  0 "" 2
 1667               	/* #NOAPP */
 1668               	.LBE184:
 1669               	.LBE183:
 205:Caterina.c    ****     _delay_ms(10);    // allow time for caps to charge
 1670               		.loc 1 205 0
 1671 0018 6A98      		cbi 0xd,2
 1672 001a 729A      		sbi 0xe,2
 1673               	.LVL127:
 1674               	.LBB185:
 1675               	.LBB186:
 1676               		.file 4 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1677               		.loc 4 187 0
 1678 001c 8FE1      		ldi r24,lo8(19999)
 1679 001e 9EE4      		ldi r25,hi8(19999)
 1680 0020 0197      	1:	sbiw r24,1
 1681 0022 01F4      		brne 1b
 1682 0024 00C0      		rjmp .
 1683 0026 0000      		nop
 1684               	.LVL128:
 1685               	.LBE186:
 1686               	.LBE185:
 208:Caterina.c    ****     {
 1687               		.loc 1 208 0
 1688 0028 629B      		sbis 0xc,2
 1689 002a 00C0      		rjmp .L149
 1690               	.LVL129:
 1691               	.LBB187:
 208:Caterina.c    ****     {
 1692               		.loc 1 208 0 is_stmt 0 discriminator 1
 1693 002c E0E0      		ldi r30,0
 1694 002e F0E0      		ldi r31,0
 1695               	/* #APP */
 1696               	 ;  208 "Caterina.c" 1
 1697 0030 8591      		lpm r24, Z+
 1698 0032 9491      		lpm r25, Z
 1699               		
 1700               	 ;  0 "" 2
 1701               	.LVL130:
 1702               	/* #NOAPP */
 1703               	.LBE187:
 1704 0034 0196      		adiw r24,1
 1705 0036 01F4      		brne .L152
 1706               	.LVL131:
 1707               	.L149:
 213:Caterina.c    **** 
 1708               		.loc 1 213 0 is_stmt 1
 1709 0038 0E94 0000 		call SetupHardware
 1710               	.LVL132:
 216:Caterina.c    **** 
 1711               		.loc 1 216 0
 1712               	/* #APP */
 1713               	 ;  216 "Caterina.c" 1
 1714 003c 7894      		sei
 1715               	 ;  0 "" 2
 1716               	/* #NOAPP */
 1717               	.L150:
 218:Caterina.c    ****             CDC_Task();
 1718               		.loc 1 218 0
 1719 003e 6299      		sbic 0xc,2
 1720 0040 00C0      		rjmp .L152
 219:Caterina.c    ****             USB_USBTask();
 1721               		.loc 1 219 0
 1722 0042 0E94 0000 		call CDC_Task
 1723               	.LVL133:
 220:Caterina.c    **** 
 1724               		.loc 1 220 0
 1725 0046 0E94 0000 		call USB_USBTask
 1726               	.LVL134:
 222:Caterina.c    ****         }
 1727               		.loc 1 222 0
 1728 004a 0E94 0000 		call LEDPulse
 1729               	.LVL135:
 1730 004e 00C0      		rjmp .L150
 1731               	.L152:
 1732               	.LBB188:
 1733               	.LBB189:
 1734               		.file 5 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
   1:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
   2:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****              LUFA Library
   3:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   5:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****            www.lufa-lib.org
   7:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
   8:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
   9:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /*
  10:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  12:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software without specific, written prior permission.
  20:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  21:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****   this software.
  29:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** */
  30:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  31:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \file
  32:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  33:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \copydetails Group_USBManagement_AVR8
  34:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  35:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  38:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  39:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** /** \ingroup Group_USBManagement
  40:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \defgroup Group_USBManagement_AVR8 USB Interface Management (AVR8)
  41:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  \brief USB Controller definitions for the AVR8 microcontrollers.
  42:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  43:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  44:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *
  45:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  *  @{
  46:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h ****  */
  47:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  48:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #ifndef __USBCONTROLLER_AVR8_H__
  49:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** #define __USBCONTROLLER_AVR8_H__
  50:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  51:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Includes: */
  52:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBMode.h"
  54:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../Events.h"
  55:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBTask.h"
  56:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#include "../USBInterrupt.h"
  57:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  58:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  59:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Host.h"
  60:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../OTG.h"
  61:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Pipe.h"
  62:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../HostStandardReq.h"
  63:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../PipeStream.h"
  64:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  65:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  66:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  67:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Device.h"
  68:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../Endpoint.h"
  69:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../DeviceStandardReq.h"
  70:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#include "../EndpointStream.h"
  71:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  72:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  73:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  74:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if defined(__cplusplus)
  75:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			extern "C" {
  76:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  77:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  78:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Preprocessor Checks and Defines: */
  79:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  80:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  81:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  82:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  83:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(F_USB)
  84:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error F_USB is not defined. You must define F_USB to the frequency of the unprescaled USB contr
  85:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
  86:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
  87:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if (F_USB == 8000000)
  88:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  89:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  90:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
  91:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  92:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  93:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                0
  94:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
  95:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  96:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
  97:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
  98:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
  99:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#elif (F_USB == 16000000)
 100:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 101:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 102:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			     defined(__AVR_ATmega32U2__))
 103:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 104:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 105:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 106:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 107:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 108:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 109:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 110:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 111:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 112:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 113:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#if !defined(USB_PLL_PSC)
 114:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#error No PLL prescale value available for chosen F_USB value and AVR model.
 115:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		#endif
 116:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 117:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Macros: */
 119:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** \name USB Controller Option Masks */
 120:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@{
 121:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 122:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 123:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 124:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 125:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 126:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 127:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 128:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 129:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  regulator should be enabled to regulate the data pin voltages from the VBUS level down to a 
 130:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  the range allowable by the USB standard.
 131:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *
 132:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 133:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 134:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 135:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 136:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 137:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 138:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 139:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 140:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 141:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 142:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 143:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 144:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 145:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 146:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 147:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			//@}
 148:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 149:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 150:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 151:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 152:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 153:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 154:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 155:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 156:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 157:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 158:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 159:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 160:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 		/* Inline Functions: */
 161:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 162:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				/** Determines if the VBUS line is currently high (i.e. the USB host is supplying power).
 163:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 164:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 165:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *
 166:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false
 167:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				 */
 168:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 169:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				static inline bool USB_VBUS_GetStatus(void)
 170:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				{
 171:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 172:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				}
 173:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			#endif
 174:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 
 175:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 176:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 177:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 178:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			 */
 179:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 180:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			static inline void USB_Detach(void)
 181:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 			{
 182:../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h **** 				UDCON  |=  (1 << DETACH);
 1735               		.loc 5 182 0
 1736 0050 8091 E000 		lds r24,224
 1737 0054 8160      		ori r24,lo8(1)
 1738 0056 8093 E000 		sts 224,r24
 1739               	.LBE189:
 1740               	.LBE188:
 228:Caterina.c    **** /* Jump to beginning of application space to run the sketch - do not reset */
 1741               		.loc 1 228 0
 1742 005a 0E94 0000 		call SetupCurrentLimit
 1743               	.LVL136:
 230:Caterina.c    **** }
 1744               		.loc 1 230 0
 1745 005e 0E94 0000 		call StartSketch
 1746               	.LVL137:
 231:Caterina.c    **** 
 1747               		.loc 1 231 0
 1748 0062 80E0      		ldi r24,0
 1749 0064 90E0      		ldi r25,0
 1750 0066 0895      		ret
 1751               		.cfi_endproc
 1752               	.LFE106:
 1754               		.comm	LLEDPulse,2,1
 1755               	.global	Timeout
 1756               		.section .bss
 1759               	Timeout:
 1760 0000 0000      		.zero	2
 1761               	.global	RxLEDPulse
 1764               	RxLEDPulse:
 1765 0002 0000      		.zero	2
 1766               	.global	TxLEDPulse
 1769               	TxLEDPulse:
 1770 0004 0000      		.zero	2
 1771               		.local	CurrAddress
 1772               		.comm	CurrAddress,4,1
 1773               		.data
 1776               	LineEncoding:
 1777 0000 00        		.byte	0
 1778 0001 00        		.byte	0
 1779 0002 00        		.byte	0
 1780 0003 00        		.byte	0
 1781 0004 00        		.byte	0
 1782 0005 00        		.byte	0
 1783 0006 08        		.byte	8
 1784               		.text
 1785               	.Letext0:
 1786               		.file 6 "/usr/lib/avr/include/stdint.h"
 1787               		.file 7 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1788               		.file 8 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1789               		.file 9 "../../LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1790               		.file 10 "../../LUFA-111009/LUFA/Drivers/USB/Core/USBTask.h"
 1791               		.file 11 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1792               		.file 12 "/usr/lib/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Caterina.c
     /tmp/ccE06vir.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccE06vir.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccE06vir.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccE06vir.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccE06vir.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccE06vir.s:12     .text.FetchNextCommandByte:0000000000000000 FetchNextCommandByte
     /tmp/ccE06vir.s:78     .text.WriteNextResponseByte:0000000000000000 WriteNextResponseByte
     /tmp/ccE06vir.s:1769   .bss:0000000000000004 TxLEDPulse
     /tmp/ccE06vir.s:154    .text.StartSketch:0000000000000000 StartSketch
     /tmp/ccE06vir.s:200    .text.TWIInit:0000000000000000 TWIInit
     /tmp/ccE06vir.s:223    .text.TWIStart:0000000000000000 TWIStart
     /tmp/ccE06vir.s:248    .text.TWIStop:0000000000000000 TWIStop
     /tmp/ccE06vir.s:266    .text.TWIWrite:0000000000000000 TWIWrite
     /tmp/ccE06vir.s:296    .text.SetupCurrentLimit:0000000000000000 SetupCurrentLimit
     /tmp/ccE06vir.s:329    .text.LEDPulse:0000000000000000 LEDPulse
                            *COM*:0000000000000002 LLEDPulse
     /tmp/ccE06vir.s:376    .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/ccE06vir.s:425    .text.__vector_17:0000000000000000 __vector_17
     /tmp/ccE06vir.s:1764   .bss:0000000000000002 RxLEDPulse
     /tmp/ccE06vir.s:1759   .bss:0000000000000000 Timeout
     /tmp/ccE06vir.s:538    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccE06vir.s:581    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccE06vir.s:1776   .data:0000000000000000 LineEncoding
     /tmp/ccE06vir.s:666    .text.CDC_Task:0000000000000000 CDC_Task
                             .bss:0000000000000006 CurrAddress
     /tmp/ccE06vir.s:1641   .text.startup.main:0000000000000000 main
     /tmp/ccE06vir.s:661    .rodata.str1.1:0000000000000000 .LC0

UNDEFINED SYMBOLS
USB_Init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
eeprom_read_byte
eeprom_write_byte
USB_USBTask
__do_copy_data
__do_clear_bss
